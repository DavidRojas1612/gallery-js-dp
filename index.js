!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/",n(n.s=21)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(9),i=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o="[DEFAULT]",a=[],s=function(){function t(t,e,n){this.firebase_=n,this.isDeleted_=!1,this.services_={},this.name_=e.name,this._automaticDataCollectionEnabled=e.automaticDataCollectionEnabled||!1,this.options_=r.deepCopy(t),this.INTERNAL={getUid:function(){return null},getToken:function(){return Promise.resolve(null)},addAuthTokenListener:function(t){a.push(t),setTimeout(function(){return t(null)},0)},removeAuthTokenListener:function(t){a=a.filter(function(e){return e!==t})}}}return Object.defineProperty(t.prototype,"automaticDataCollectionEnabled",{get:function(){return this.checkDestroyed_(),this._automaticDataCollectionEnabled},set:function(t){this.checkDestroyed_(),this._automaticDataCollectionEnabled=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"name",{get:function(){return this.checkDestroyed_(),this.name_},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"options",{get:function(){return this.checkDestroyed_(),this.options_},enumerable:!0,configurable:!0}),t.prototype.delete=function(){var t=this;return new Promise(function(e){t.checkDestroyed_(),e()}).then(function(){t.firebase_.INTERNAL.removeApp(t.name_);var e=[];return Object.keys(t.services_).forEach(function(n){Object.keys(t.services_[n]).forEach(function(r){e.push(t.services_[n][r])})}),Promise.all(e.map(function(t){return t.INTERNAL.delete()}))}).then(function(){t.isDeleted_=!0,t.services_={}})},t.prototype._getService=function(t,e){if(void 0===e&&(e=o),this.checkDestroyed_(),this.services_[t]||(this.services_[t]={}),!this.services_[t][e]){var n=e!==o?e:void 0,r=this.firebase_.INTERNAL.factories[t](this,this.extendApp.bind(this),n);this.services_[t][e]=r}return this.services_[t][e]},t.prototype.extendApp=function(t){var e=this;r.deepExtend(this,t),t.INTERNAL&&t.INTERNAL.addAuthTokenListener&&(a.forEach(function(t){e.INTERNAL.addAuthTokenListener(t)}),a=[])},t.prototype.checkDestroyed_=function(){this.isDeleted_&&u("app-deleted",{name:this.name_})},t}();function u(t,e){throw c.create(t,e)}s.prototype.name&&s.prototype.options||s.prototype.delete||console.log("dc");var c=new r.ErrorFactory("app","Firebase",{"no-app":"No Firebase App '{$name}' has been created - call Firebase App.initializeApp()","bad-app-name":"Illegal App name: '{$name}","duplicate-app":"Firebase App named '{$name}' already exists","app-deleted":"Firebase App named '{$name}' already deleted","duplicate-service":"Firebase service named '{$name}' already registered","sa-not-supported":"Initializing the Firebase SDK with a service account is only allowed in a Node.js environment. On client devices, you should instead initialize the SDK with an api key and auth domain","invalid-app-argument":"firebase.{$name}() takes either no argument or a Firebase App instance."}),h=function t(){var e={},n={},a={},c={__esModule:!0,initializeApp:function(t,n){if(void 0===n&&(n={}),"object"!=typeof n||null===n){var r=n;n={name:r}}var a=n;void 0===a.name&&(a.name=o);var h=a.name;"string"==typeof h&&h||u("bad-app-name",{name:h+""}),i(e,h)&&u("duplicate-app",{name:h});var l=new s(t,a,c);return e[h]=l,f(l,"create"),l},app:h,apps:null,Promise:Promise,SDK_VERSION:"5.0.4",INTERNAL:{registerService:function(t,e,i,o,f){n[t]&&u("duplicate-service",{name:t}),n[t]=e,o&&(a[t]=o,l().forEach(function(t){o("create",t)}));var p=function(e){return void 0===e&&(e=h()),"function"!=typeof e[t]&&u("invalid-app-argument",{name:t}),e[t]()};return void 0!==i&&r.deepExtend(p,i),c[t]=p,s.prototype[t]=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return this._getService.bind(this,t).apply(this,f?e:[])},p},createFirebaseNamespace:t,extendNamespace:function(t){r.deepExtend(c,t)},createSubscribe:r.createSubscribe,ErrorFactory:r.ErrorFactory,removeApp:function(t){f(e[t],"delete"),delete e[t]},factories:n,useAsService:p,Promise:Promise,deepExtend:r.deepExtend}};function h(t){return i(e,t=t||o)||u("no-app",{name:t}),e[t]}function l(){return Object.keys(e).map(function(t){return e[t]})}function f(t,e){Object.keys(n).forEach(function(n){var r=p(t,n);null!==r&&a[r]&&a[r](e,t)})}function p(t,e){if("serverAuth"===e)return null;var n=e;return t.options,n}return r.patchProperty(c,"default",c),Object.defineProperty(c,"apps",{get:l}),r.patchProperty(h,"App",s),c}();e.firebase=h,e.default=h},function(t,e,n){"use strict";n.r(e);var r=n(0),i=n.n(r),o="https://firebasestorage.googleapis.com",a="https://firebasestorage.googleapis.com",s="/v0",u="/v0",c=12e4,h=6e4,l=-9007199254740991,f=function(){function t(t,e){this.code_=d(t),this.message_="Firebase Storage: "+e,this.serverResponse_=null,this.name_="FirebaseError"}return t.prototype.codeProp=function(){return this.code},t.prototype.codeEquals=function(t){return d(t)===this.codeProp()},t.prototype.serverResponseProp=function(){return this.serverResponse_},t.prototype.setServerResponseProp=function(t){this.serverResponse_=t},Object.defineProperty(t.prototype,"name",{get:function(){return this.name_},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"code",{get:function(){return this.code_},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"message",{get:function(){return this.message_},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"serverResponse",{get:function(){return this.serverResponse_},enumerable:!0,configurable:!0}),t}(),p={UNKNOWN:"unknown",OBJECT_NOT_FOUND:"object-not-found",BUCKET_NOT_FOUND:"bucket-not-found",PROJECT_NOT_FOUND:"project-not-found",QUOTA_EXCEEDED:"quota-exceeded",UNAUTHENTICATED:"unauthenticated",UNAUTHORIZED:"unauthorized",RETRY_LIMIT_EXCEEDED:"retry-limit-exceeded",INVALID_CHECKSUM:"invalid-checksum",CANCELED:"canceled",INVALID_EVENT_NAME:"invalid-event-name",INVALID_URL:"invalid-url",INVALID_DEFAULT_BUCKET:"invalid-default-bucket",NO_DEFAULT_BUCKET:"no-default-bucket",CANNOT_SLICE_BLOB:"cannot-slice-blob",SERVER_FILE_WRONG_SIZE:"server-file-wrong-size",NO_DOWNLOAD_URL:"no-download-url",INVALID_ARGUMENT:"invalid-argument",INVALID_ARGUMENT_COUNT:"invalid-argument-count",APP_DELETED:"app-deleted",INVALID_ROOT_OPERATION:"invalid-root-operation",INVALID_FORMAT:"invalid-format",INTERNAL_ERROR:"internal-error"};function d(t){return"storage/"+t}function v(){return new f(p.UNKNOWN,"An unknown error occurred, please check the error payload for server response.")}function y(){return new f(p.CANCELED,"User canceled the upload/download.")}function g(){return new f(p.CANNOT_SLICE_BLOB,"Cannot slice blob for upload. Please retry the upload.")}function m(t,e,n){return new f(p.INVALID_ARGUMENT,"Invalid argument in `"+e+"` at index "+t+": "+n)}function _(){return new f(p.APP_DELETED,"The Firebase app was deleted.")}function b(t,e){return new f(p.INVALID_FORMAT,"String does not match format '"+t+"': "+e)}function w(t){throw new f(p.INTERNAL_ERROR,"Internal error: "+t)}var E={RAW:"raw",BASE64:"base64",BASE64URL:"base64url",DATA_URL:"data_url"};function C(t){switch(t){case E.RAW:case E.BASE64:case E.BASE64URL:case E.DATA_URL:return;default:throw"Expected one of the event types: ["+E.RAW+", "+E.BASE64+", "+E.BASE64URL+", "+E.DATA_URL+"]."}}var T=function(){return function(t,e){this.data=t,this.contentType=e||null}}();function S(t,e){switch(t){case E.RAW:return new T(I(e));case E.BASE64:case E.BASE64URL:return new T(N(t,e));case E.DATA_URL:return new T(function(t){var e=new A(t);return e.base64?N(E.BASE64,e.rest):function(t){var e;try{e=decodeURIComponent(t)}catch(t){throw b(E.DATA_URL,"Malformed data URL.")}return I(e)}(e.rest)}(e),function(t){return new A(t).contentType}(e))}throw v()}function I(t){for(var e=[],n=0;n<t.length;n++){var r=t.charCodeAt(n);if(r<=127)e.push(r);else if(r<=2047)e.push(192|r>>6,128|63&r);else if(55296==(64512&r))if(n<t.length-1&&56320==(64512&t.charCodeAt(n+1)))r=65536|(1023&r)<<10|1023&t.charCodeAt(++n),e.push(240|r>>18,128|r>>12&63,128|r>>6&63,128|63&r);else e.push(239,191,189);else 56320==(64512&r)?e.push(239,191,189):e.push(224|r>>12,128|r>>6&63,128|63&r)}return new Uint8Array(e)}function N(t,e){switch(t){case E.BASE64:var n=-1!==e.indexOf("-"),r=-1!==e.indexOf("_");if(n||r)throw b(t,"Invalid character '"+(n?"-":"_")+"' found: is it base64url encoded?");break;case E.BASE64URL:var i=-1!==e.indexOf("+"),o=-1!==e.indexOf("/");if(i||o)throw b(t,"Invalid character '"+(i?"+":"/")+"' found: is it base64 encoded?");e=e.replace(/-/g,"+").replace(/_/g,"/")}var a;try{a=atob(e)}catch(e){throw b(t,"Invalid character found")}for(var s=new Uint8Array(a.length),u=0;u<a.length;u++)s[u]=a.charCodeAt(u);return s}var A=function(){return function(t){this.base64=!1,this.contentType=null;var e=t.match(/^data:([^,]+)?,/);if(null===e)throw b(E.DATA_URL,"Must be formatted 'data:[<mediatype>][;base64],<data>");var n=e[1]||null;null!=n&&(this.base64=function(t,e){return t.length>=e.length&&t.substring(t.length-e.length)===e}(n,";base64"),this.contentType=this.base64?n.substring(0,n.length-";base64".length):n),this.rest=t.substring(t.indexOf(",")+1)}}();var R,O={STATE_CHANGED:"state_changed"},P={RUNNING:"running",PAUSING:"pausing",PAUSED:"paused",SUCCESS:"success",CANCELING:"canceling",CANCELED:"canceled",ERROR:"error"},k={RUNNING:"running",PAUSED:"paused",SUCCESS:"success",CANCELED:"canceled",ERROR:"error"};function D(t){switch(t){case P.RUNNING:case P.PAUSING:case P.CANCELING:return k.RUNNING;case P.PAUSED:return k.PAUSED;case P.SUCCESS:return k.SUCCESS;case P.CANCELED:return k.CANCELED;case P.ERROR:default:return k.ERROR}}function x(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function L(t,e){for(var n in t)x(t,n)&&e(n,t[n])}function M(t){if(null==t)return{};var e={};return L(t,function(t,n){e[t]=n}),e}function F(t){return new Promise(t)}function U(t){return Promise.resolve(t)}function j(t){return null!=t}function W(t){return void 0!==t}function q(t){return"function"==typeof t}function V(t){return"object"==typeof t}function B(t){return V(t)&&null!==t}function H(t){return"string"==typeof t||t instanceof String}function G(t){return K()&&t instanceof Blob}function K(){return"undefined"!=typeof Blob}!function(t){t[t.NO_ERROR=0]="NO_ERROR",t[t.NETWORK_ERROR=1]="NETWORK_ERROR",t[t.ABORT=2]="ABORT"}(R||(R={}));var Q=function(){function t(){var t=this;this.sent_=!1,this.xhr_=new XMLHttpRequest,this.errorCode_=R.NO_ERROR,this.sendPromise_=F(function(e,n){t.xhr_.addEventListener("abort",function(n){t.errorCode_=R.ABORT,e(t)}),t.xhr_.addEventListener("error",function(n){t.errorCode_=R.NETWORK_ERROR,e(t)}),t.xhr_.addEventListener("load",function(n){e(t)})})}return t.prototype.send=function(t,e,n,r){var i=this;if(this.sent_)throw w("cannot .send() more than once");(this.sent_=!0,this.xhr_.open(e,t,!0),j(r))&&L(r,function(t,e){i.xhr_.setRequestHeader(t,e.toString())});return j(n)?this.xhr_.send(n):this.xhr_.send(),this.sendPromise_},t.prototype.getErrorCode=function(){if(!this.sent_)throw w("cannot .getErrorCode() before sending");return this.errorCode_},t.prototype.getStatus=function(){if(!this.sent_)throw w("cannot .getStatus() before sending");try{return this.xhr_.status}catch(t){return-1}},t.prototype.getResponseText=function(){if(!this.sent_)throw w("cannot .getResponseText() before sending");return this.xhr_.responseText},t.prototype.abort=function(){this.xhr_.abort()},t.prototype.getResponseHeader=function(t){return this.xhr_.getResponseHeader(t)},t.prototype.addUploadProgressListener=function(t){j(this.xhr_.upload)&&this.xhr_.upload.addEventListener("progress",t)},t.prototype.removeUploadProgressListener=function(t){j(this.xhr_.upload)&&this.xhr_.upload.removeEventListener("progress",t)},t}(),z=function(){function t(){}return t.prototype.createXhrIo=function(){return new Q},t}();function X(t){var e;try{e=JSON.parse(t)}catch(t){return null}return function(t){return V(t)&&!Array.isArray(t)}(e)?e:null}var Y=function(){function t(t,e){this.bucket=t,this.path_=e}return Object.defineProperty(t.prototype,"path",{get:function(){return this.path_},enumerable:!0,configurable:!0}),t.prototype.fullServerUrl=function(){var t=encodeURIComponent;return"/b/"+t(this.bucket)+"/o/"+t(this.path)},t.prototype.bucketOnlyServerUrl=function(){return"/b/"+encodeURIComponent(this.bucket)+"/o"},t.makeFromBucketSpec=function(e){var n;try{n=t.makeFromUrl(e)}catch(n){return new t(e,"")}if(""===n.path)return n;throw function(t){return new f(p.INVALID_DEFAULT_BUCKET,"Invalid default bucket '"+t+"'.")}(e)},t.makeFromUrl=function(e){var n=null;for(var r=[{regex:new RegExp("^gs://([A-Za-z0-9.\\-]+)(/(.*))?$","i"),indices:{bucket:1,path:3},postModify:function(t){"/"===t.path.charAt(t.path.length-1)&&(t.path_=t.path_.slice(0,-1))}},{regex:new RegExp("^https?://firebasestorage\\.googleapis\\.com/v[A-Za-z0-9_]+/b/([A-Za-z0-9.\\-]+)/o(/([^?#]*).*)?$","i"),indices:{bucket:1,path:3},postModify:function(t){t.path_=decodeURIComponent(t.path)}}],i=0;i<r.length;i++){var o=r[i],a=o.regex.exec(e);if(a){var s=a[o.indices.bucket],u=a[o.indices.path];u||(u=""),n=new t(s,u),o.postModify(n);break}}if(null==n)throw function(t){return new f(p.INVALID_URL,"Invalid URL '"+t+"'.")}(e);return n},t}();function J(t){var e=t.lastIndexOf("/",t.length-2);return-1===e?t:t.slice(e+1)}function $(t){return o+s+t}function Z(t){return o+u+t}function tt(t){var e=encodeURIComponent,n="?";return L(t,function(t,r){var i=e(t)+"="+e(r);n=n+i+"&"}),n=n.slice(0,-1)}function et(t,e){return e}var nt=function(){return function(t,e,n,r){this.server=t,this.local=e||t,this.writable=!!n,this.xform=r||et}}(),rt=null;function it(){if(rt)return rt;var t=[];t.push(new nt("bucket")),t.push(new nt("generation")),t.push(new nt("metageneration")),t.push(new nt("name","fullPath",!0));var e=new nt("name");e.xform=function(t,e){return function(t){return!H(t)||t.length<2?t:J(t=t)}(e)},t.push(e);var n=new nt("size");return n.xform=function(t,e){return j(e)?+e:e},t.push(n),t.push(new nt("timeCreated")),t.push(new nt("updated")),t.push(new nt("md5Hash",null,!0)),t.push(new nt("cacheControl",null,!0)),t.push(new nt("contentDisposition",null,!0)),t.push(new nt("contentEncoding",null,!0)),t.push(new nt("contentLanguage",null,!0)),t.push(new nt("contentType",null,!0)),t.push(new nt("metadata","customMetadata",!0)),rt=t}function ot(t,e,n){for(var r={type:"file"},i=n.length,o=0;o<i;o++){var a=n[o];r[a.local]=a.xform(r,e[a.server])}return function(t,e){Object.defineProperty(t,"ref",{get:function(){var n=t.bucket,r=t.fullPath,i=new Y(n,r);return e.makeStorageReference(i)}})}(r,t),r}function at(t,e,n){var r=X(e);return null===r?null:ot(t,r,n)}function st(t,e){var n=X(e);if(null===n)return null;if(!H(n.downloadTokens))return null;var r=n.downloadTokens;if(0===r.length)return null;var i=encodeURIComponent;return r.split(",").map(function(e){var n=t.bucket,r=t.fullPath;return function(t){return a+s+t}("/b/"+i(n)+"/o/"+i(r))+tt({alt:"media",token:e})})[0]}function ut(t,e){for(var n={},r=e.length,i=0;i<r;i++){var o=e[i];o.writable&&(n[o.server]=t[o.local])}return JSON.stringify(n)}function ct(t){if(!(t&&V(t)))throw"Expected Metadata object.";for(var e in t){var n=t[e];if("customMetadata"===e){if(!V(n))throw"Expected object for 'customMetadata' mapping."}else if(B(n))throw"Mapping for '"+e+"' cannot be an object."}}function ht(t,e,n){for(var r=e.length,i=e.length,o=0;o<e.length;o++)if(e[o].optional){r=o;break}if(!(r<=n.length&&n.length<=i))throw function(t,e,n,r){var i,o;return t===e?(i=t,o=1===t?"argument":"arguments"):(i="between "+t+" and "+e,o="arguments"),new f(p.INVALID_ARGUMENT_COUNT,"Invalid argument count in `"+n+"`: Expected "+i+" "+o+", received "+r+".")}(r,i,t,n.length);for(o=0;o<n.length;o++)try{e[o].validator(n[o])}catch(e){throw e instanceof Error?m(o,t,e.message):m(o,t,e)}}var lt=function(){return function(t,e){var n=this;this.validator=function(e){n.optional&&!W(e)||t(e)},this.optional=!!e}}();function ft(t,e){function n(t){if(!H(t))throw"Expected string."}var r;return r=t?function(t,e){return function(n){t(n),e(n)}}(n,t):n,new lt(r,e)}function pt(t){return new lt(ct,t)}function dt(){return new lt(function(t){if(!(function(t){return"number"==typeof t||t instanceof Number}(t)&&t>=0))throw"Expected a number 0 or greater."})}function vt(t,e){return new lt(function(e){if(!(null===e||j(e)&&e instanceof Object))throw"Expected an Object.";void 0!==t&&null!==t&&t(e)},e)}function yt(t){return new lt(function(t){if(null!==t&&!q(t))throw"Expected a Function."},t)}function gt(){return"undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:void 0}var mt=function(){function t(t,e){var n=0,r="";G(t)?(this.data_=t,n=t.size,r=t.type):t instanceof ArrayBuffer?(e?this.data_=new Uint8Array(t):(this.data_=new Uint8Array(t.byteLength),this.data_.set(new Uint8Array(t))),n=this.data_.length):t instanceof Uint8Array&&(e?this.data_=t:(this.data_=new Uint8Array(t.length),this.data_.set(t)),n=t.length),this.size_=n,this.type_=r}return t.prototype.size=function(){return this.size_},t.prototype.type=function(){return this.type_},t.prototype.slice=function(e,n){if(G(this.data_)){var r=function(t,e,n){return t.webkitSlice?t.webkitSlice(e,n):t.mozSlice?t.mozSlice(e,n):t.slice?t.slice(e,n):null}(this.data_,e,n);return null===r?null:new t(r)}return new t(new Uint8Array(this.data_.buffer,e,n-e),!0)},t.getBlob=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];if(K()){var r=e.map(function(e){return e instanceof t?e.data_:e});return new t(function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=gt();if(void 0!==n){for(var r=new n,i=0;i<t.length;i++)r.append(t[i]);return r.getBlob()}if(K())return new Blob(t);throw Error("This browser doesn't seem to support creating Blobs")}.apply(null,r))}var i=e.map(function(t){return H(t)?S(E.RAW,t).data:t.data_}),o=0;i.forEach(function(t){o+=t.byteLength});var a=new Uint8Array(o),s=0;return i.forEach(function(t){for(var e=0;e<t.length;e++)a[s++]=t[e]}),new t(a,!0)},t.prototype.uploadData=function(){return this.data_},t}();function _t(t,e){return-1!==t.indexOf(e)}var bt=function(){return function(t,e,n,r){this.url=t,this.method=e,this.handler=n,this.timeout=r,this.urlParams={},this.headers={},this.body=null,this.errorHandler=null,this.progressCallback=null,this.successCodes=[200],this.additionalRetryCodes=[]}}();function wt(t){if(!t)throw v()}function Et(t,e){return function(n,r){var i=at(t,r,e);return wt(null!==i),i}}function Ct(t){return function(e,n){var r;return(r=401===e.getStatus()?new f(p.UNAUTHENTICATED,"User is not authenticated, please authenticate using Firebase Authentication and try again."):402===e.getStatus()?function(t){return new f(p.QUOTA_EXCEEDED,"Quota for bucket '"+t+"' exceeded, please view quota on https://firebase.google.com/pricing/.")}(t.bucket):403===e.getStatus()?function(t){return new f(p.UNAUTHORIZED,"User does not have permission to access '"+t+"'.")}(t.path):n).setServerResponseProp(n.serverResponseProp()),r}}function Tt(t){var e=Ct(t);return function(n,r){var i=e(n,r);return 404===n.getStatus()&&(i=function(t){return new f(p.OBJECT_NOT_FOUND,"Object '"+t+"' does not exist.")}(t.path)),i.setServerResponseProp(r.serverResponseProp()),i}}function St(t,e,n){var r=$(e.fullServerUrl()),i=t.maxOperationRetryTime(),o=new bt(r,"GET",Et(t,n),i);return o.errorHandler=Tt(e),o}function It(t,e,n){var r=$(e.fullServerUrl()),i=t.maxOperationRetryTime(),o=new bt(r,"GET",function(t,e){return function(n,r){var i=at(t,r,e);return wt(null!==i),st(i,r)}}(t,n),i);return o.errorHandler=Tt(e),o}function Nt(t,e,n){var r=M(n);return r.fullPath=t.path,r.size=e.size(),r.contentType||(r.contentType=function(t,e){return t&&t.contentType||e&&e.type()||"application/octet-stream"}(null,e)),r}var At=function(){return function(t,e,n,r){this.current=t,this.total=e,this.finalized=!!n,this.metadata=r||null}}();function Rt(t,e){var n;try{n=t.getResponseHeader("X-Goog-Upload-Status")}catch(t){wt(!1)}return wt(_t(e||["active"],n)),n}function Ot(t,e,n,r,i,o,a,s){var u=new At(0,0);if(a?(u.current=a.current,u.total=a.total):(u.current=0,u.total=r.size()),r.size()!==u.total)throw new f(p.SERVER_FILE_WRONG_SIZE,"Server recorded incorrect upload file size, please retry the upload.");var c=u.total-u.current,h=c;i>0&&(h=Math.min(h,i));var l=u.current,d=l+h,v={"X-Goog-Upload-Command":h===c?"upload, finalize":"upload","X-Goog-Upload-Offset":u.current},y=r.slice(l,d);if(null===y)throw g();var m=e.maxUploadRetryTime(),_=new bt(n,"POST",function(t,n){var i,a=Rt(t,["active","final"]),s=u.current+h,c=r.size();return i="final"===a?Et(e,o)(t,n):null,new At(s,c,"final"===a,i)},m);return _.headers=v,_.body=y.uploadData(),_.progressCallback=s||null,_.errorHandler=Ct(t),_}var Pt=function(){return function(t,e,n){if(q(t)||j(e)||j(n))this.next=t,this.error=e||null,this.complete=n||null;else{var r=t;this.next=r.next||null,this.error=r.error||null,this.complete=r.complete||null}}}(),kt=function(){return function(t,e,n,r,i,o){this.bytesTransferred=t,this.totalBytes=e,this.state=n,this.metadata=r,this.task=i,this.ref=o}}();function Dt(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];U(!0).then(function(){t.apply(null,e)})}}var xt=function(){function t(t,e,n,r,i,o){void 0===o&&(o=null);var a=this;this.transferred_=0,this.needToFetchStatus_=!1,this.needToFetchMetadata_=!1,this.observers_=[],this.error_=null,this.uploadUrl_=null,this.request_=null,this.chunkMultiplier_=1,this.resolve_=null,this.reject_=null,this.ref_=t,this.authWrapper_=e,this.location_=n,this.blob_=i,this.metadata_=o,this.mappings_=r,this.resumable_=this.shouldDoResumable_(this.blob_),this.state_=P.RUNNING,this.errorHandler_=function(t){a.request_=null,a.chunkMultiplier_=1,t.codeEquals(p.CANCELED)?(a.needToFetchStatus_=!0,a.completeTransitions_()):(a.error_=t,a.transition_(P.ERROR))},this.metadataErrorHandler_=function(t){a.request_=null,t.codeEquals(p.CANCELED)?a.completeTransitions_():(a.error_=t,a.transition_(P.ERROR))},this.promise_=F(function(t,e){a.resolve_=t,a.reject_=e,a.start_()}),this.promise_.then(null,function(){})}return t.prototype.makeProgressCallback_=function(){var t=this,e=this.transferred_;return function(n,r){t.updateProgress_(e+n)}},t.prototype.shouldDoResumable_=function(t){return t.size()>262144},t.prototype.start_=function(){this.state_===P.RUNNING&&null===this.request_&&(this.resumable_?null===this.uploadUrl_?this.createResumable_():this.needToFetchStatus_?this.fetchStatus_():this.needToFetchMetadata_?this.fetchMetadata_():this.continueUpload_():this.oneShotUpload_())},t.prototype.resolveToken_=function(t){var e=this;this.authWrapper_.getAuthToken().then(function(n){switch(e.state_){case P.RUNNING:t(n);break;case P.CANCELING:e.transition_(P.CANCELED);break;case P.PAUSING:e.transition_(P.PAUSED)}})},t.prototype.createResumable_=function(){var t=this;this.resolveToken_(function(e){var n=function(t,e,n,r,i){var o=e.bucketOnlyServerUrl(),a=Nt(e,r,i),s={name:a.fullPath},u=Z(o),c={"X-Goog-Upload-Protocol":"resumable","X-Goog-Upload-Command":"start","X-Goog-Upload-Header-Content-Length":r.size(),"X-Goog-Upload-Header-Content-Type":a.contentType,"Content-Type":"application/json; charset=utf-8"},h=ut(a,n),l=t.maxUploadRetryTime(),f=new bt(u,"POST",function(t,e){var n;Rt(t);try{n=t.getResponseHeader("X-Goog-Upload-URL")}catch(t){wt(!1)}return wt(H(n)),n},l);return f.urlParams=s,f.headers=c,f.body=h,f.errorHandler=Ct(e),f}(t.authWrapper_,t.location_,t.mappings_,t.blob_,t.metadata_),r=t.authWrapper_.makeRequest(n,e);t.request_=r,r.getPromise().then(function(e){t.request_=null,t.uploadUrl_=e,t.needToFetchStatus_=!1,t.completeTransitions_()},t.errorHandler_)})},t.prototype.fetchStatus_=function(){var t=this,e=this.uploadUrl_;this.resolveToken_(function(n){var r=function(t,e,n,r){var i=t.maxUploadRetryTime(),o=new bt(n,"POST",function(t,e){var n,i=Rt(t,["active","final"]);try{n=t.getResponseHeader("X-Goog-Upload-Size-Received")}catch(t){wt(!1)}var o=parseInt(n,10);return wt(!isNaN(o)),new At(o,r.size(),"final"===i)},i);return o.headers={"X-Goog-Upload-Command":"query"},o.errorHandler=Ct(e),o}(t.authWrapper_,t.location_,e,t.blob_),i=t.authWrapper_.makeRequest(r,n);t.request_=i,i.getPromise().then(function(e){e=e,t.request_=null,t.updateProgress_(e.current),t.needToFetchStatus_=!1,e.finalized&&(t.needToFetchMetadata_=!0),t.completeTransitions_()},t.errorHandler_)})},t.prototype.continueUpload_=function(){var t=this,e=262144*this.chunkMultiplier_,n=new At(this.transferred_,this.blob_.size()),r=this.uploadUrl_;this.resolveToken_(function(i){var o;try{o=Ot(t.location_,t.authWrapper_,r,t.blob_,e,t.mappings_,n,t.makeProgressCallback_())}catch(e){return t.error_=e,void t.transition_(P.ERROR)}var a=t.authWrapper_.makeRequest(o,i);t.request_=a,a.getPromise().then(function(e){t.increaseMultiplier_(),t.request_=null,t.updateProgress_(e.current),e.finalized?(t.metadata_=e.metadata,t.transition_(P.SUCCESS)):t.completeTransitions_()},t.errorHandler_)})},t.prototype.increaseMultiplier_=function(){262144*this.chunkMultiplier_<33554432&&(this.chunkMultiplier_*=2)},t.prototype.fetchMetadata_=function(){var t=this;this.resolveToken_(function(e){var n=St(t.authWrapper_,t.location_,t.mappings_),r=t.authWrapper_.makeRequest(n,e);t.request_=r,r.getPromise().then(function(e){t.request_=null,t.metadata_=e,t.transition_(P.SUCCESS)},t.metadataErrorHandler_)})},t.prototype.oneShotUpload_=function(){var t=this;this.resolveToken_(function(e){var n=function(t,e,n,r,i){var o=e.bucketOnlyServerUrl(),a={"X-Goog-Upload-Protocol":"multipart"},s=function(){for(var t="",e=0;e<2;e++)t+=Math.random().toString().slice(2);return t}();a["Content-Type"]="multipart/related; boundary="+s;var u=Nt(e,r,i),c="--"+s+"\r\nContent-Type: application/json; charset=utf-8\r\n\r\n"+ut(u,n)+"\r\n--"+s+"\r\nContent-Type: "+u.contentType+"\r\n\r\n",h="\r\n--"+s+"--",l=mt.getBlob(c,r,h);if(null===l)throw g();var f={name:u.fullPath},p=Z(o),d=t.maxUploadRetryTime(),v=new bt(p,"POST",Et(t,n),d);return v.urlParams=f,v.headers=a,v.body=l.uploadData(),v.errorHandler=Ct(e),v}(t.authWrapper_,t.location_,t.mappings_,t.blob_,t.metadata_),r=t.authWrapper_.makeRequest(n,e);t.request_=r,r.getPromise().then(function(e){t.request_=null,t.metadata_=e,t.updateProgress_(t.blob_.size()),t.transition_(P.SUCCESS)},t.errorHandler_)})},t.prototype.updateProgress_=function(t){var e=this.transferred_;this.transferred_=t,this.transferred_!==e&&this.notifyObservers_()},t.prototype.transition_=function(t){if(this.state_!==t)switch(t){case P.CANCELING:case P.PAUSING:this.state_=t,null!==this.request_&&this.request_.cancel();break;case P.RUNNING:var e=this.state_===P.PAUSED;this.state_=t,e&&(this.notifyObservers_(),this.start_());break;case P.PAUSED:this.state_=t,this.notifyObservers_();break;case P.CANCELED:this.error_=y(),this.state_=t,this.notifyObservers_();break;case P.ERROR:case P.SUCCESS:this.state_=t,this.notifyObservers_()}},t.prototype.completeTransitions_=function(){switch(this.state_){case P.PAUSING:this.transition_(P.PAUSED);break;case P.CANCELING:this.transition_(P.CANCELED);break;case P.RUNNING:this.start_()}},Object.defineProperty(t.prototype,"snapshot",{get:function(){var t=D(this.state_);return new kt(this.transferred_,this.blob_.size(),t,this.metadata_,this,this.ref_)},enumerable:!0,configurable:!0}),t.prototype.on=function(t,e,n,r){void 0===e&&(e=void 0),void 0===n&&(n=void 0),void 0===r&&(r=void 0);var i="Expected a function or an Object with one of `next`, `error`, `complete` properties.",o=yt(!0).validator,a=vt(null,!0).validator;function s(t){try{return void o(t)}catch(t){}try{if(a(t),!(W(t.next)||W(t.error)||W(t.complete)))throw"";return}catch(t){throw i}}ht("on",[ft(function(e){if(t!==O.STATE_CHANGED)throw"Expected one of the event types: ["+O.STATE_CHANGED+"]."}),vt(s,!0),yt(!0),yt(!0)],arguments);var u=this;function c(t){return function(e,n,i){null!==t&&ht("on",t,arguments);var o=new Pt(e,n,r);return u.addObserver_(o),function(){u.removeObserver_(o)}}}var h=[vt(function(t){if(null===t)throw i;s(t)}),yt(!0),yt(!0)];return!(W(e)||W(n)||W(r))?c(h):c(null)(e,n,r)},t.prototype.then=function(t,e){return this.promise_.then(t,e)},t.prototype.catch=function(t){return this.then(null,t)},t.prototype.addObserver_=function(t){this.observers_.push(t),this.notifyObserver_(t)},t.prototype.removeObserver_=function(t){!function(t,e){var n=t.indexOf(e);-1!==n&&t.splice(n,1)}(this.observers_,t)},t.prototype.notifyObservers_=function(){var t=this;this.finishPromise_(),function(t){return Array.prototype.slice.call(t)}(this.observers_).forEach(function(e){t.notifyObserver_(e)})},t.prototype.finishPromise_=function(){if(null!==this.resolve_){var t=!0;switch(D(this.state_)){case k.SUCCESS:Dt(this.resolve_.bind(null,this.snapshot))();break;case k.CANCELED:case k.ERROR:Dt(this.reject_.bind(null,this.error_))();break;default:t=!1}t&&(this.resolve_=null,this.reject_=null)}},t.prototype.notifyObserver_=function(t){switch(D(this.state_)){case k.RUNNING:case k.PAUSED:null!==t.next&&Dt(t.next.bind(t,this.snapshot))();break;case k.SUCCESS:null!==t.complete&&Dt(t.complete.bind(t))();break;case k.CANCELED:case k.ERROR:null!==t.error&&Dt(t.error.bind(t,this.error_))();break;default:null!==t.error&&Dt(t.error.bind(t,this.error_))()}},t.prototype.resume=function(){ht("resume",[],arguments);var t=this.state_===P.PAUSED||this.state_===P.PAUSING;return t&&this.transition_(P.RUNNING),t},t.prototype.pause=function(){ht("pause",[],arguments);var t=this.state_===P.RUNNING;return t&&this.transition_(P.PAUSING),t},t.prototype.cancel=function(){ht("cancel",[],arguments);var t=this.state_===P.RUNNING||this.state_===P.PAUSING;return t&&this.transition_(P.CANCELING),t},t}(),Lt=function(){function t(t,e){this.authWrapper=t,this.location=e instanceof Y?e:Y.makeFromUrl(e)}return t.prototype.toString=function(){return ht("toString",[],arguments),"gs://"+this.location.bucket+"/"+this.location.path},t.prototype.newRef=function(e,n){return new t(e,n)},t.prototype.mappings=function(){return it()},t.prototype.child=function(t){ht("child",[ft()],arguments);var e=function(t,e){var n=e.split("/").filter(function(t){return t.length>0}).join("/");return 0===t.length?n:t+"/"+n}(this.location.path,t),n=new Y(this.location.bucket,e);return this.newRef(this.authWrapper,n)},Object.defineProperty(t.prototype,"parent",{get:function(){var t=function(t){if(0==t.length)return null;var e=t.lastIndexOf("/");return-1===e?"":t.slice(0,e)}(this.location.path);if(null===t)return null;var e=new Y(this.location.bucket,t);return this.newRef(this.authWrapper,e)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"root",{get:function(){var t=new Y(this.location.bucket,"");return this.newRef(this.authWrapper,t)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"bucket",{get:function(){return this.location.bucket},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"fullPath",{get:function(){return this.location.path},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"name",{get:function(){return J(this.location.path)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"storage",{get:function(){return this.authWrapper.service()},enumerable:!0,configurable:!0}),t.prototype.put=function(t,e){return void 0===e&&(e=null),ht("put",[new lt(function(t){if(!(t instanceof Uint8Array||t instanceof ArrayBuffer||K()&&t instanceof Blob))throw"Expected Blob or File."}),pt(!0)],arguments),this.throwIfRoot_("put"),new xt(this,this.authWrapper,this.location,this.mappings(),new mt(t),e)},t.prototype.putString=function(t,e,n){void 0===e&&(e=E.RAW),ht("putString",[ft(),ft(C,!0),pt(!0)],arguments),this.throwIfRoot_("putString");var r=S(e,t),i=M(n);return!j(i.contentType)&&j(r.contentType)&&(i.contentType=r.contentType),new xt(this,this.authWrapper,this.location,this.mappings(),new mt(r.data,!0),i)},t.prototype.delete=function(){ht("delete",[],arguments),this.throwIfRoot_("delete");var t=this;return this.authWrapper.getAuthToken().then(function(e){var n=function(t,e){var n=$(e.fullServerUrl()),r=t.maxOperationRetryTime(),i=new bt(n,"DELETE",function(t,e){},r);return i.successCodes=[200,204],i.errorHandler=Tt(e),i}(t.authWrapper,t.location);return t.authWrapper.makeRequest(n,e).getPromise()})},t.prototype.getMetadata=function(){ht("getMetadata",[],arguments),this.throwIfRoot_("getMetadata");var t=this;return this.authWrapper.getAuthToken().then(function(e){var n=St(t.authWrapper,t.location,t.mappings());return t.authWrapper.makeRequest(n,e).getPromise()})},t.prototype.updateMetadata=function(t){ht("updateMetadata",[pt()],arguments),this.throwIfRoot_("updateMetadata");var e=this;return this.authWrapper.getAuthToken().then(function(n){var r=function(t,e,n,r){var i=$(e.fullServerUrl()),o=ut(n,r),a=t.maxOperationRetryTime(),s=new bt(i,"PATCH",Et(t,r),a);return s.headers={"Content-Type":"application/json; charset=utf-8"},s.body=o,s.errorHandler=Tt(e),s}(e.authWrapper,e.location,t,e.mappings());return e.authWrapper.makeRequest(r,n).getPromise()})},t.prototype.getDownloadURL=function(){ht("getDownloadURL",[],arguments),this.throwIfRoot_("getDownloadURL");var t=this;return this.authWrapper.getAuthToken().then(function(e){var n=It(t.authWrapper,t.location,t.mappings());return t.authWrapper.makeRequest(n,e).getPromise().then(function(t){if(null===t)throw new f(p.NO_DOWNLOAD_URL,"The given file does not have any download URLs.");return t})})},t.prototype.throwIfRoot_=function(t){if(""===this.location.path)throw function(t){return new f(p.INVALID_ROOT_OPERATION,"The operation '"+t+"' cannot be performed on a root reference, create a non-root reference using child, such as .child('file.png').")}(t)},t}(),Mt=function(){function t(t){this.promise_=function(t){return Promise.reject(t)}(t)}return t.prototype.getPromise=function(){return this.promise_},t.prototype.cancel=function(t){void 0===t&&(t=!1)},t}(),Ft=function(){function t(){this.map_={},this.id_=l}return t.prototype.addRequest=function(t){var e=this.id_;this.id_++,this.map_[e]=t;var n=this;function r(){delete n.map_[e]}t.getPromise().then(r,r)},t.prototype.clear=function(){L(this.map_,function(t,e){e&&e.cancel(!0)}),this.map_={}},t}(),Ut=function(){function t(e,n,r,i,o){if(this.bucket_=null,this.deleted_=!1,this.app_=e,null!==this.app_){var a=this.app_.options;j(a)&&(this.bucket_=t.extractBucket_(a))}this.storageRefMaker_=n,this.requestMaker_=r,this.pool_=o,this.service_=i,this.maxOperationRetryTime_=c,this.maxUploadRetryTime_=h,this.requestMap_=new Ft}return t.extractBucket_=function(t){var e=t.storageBucket||null;return null==e?null:Y.makeFromBucketSpec(e).bucket},t.prototype.getAuthToken=function(){return null!==this.app_&&j(this.app_.INTERNAL)&&j(this.app_.INTERNAL.getToken)?this.app_.INTERNAL.getToken().then(function(t){return null!==t?t.accessToken:null},function(t){return null}):U(null)},t.prototype.bucket=function(){if(this.deleted_)throw _();return this.bucket_},t.prototype.service=function(){return this.service_},t.prototype.makeStorageReference=function(t){return this.storageRefMaker_(this,t)},t.prototype.makeRequest=function(t,e){if(this.deleted_)return new Mt(_());var n=this.requestMaker_(t,e,this.pool_);return this.requestMap_.addRequest(n),n},t.prototype.deleteApp=function(){this.deleted_=!0,this.app_=null,this.requestMap_.clear()},t.prototype.maxUploadRetryTime=function(){return this.maxUploadRetryTime_},t.prototype.setMaxUploadRetryTime=function(t){this.maxUploadRetryTime_=t},t.prototype.maxOperationRetryTime=function(){return this.maxOperationRetryTime_},t.prototype.setMaxOperationRetryTime=function(t){this.maxOperationRetryTime_=t},t}();var jt=function(){function t(t,e,n,r,i,o,a,s,u,c,h){this.pendingXhr_=null,this.backoffId_=null,this.resolve_=null,this.reject_=null,this.canceled_=!1,this.appDelete_=!1,this.url_=t,this.method_=e,this.headers_=n,this.body_=r,this.successCodes_=i.slice(),this.additionalRetryCodes_=o.slice(),this.callback_=a,this.errorCallback_=s,this.progressCallback_=c,this.timeout_=u,this.pool_=h;var l=this;this.promise_=F(function(t,e){l.resolve_=t,l.reject_=e,l.start_()})}return t.prototype.start_=function(){var t=this;function e(e,n){var r,i=t.resolve_,o=t.reject_,a=n.xhr;if(n.wasSuccessCode)try{var s=t.callback_(a,a.getResponseText());W(s)?i(s):i()}catch(t){o(t)}else null!==a?((r=v()).setServerResponseProp(a.getResponseText()),t.errorCallback_?o(t.errorCallback_(a,r)):o(r)):n.canceled?o(r=t.appDelete_?_():y()):o(r=new f(p.RETRY_LIMIT_EXCEEDED,"Max retry time for operation exceeded, please try again."))}this.canceled_?e(0,new Wt(!1,null,!0)):this.backoffId_=function(t,e,n){var r=1,i=null,o=!1,a=0;function s(){return 2===a}var u=!1;function c(){u||(u=!0,e.apply(null,arguments))}function h(e){i=setTimeout(function(){i=null,t(l,s())},e)}function l(t){for(var e,n=[],i=1;i<arguments.length;i++)n[i-1]=arguments[i];u||(t?c.apply(null,arguments):s()||o?c.apply(null,arguments):(r<64&&(r*=2),1===a?(a=2,e=0):e=1e3*(r+Math.random()),h(e)))}var f=!1;function p(t){f||(f=!0,u||(null!==i?(t||(a=2),clearTimeout(i),h(0)):t||(a=1)))}return h(0),setTimeout(function(){o=!0,p(!0)},n),p}(function(e,n){if(n)e(!1,new Wt(!1,null,!0));else{var r=t.pool_.createXhrIo();t.pendingXhr_=r,null!==t.progressCallback_&&r.addUploadProgressListener(i),r.send(t.url_,t.method_,t.body_,t.headers_).then(function(n){null!==t.progressCallback_&&n.removeUploadProgressListener(i),t.pendingXhr_=null;var r=(n=n).getErrorCode()===R.NO_ERROR,o=n.getStatus();if(r&&!t.isRetryStatusCode_(o)){var a=_t(t.successCodes_,o);e(!0,new Wt(a,n))}else{var s=n.getErrorCode()===R.ABORT;e(!1,new Wt(!1,null,s))}})}function i(e){var n=e.loaded,r=e.lengthComputable?e.total:-1;null!==t.progressCallback_&&t.progressCallback_(n,r)}},e,this.timeout_)},t.prototype.getPromise=function(){return this.promise_},t.prototype.cancel=function(t){this.canceled_=!0,this.appDelete_=t||!1,null!==this.backoffId_&&function(t){t(!1)}(this.backoffId_),null!==this.pendingXhr_&&this.pendingXhr_.abort()},t.prototype.isRetryStatusCode_=function(t){var e=t>=500&&t<600,n=_t([408,429],t),r=_t(this.additionalRetryCodes_,t);return e||n||r},t}(),Wt=function(){return function(t,e,n){this.wasSuccessCode=t,this.xhr=e,this.canceled=!!n}}();function qt(t,e,n){var r=tt(t.urlParams),o=t.url+r,a=M(t.headers);return function(t,e){null!==e&&e.length>0&&(t.Authorization="Firebase "+e)}(a,e),function(t){var e=void 0!==i.a?i.a.SDK_VERSION:"AppManager";t["X-Firebase-Storage-Version"]="webjs/"+e}(a),new jt(o,t.method,a,t.body,t.successCodes,t.additionalRetryCodes,t.handler,t.errorHandler,t.timeout,t.progressCallback,n)}var Vt=function(){function t(t,e,n){if(this.bucket_=null,this.authWrapper_=new Ut(t,function(t,e){return new Lt(t,e)},qt,this,e),this.app_=t,null!=n)this.bucket_=Y.makeFromBucketSpec(n);else{var r=this.authWrapper_.bucket();null!=r&&(this.bucket_=new Y(r,""))}this.internals_=new Bt(this)}return t.prototype.ref=function(t){if(ht("ref",[ft(function(t){if(/^[A-Za-z]+:\/\//.test(t))throw"Expected child path but got a URL, use refFromURL instead."},!0)],arguments),null==this.bucket_)throw new Error("No Storage Bucket defined in Firebase Options.");var e=new Lt(this.authWrapper_,this.bucket_);return null!=t?e.child(t):e},t.prototype.refFromURL=function(t){return ht("refFromURL",[ft(function(t){if(!/^[A-Za-z]+:\/\//.test(t))throw"Expected full URL but got a child path, use ref instead.";try{Y.makeFromUrl(t)}catch(t){throw"Expected valid full URL but got an invalid one."}},!1)],arguments),new Lt(this.authWrapper_,t)},Object.defineProperty(t.prototype,"maxUploadRetryTime",{get:function(){return this.authWrapper_.maxUploadRetryTime()},enumerable:!0,configurable:!0}),t.prototype.setMaxUploadRetryTime=function(t){ht("setMaxUploadRetryTime",[dt()],arguments),this.authWrapper_.setMaxUploadRetryTime(t)},Object.defineProperty(t.prototype,"maxOperationRetryTime",{get:function(){return this.authWrapper_.maxOperationRetryTime()},enumerable:!0,configurable:!0}),t.prototype.setMaxOperationRetryTime=function(t){ht("setMaxOperationRetryTime",[dt()],arguments),this.authWrapper_.setMaxOperationRetryTime(t)},Object.defineProperty(t.prototype,"app",{get:function(){return this.app_},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"INTERNAL",{get:function(){return this.internals_},enumerable:!0,configurable:!0}),t}(),Bt=function(){function t(t){this.service_=t}return t.prototype.delete=function(){return this.service_.authWrapper_.deleteApp(),U(void 0)},t}(),Ht="storage";function Gt(t,e,n){return new Vt(t,new z,n)}!function(t){var e={TaskState:k,TaskEvent:O,StringFormat:E,Storage:Vt,Reference:Lt};t.INTERNAL.registerService(Ht,Gt,e,void 0,!0)}(i.a)},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";n(17);var r=function(t){return t&&"object"==typeof t&&"default"in t?t.default:t}(n(0));t.exports=r},function(t,e,n){"use strict";n.r(e);n(19)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Gallery=void 0;var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();n(1),n(4);var i=function(t){return t&&t.__esModule?t:{default:t}}(n(3));e.Gallery=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return r(t,[{key:"addImage",value:function(){var t=this;i.default.database().ref().once("value",function(e){var n=Object.values(e.val().Images);window.localStorage.setItem("data",JSON.stringify(n)),t.render()})}},{key:"render",value:function(){if(window.localStorage.getItem("data")){var t=JSON.parse(window.localStorage.getItem("data")).map(function(t){return'\n                <img class="app__gallery__img" src='+t.url+">\n                  "});document.getElementById("gallery").innerHTML=t.reduce(function(t,e){return t+e},"")}}}]),t}()},function(t,e,n){"use strict";n.r(e);n(11)},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var u,c=[],h=!1,l=-1;function f(){h&&u&&(h=!1,u.length?c=u.concat(c):l=-1,c.length&&p())}function p(){if(!h){var t=s(f);h=!0;for(var e=c.length;e;){for(u=c,c=[];++l<e;)u&&u[l].run();l=-1,e=c.length}u=null,h=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function v(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new d(t,e)),1!==c.length||h||s(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=v,i.addListener=v,i.once=v,i.off=v,i.removeListener=v,i.removeAllListeners=v,i.emit=v,i.prependListener=v,i.prependOnceListener=v,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){"use strict";n.r(e),n.d(e,"__extends",function(){return i}),n.d(e,"__assign",function(){return o}),n.d(e,"__rest",function(){return a}),n.d(e,"__decorate",function(){return s}),n.d(e,"__param",function(){return u}),n.d(e,"__metadata",function(){return c}),n.d(e,"__awaiter",function(){return h}),n.d(e,"__generator",function(){return l}),n.d(e,"__exportStar",function(){return f}),n.d(e,"__values",function(){return p}),n.d(e,"__read",function(){return d}),n.d(e,"__spread",function(){return v}),n.d(e,"__await",function(){return y}),n.d(e,"__asyncGenerator",function(){return g}),n.d(e,"__asyncDelegator",function(){return m}),n.d(e,"__asyncValues",function(){return _}),n.d(e,"__makeTemplateObject",function(){return b}),n.d(e,"__importStar",function(){return w}),n.d(e,"__importDefault",function(){return E});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t};function a(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&(n[r[i]]=t[r[i]])}return n}function s(t,e,n,r){var i,o=arguments.length,a=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(o<3?i(a):o>3?i(e,n,a):i(e,n))||a);return o>3&&a&&Object.defineProperty(e,n,a),a}function u(t,e){return function(n,r){e(n,r,t)}}function c(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function h(t,e,n,r){return new(n||(n=Promise))(function(i,o){function a(t){try{u(r.next(t))}catch(t){o(t)}}function s(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(a,s)}u((r=r.apply(t,e||[])).next())})}function l(t,e){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=r[2&o[0]?"return":o[0]?"throw":"next"])&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[0,i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=(i=a.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function f(t,e){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}function p(t){var e="function"==typeof Symbol&&t[Symbol.iterator],n=0;return e?e.call(t):{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}}}function d(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}function v(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(d(arguments[e]));return t}function y(t){return this instanceof y?(this.v=t,this):new y(t)}function g(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),o=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(t){i[t]&&(r[t]=function(e){return new Promise(function(n,r){o.push([t,e,n,r])>1||s(t,e)})})}function s(t,e){try{!function(t){t.value instanceof y?Promise.resolve(t.value.v).then(u,c):h(o[0][2],t)}(i[t](e))}catch(t){h(o[0][3],t)}}function u(t){s("next",t)}function c(t){s("throw",t)}function h(t,e){t(e),o.shift(),o.length&&s(o[0][0],o[0][1])}}function m(t){var e,n;return e={},r("next"),r("throw",function(t){throw t}),r("return"),e[Symbol.iterator]=function(){return this},e;function r(r,i){t[r]&&(e[r]=function(e){return(n=!n)?{value:y(t[r](e)),done:"return"===r}:i?i(e):e})}}function _(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e=t[Symbol.asyncIterator];return e?e.call(t):p(t)}function b(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}function w(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}function E(t){return t&&t.__esModule?t:{default:t}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(8),i={NODE_CLIENT:!1,NODE_ADMIN:!1,SDK_VERSION:"${JSCORE_VERSION}"},o=function(t,e){if(!t)throw a(e)},a=function(t){return new Error("Firebase Database ("+i.SDK_VERSION+") INTERNAL ASSERT FAILED: "+t)},s=function(t){for(var e=[],n=0,r=0;r<t.length;r++){var i=t.charCodeAt(r);i<128?e[n++]=i:i<2048?(e[n++]=i>>6|192,e[n++]=63&i|128):55296==(64512&i)&&r+1<t.length&&56320==(64512&t.charCodeAt(r+1))?(i=65536+((1023&i)<<10)+(1023&t.charCodeAt(++r)),e[n++]=i>>18|240,e[n++]=i>>12&63|128,e[n++]=i>>6&63|128,e[n++]=63&i|128):(e[n++]=i>>12|224,e[n++]=i>>6&63|128,e[n++]=63&i|128)}return e},u={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray:function(t,e){if(!Array.isArray(t))throw Error("encodeByteArray takes an array as a parameter");this.init_();for(var n=e?this.byteToCharMapWebSafe_:this.byteToCharMap_,r=[],i=0;i<t.length;i+=3){var o=t[i],a=i+1<t.length,s=a?t[i+1]:0,u=i+2<t.length,c=u?t[i+2]:0,h=o>>2,l=(3&o)<<4|s>>4,f=(15&s)<<2|c>>6,p=63&c;u||(p=64,a||(f=64)),r.push(n[h],n[l],n[f],n[p])}return r.join("")},encodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?btoa(t):this.encodeByteArray(s(t),e)},decodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?atob(t):function(t){for(var e=[],n=0,r=0;n<t.length;){var i=t[n++];if(i<128)e[r++]=String.fromCharCode(i);else if(i>191&&i<224){var o=t[n++];e[r++]=String.fromCharCode((31&i)<<6|63&o)}else if(i>239&&i<365){var a=((7&i)<<18|(63&(o=t[n++]))<<12|(63&(s=t[n++]))<<6|63&t[n++])-65536;e[r++]=String.fromCharCode(55296+(a>>10)),e[r++]=String.fromCharCode(56320+(1023&a))}else{o=t[n++];var s=t[n++];e[r++]=String.fromCharCode((15&i)<<12|(63&o)<<6|63&s)}}return e.join("")}(this.decodeStringToByteArray(t,e))},decodeStringToByteArray:function(t,e){this.init_();for(var n=e?this.charToByteMapWebSafe_:this.charToByteMap_,r=[],i=0;i<t.length;){var o=n[t.charAt(i++)],a=i<t.length?n[t.charAt(i)]:0,s=++i<t.length?n[t.charAt(i)]:64,u=++i<t.length?n[t.charAt(i)]:64;if(++i,null==o||null==a||null==s||null==u)throw Error();var c=o<<2|a>>4;if(r.push(c),64!=s){var h=a<<4&240|s>>2;if(r.push(h),64!=u){var l=s<<6&192|u;r.push(l)}}}return r},init_:function(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(var t=0;t<this.ENCODED_VALS.length;t++)this.byteToCharMap_[t]=this.ENCODED_VALS.charAt(t),this.charToByteMap_[this.byteToCharMap_[t]]=t,this.byteToCharMapWebSafe_[t]=this.ENCODED_VALS_WEBSAFE.charAt(t),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]]=t,t>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)]=t,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)]=t)}}},c=function(t){try{return u.decodeString(t,!0)}catch(t){console.error("base64Decode failed: ",t)}return null};function h(t,e){if(!(e instanceof Object))return e;switch(e.constructor){case Date:return new Date(e.getTime());case Object:void 0===t&&(t={});break;case Array:t=[];break;default:return e}for(var n in e)e.hasOwnProperty(n)&&(t[n]=h(t[n],e[n]));return t}var l=function(){function t(){var t=this;this.promise=new Promise(function(e,n){t.resolve=e,t.reject=n})}return t.prototype.wrapCallback=function(t){var e=this;return function(n,r){n?e.reject(n):e.resolve(r),"function"==typeof t&&(e.promise.catch(function(){}),1===t.length?t(n):t(n,r))}},t}(),f=function(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""},p="FirebaseError",d=Error.captureStackTrace;var v=function(){return function(t,e){if(this.code=t,this.message=e,d)d(this,y.prototype.create);else try{throw Error.apply(this,arguments)}catch(t){this.name=p,Object.defineProperty(this,"stack",{get:function(){return t.stack}})}}}();v.prototype=Object.create(Error.prototype),v.prototype.constructor=v,v.prototype.name=p;var y=function(){function t(t,e,n){this.service=t,this.serviceName=e,this.errors=n,this.pattern=/\{\$([^}]+)}/g}return t.prototype.create=function(t,e){void 0===e&&(e={});var n,r=this.errors[t],i=this.service+"/"+t;n=void 0===r?"Error":r.replace(this.pattern,function(t,n){var r=e[n];return void 0!==r?r.toString():"<"+n+"?>"}),n=this.serviceName+": "+n+" ("+i+").";var o=new v(i,n);for(var a in e)e.hasOwnProperty(a)&&"_"!==a.slice(-1)&&(o[a]=e[a]);return o},t}();function g(t){return JSON.parse(t)}var m=function(t){var e={},n={},r={},i="";try{var o=t.split(".");e=g(c(o[0])||""),n=g(c(o[1])||""),i=o[2],r=n.d||{},delete n.d}catch(t){}return{header:e,claims:n,data:r,signature:i}},_=function(t,e){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e(n,t[n])},b=function(t,e){return _(e,function(e,n){t[e]=n}),t},w=function(t,e,n){for(var r in t)if(e.call(n,t[r],r,t))return r},E=function(t){function e(){var e=t.call(this)||this;e.chain_=[],e.buf_=[],e.W_=[],e.pad_=[],e.inbuf_=0,e.total_=0,e.blockSize=64,e.pad_[0]=128;for(var n=1;n<e.blockSize;++n)e.pad_[n]=0;return e.reset(),e}return r.__extends(e,t),e.prototype.reset=function(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0},e.prototype.compress_=function(t,e){e||(e=0);var n=this.W_;if("string"==typeof t)for(var r=0;r<16;r++)n[r]=t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|t.charCodeAt(e+3),e+=4;else for(r=0;r<16;r++)n[r]=t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3],e+=4;for(r=16;r<80;r++){var i=n[r-3]^n[r-8]^n[r-14]^n[r-16];n[r]=4294967295&(i<<1|i>>>31)}var o,a,s=this.chain_[0],u=this.chain_[1],c=this.chain_[2],h=this.chain_[3],l=this.chain_[4];for(r=0;r<80;r++){r<40?r<20?(o=h^u&(c^h),a=1518500249):(o=u^c^h,a=1859775393):r<60?(o=u&c|h&(u|c),a=2400959708):(o=u^c^h,a=3395469782);i=(s<<5|s>>>27)+o+l+a+n[r]&4294967295;l=h,h=c,c=4294967295&(u<<30|u>>>2),u=s,s=i}this.chain_[0]=this.chain_[0]+s&4294967295,this.chain_[1]=this.chain_[1]+u&4294967295,this.chain_[2]=this.chain_[2]+c&4294967295,this.chain_[3]=this.chain_[3]+h&4294967295,this.chain_[4]=this.chain_[4]+l&4294967295},e.prototype.update=function(t,e){if(null!=t){void 0===e&&(e=t.length);for(var n=e-this.blockSize,r=0,i=this.buf_,o=this.inbuf_;r<e;){if(0==o)for(;r<=n;)this.compress_(t,r),r+=this.blockSize;if("string"==typeof t){for(;r<e;)if(i[o]=t.charCodeAt(r),++r,++o==this.blockSize){this.compress_(i),o=0;break}}else for(;r<e;)if(i[o]=t[r],++r,++o==this.blockSize){this.compress_(i),o=0;break}}this.inbuf_=o,this.total_+=e}},e.prototype.digest=function(){var t=[],e=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(var n=this.blockSize-1;n>=56;n--)this.buf_[n]=255&e,e/=256;this.compress_(this.buf_);var r=0;for(n=0;n<5;n++)for(var i=24;i>=0;i-=8)t[r]=this.chain_[n]>>i&255,++r;return t},e}(function(){return function(){this.blockSize=-1}}());var C=function(){function t(t,e){var n=this;this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=e,this.task.then(function(){t(n)}).catch(function(t){n.error(t)})}return t.prototype.next=function(t){this.forEachObserver(function(e){e.next(t)})},t.prototype.error=function(t){this.forEachObserver(function(e){e.error(t)}),this.close(t)},t.prototype.complete=function(){this.forEachObserver(function(t){t.complete()}),this.close()},t.prototype.subscribe=function(t,e,n){var r,i=this;if(void 0===t&&void 0===e&&void 0===n)throw new Error("Missing Observer.");void 0===(r=function(t,e){if("object"!=typeof t||null===t)return!1;for(var n=0,r=e;n<r.length;n++){var i=r[n];if(i in t&&"function"==typeof t[i])return!0}return!1}(t,["next","error","complete"])?t:{next:t,error:e,complete:n}).next&&(r.next=T),void 0===r.error&&(r.error=T),void 0===r.complete&&(r.complete=T);var o=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then(function(){try{i.finalError?r.error(i.finalError):r.complete()}catch(t){}}),this.observers.push(r),o},t.prototype.unsubscribeOne=function(t){void 0!==this.observers&&void 0!==this.observers[t]&&(delete this.observers[t],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))},t.prototype.forEachObserver=function(t){if(!this.finalized)for(var e=0;e<this.observers.length;e++)this.sendOne(e,t)},t.prototype.sendOne=function(t,e){var n=this;this.task.then(function(){if(void 0!==n.observers&&void 0!==n.observers[t])try{e(n.observers[t])}catch(t){"undefined"!=typeof console&&console.error&&console.error(t)}})},t.prototype.close=function(t){var e=this;this.finalized||(this.finalized=!0,void 0!==t&&(this.finalError=t),this.task.then(function(){e.observers=void 0,e.onNoObservers=void 0}))},t}();function T(){}function S(t,e,n){var r="";switch(e){case 1:r=n?"first":"First";break;case 2:r=n?"second":"Second";break;case 3:r=n?"third":"Third";break;case 4:r=n?"fourth":"Fourth";break;default:throw new Error("errorPrefix called with argumentNumber > 4.  Need to update it?")}var i=t+" failed: ";return i+=r+" argument "}e.assert=o,e.assertionError=a,e.base64=u,e.base64Decode=c,e.base64Encode=function(t){var e=s(t);return u.encodeByteArray(e,!0)},e.CONSTANTS=i,e.deepCopy=function(t){return h(void 0,t)},e.deepExtend=h,e.patchProperty=function(t,e,n){t[e]=n},e.Deferred=l,e.getUA=f,e.isMobileCordova=function(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(f())},e.isNodeSdk=function(){return!0===i.NODE_CLIENT||!0===i.NODE_ADMIN},e.isReactNative=function(){return"object"==typeof navigator&&"ReactNative"===navigator.product},e.ErrorFactory=y,e.FirebaseError=v,e.patchCapture=function(t){var e=d;return d=t,e},e.jsonEval=g,e.stringify=function(t){return JSON.stringify(t)},e.decode=m,e.isAdmin=function(t){var e=m(t).claims;return"object"==typeof e&&!0===e.admin},e.issuedAtTime=function(t){var e=m(t).claims;return"object"==typeof e&&e.hasOwnProperty("iat")?e.iat:null},e.isValidFormat=function(t){var e=m(t),n=e.claims;return!!e.signature&&!!n&&"object"==typeof n&&n.hasOwnProperty("iat")},e.isValidTimestamp=function(t){var e,n,r=m(t).claims,i=Math.floor((new Date).getTime()/1e3);return"object"==typeof r&&(r.hasOwnProperty("nbf")?e=r.nbf:r.hasOwnProperty("iat")&&(e=r.iat),n=r.hasOwnProperty("exp")?r.exp:e+86400),i&&e&&n&&i>=e&&i<=n},e.clone=function(t){return b({},t)},e.contains=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.every=function(t,e){for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&!e(n,t[n]))return!1;return!0},e.extend=b,e.findKey=w,e.findValue=function(t,e,n){var r=w(t,e,n);return r&&t[r]},e.forEach=_,e.getAnyKey=function(t){for(var e in t)return e},e.getCount=function(t){var e=0;for(var n in t)e++;return e},e.getValues=function(t){var e=[],n=0;for(var r in t)e[n++]=t[r];return e},e.isEmpty=function(t){for(var e in t)return!1;return!0},e.isNonNullObject=function(t){return"object"==typeof t&&null!==t},e.map=function(t,e,n){var r={};for(var i in t)r[i]=e.call(n,t[i],i,t);return r},e.safeGet=function(t,e){if(Object.prototype.hasOwnProperty.call(t,e))return t[e]},e.querystring=function(t){var e=[];return _(t,function(t,n){Array.isArray(n)?n.forEach(function(n){e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))}):e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))}),e.length?"&"+e.join("&"):""},e.querystringDecode=function(t){var e={};return t.replace(/^\?/,"").split("&").forEach(function(t){if(t){var n=t.split("=");e[n[0]]=n[1]}}),e},e.Sha1=E,e.async=function(t,e){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];Promise.resolve(!0).then(function(){t.apply(void 0,n)}).catch(function(t){e&&e(t)})}},e.createSubscribe=function(t,e){var n=new C(t,e);return n.subscribe.bind(n)},e.errorPrefix=S,e.validateArgCount=function(t,e,n,r){var i;if(r<e?i="at least "+e:r>n&&(i=0===n?"none":"no more than "+n),i)throw new Error(t+" failed: Was called with "+r+(1===r?" argument.":" arguments.")+" Expects "+i+".")},e.validateCallback=function(t,e,n,r){if((!r||n)&&"function"!=typeof n)throw new Error(S(t,e,r)+"must be a valid function.")},e.validateContextObject=function(t,e,n,r){if((!r||n)&&("object"!=typeof n||null===n))throw new Error(S(t,e,r)+"must be a valid context object.")},e.validateNamespace=function(t,e,n,r){if((!r||n)&&"string"!=typeof n)throw new Error(S(t,e,r)+"must be a valid firebase namespace.")},e.stringLength=function(t){for(var e=0,n=0;n<t.length;n++){var r=t.charCodeAt(n);r<128?e++:r<2048?e+=2:r>=55296&&r<=56319?(e+=4,n++):e+=3}return e},e.stringToByteArray=function(t){for(var e=[],n=0,r=0;r<t.length;r++){var i=t.charCodeAt(r);if(i>=55296&&i<=56319){var a=i-55296;o(++r<t.length,"Surrogate pair missing trail surrogate."),i=65536+(a<<10)+(t.charCodeAt(r)-56320)}i<128?e[n++]=i:i<2048?(e[n++]=i>>6|192,e[n++]=63&i|128):i<65536?(e[n++]=i>>12|224,e[n++]=i>>6&63|128,e[n++]=63&i|128):(e[n++]=i>>18|240,e[n++]=i>>12&63|128,e[n++]=i>>6&63|128,e[n++]=63&i|128)}return e}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.APIKEY="AIzaSyDjy1EVbj5Us9sESLUZ9ThS5Qda1q3ZPss",e.AUTHDOMAIN="galleryjs-ce651.firebaseapp.com",e.DBURL="https://galleryjs-ce651.firebaseio.com",e.PROJECTID="galleryjs-ce651",e.STRBUCKET="galleryjs-ce651.appspot.com",e.MESSAGSENDERID="28013456950"},function(t,e,n){"use strict";(function(t){var e=n(0),r=n.n(e);(function(){var t,e=e||{},n=this;function i(t){return"string"==typeof t}function o(t){return"boolean"==typeof t}function a(){}function s(t){var e=typeof t;if("object"==e){if(!t)return"null";if(t instanceof Array)return"array";if(t instanceof Object)return e;var n=Object.prototype.toString.call(t);if("[object Window]"==n)return"object";if("[object Array]"==n||"number"==typeof t.length&&void 0!==t.splice&&void 0!==t.propertyIsEnumerable&&!t.propertyIsEnumerable("splice"))return"array";if("[object Function]"==n||void 0!==t.call&&void 0!==t.propertyIsEnumerable&&!t.propertyIsEnumerable("call"))return"function"}else if("function"==e&&void 0===t.call)return"object";return e}function u(t){return null===t}function c(t){return"array"==s(t)}function h(t){var e=s(t);return"array"==e||"object"==e&&"number"==typeof t.length}function l(t){return"function"==s(t)}function f(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}var p="closure_uid_"+(1e9*Math.random()>>>0),d=0;function v(t,e,n){return t.call.apply(t.bind,arguments)}function y(t,e,n){if(!t)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function g(t,e,n){return(g=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?v:y).apply(null,arguments)}function m(t,e){var n=Array.prototype.slice.call(arguments,1);return function(){var e=n.slice();return e.push.apply(e,arguments),t.apply(this,e)}}var _=Date.now||function(){return+new Date};function b(t,e){function n(){}n.prototype=e.prototype,t.lb=e.prototype,t.prototype=new n,t.prototype.constructor=t,t.cd=function(t,n,r){for(var i=Array(arguments.length-2),o=2;o<arguments.length;o++)i[o-2]=arguments[o];return e.prototype[n].apply(t,i)}}function w(t){t.prototype.then=t.prototype.then,t.prototype.$goog_Thenable=!0}function E(t){if(!t)return!1;try{return!!t.$goog_Thenable}catch(t){return!1}}function C(t){if(Error.captureStackTrace)Error.captureStackTrace(this,C);else{var e=Error().stack;e&&(this.stack=e)}t&&(this.message=String(t))}function T(t,e){for(var n="",r=(t=t.split("%s")).length-1,i=0;i<r;i++)n+=t[i]+(i<e.length?e[i]:"%s");C.call(this,n+t[r])}function S(t,e){throw new T("Failure"+(t?": "+t:""),Array.prototype.slice.call(arguments,1))}function I(t,e){this.c=t,this.f=e,this.b=0,this.a=null}function N(t,e){t.f(e),100>t.b&&(t.b++,e.next=t.a,t.a=e)}function A(){this.b=this.a=null}b(C,Error),C.prototype.name="CustomError",b(T,C),T.prototype.name="AssertionError",I.prototype.get=function(){if(0<this.b){this.b--;var t=this.a;this.a=t.next,t.next=null}else t=this.c();return t};var R=new I(function(){return new P},function(t){t.reset()});function O(){var t=pt,e=null;return t.a&&(e=t.a,t.a=t.a.next,t.a||(t.b=null),e.next=null),e}function P(){this.next=this.b=this.a=null}A.prototype.add=function(t,e){var n=R.get();n.set(t,e),this.b?this.b.next=n:this.a=n,this.b=n},P.prototype.set=function(t,e){this.a=t,this.b=e,this.next=null},P.prototype.reset=function(){this.next=this.b=this.a=null};var k=Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e,void 0)}:function(t,e){if(i(t))return i(e)&&1==e.length?t.indexOf(e,0):-1;for(var n=0;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1},D=Array.prototype.forEach?function(t,e,n){Array.prototype.forEach.call(t,e,n)}:function(t,e,n){for(var r=t.length,o=i(t)?t.split(""):t,a=0;a<r;a++)a in o&&e.call(n,o[a],a,t)};var x=Array.prototype.map?function(t,e){return Array.prototype.map.call(t,e,void 0)}:function(t,e){for(var n=t.length,r=Array(n),o=i(t)?t.split(""):t,a=0;a<n;a++)a in o&&(r[a]=e.call(void 0,o[a],a,t));return r},L=Array.prototype.some?function(t,e){return Array.prototype.some.call(t,e,void 0)}:function(t,e){for(var n=t.length,r=i(t)?t.split(""):t,o=0;o<n;o++)if(o in r&&e.call(void 0,r[o],o,t))return!0;return!1};function M(t,e){return 0<=k(t,e)}function F(t,e){var n;return(n=0<=(e=k(t,e)))&&Array.prototype.splice.call(t,e,1),n}function U(t,e){!function(t,e){var n=t.length,r=i(t)?t.split(""):t;for(--n;0<=n;--n)n in r&&e.call(void 0,r[n],n,t)}(t,function(n,r){e.call(void 0,n,r,t)&&1==Array.prototype.splice.call(t,r,1).length&&0})}function j(t){return Array.prototype.concat.apply([],arguments)}function W(t){var e=t.length;if(0<e){for(var n=Array(e),r=0;r<e;r++)n[r]=t[r];return n}return[]}function q(t,e){for(var n=t.split("%s"),r="",i=Array.prototype.slice.call(arguments,1);i.length&&1<n.length;)r+=n.shift()+i.shift();return r+n.join("%s")}var V=String.prototype.trim?function(t){return t.trim()}:function(t){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(t)[1]};function B(t){return J.test(t)?(-1!=t.indexOf("&")&&(t=t.replace(G,"&amp;")),-1!=t.indexOf("<")&&(t=t.replace(K,"&lt;")),-1!=t.indexOf(">")&&(t=t.replace(Q,"&gt;")),-1!=t.indexOf('"')&&(t=t.replace(z,"&quot;")),-1!=t.indexOf("'")&&(t=t.replace(X,"&#39;")),-1!=t.indexOf("\0")&&(t=t.replace(Y,"&#0;")),t):t}var H,G=/&/g,K=/</g,Q=/>/g,z=/"/g,X=/'/g,Y=/\x00/g,J=/[\x00&<>"']/;function $(t,e){return-1!=t.indexOf(e)}function Z(t,e){return t<e?-1:t>e?1:0}t:{var tt=n.navigator;if(tt){var et=tt.userAgent;if(et){H=et;break t}}H=""}function nt(t){return $(H,t)}function rt(t,e){for(var n in t)e.call(void 0,t[n],n,t)}function it(t){for(var e in t)return!1;return!0}function ot(t){var e,n={};for(e in t)n[e]=t[e];return n}var at,st,ut="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function ct(t,e){for(var n,r,i=1;i<arguments.length;i++){for(n in r=arguments[i])t[n]=r[n];for(var o=0;o<ut.length;o++)n=ut[o],Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}}function ht(t){n.setTimeout(function(){throw t},0)}function lt(t,e){st||function(){if(n.Promise&&n.Promise.resolve){var t=n.Promise.resolve(void 0);st=function(){t.then(dt)}}else st=function(){var t=dt;!l(n.setImmediate)||n.Window&&n.Window.prototype&&!nt("Edge")&&n.Window.prototype.setImmediate==n.setImmediate?(at||(at=function(){var t=n.MessageChannel;if(void 0===t&&"undefined"!=typeof window&&window.postMessage&&window.addEventListener&&!nt("Presto")&&(t=function(){var t=document.createElement("IFRAME");t.style.display="none",t.src="",document.documentElement.appendChild(t);var e=t.contentWindow;(t=e.document).open(),t.write(""),t.close();var n="callImmediate"+Math.random(),r="file:"==e.location.protocol?"*":e.location.protocol+"//"+e.location.host;t=g(function(t){"*"!=r&&t.origin!=r||t.data!=n||this.port1.onmessage()},this),e.addEventListener("message",t,!1),this.port1={},this.port2={postMessage:function(){e.postMessage(n,r)}}}),void 0!==t&&!nt("Trident")&&!nt("MSIE")){var e=new t,r={},i=r;return e.port1.onmessage=function(){if(void 0!==r.next){var t=(r=r.next).tb;r.tb=null,t()}},function(t){i.next={tb:t},i=i.next,e.port2.postMessage(0)}}return"undefined"!=typeof document&&"onreadystatechange"in document.createElement("SCRIPT")?function(t){var e=document.createElement("SCRIPT");e.onreadystatechange=function(){e.onreadystatechange=null,e.parentNode.removeChild(e),e=null,t(),t=null},document.documentElement.appendChild(e)}:function(t){n.setTimeout(t,0)}}()),at(t)):n.setImmediate(t)}}(),ft||(st(),ft=!0),pt.add(t,e)}var ft=!1,pt=new A;function dt(){for(var t;t=O();){try{t.a.call(t.b)}catch(t){ht(t)}N(R,t)}ft=!1}function vt(t,e){if(this.a=yt,this.i=void 0,this.f=this.b=this.c=null,this.g=this.h=!1,t!=a)try{var n=this;t.call(e,function(t){Nt(n,gt,t)},function(t){if(!(t instanceof xt))try{if(t instanceof Error)throw t;throw Error("Promise rejected.")}catch(t){}Nt(n,mt,t)})}catch(t){Nt(this,mt,t)}}var yt=0,gt=2,mt=3;function _t(){this.next=this.f=this.b=this.g=this.a=null,this.c=!1}_t.prototype.reset=function(){this.f=this.b=this.g=this.a=null,this.c=!1};var bt=new I(function(){return new _t},function(t){t.reset()});function wt(t,e,n){var r=bt.get();return r.g=t,r.b=e,r.f=n,r}function Et(t){if(t instanceof vt)return t;var e=new vt(a);return Nt(e,gt,t),e}function Ct(t){return new vt(function(e,n){n(t)})}function Tt(t,e,n){At(t,e,n,null)||lt(m(e,t))}function St(t,e){t.b||t.a!=gt&&t.a!=mt||Rt(t),t.f?t.f.next=e:t.b=e,t.f=e}function It(t,e,n,r){var i=wt(null,null,null);return i.a=new vt(function(t,o){i.g=e?function(n){try{var i=e.call(r,n);t(i)}catch(t){o(t)}}:t,i.b=n?function(e){try{var i=n.call(r,e);void 0===i&&e instanceof xt?o(e):t(i)}catch(t){o(t)}}:o}),i.a.c=t,St(t,i),i.a}function Nt(t,e,n){t.a==yt&&(t===n&&(e=mt,n=new TypeError("Promise cannot resolve to itself")),t.a=1,At(n,t.Lc,t.Mc,t)||(t.i=n,t.a=e,t.c=null,Rt(t),e!=mt||n instanceof xt||function(t,e){t.g=!0,lt(function(){t.g&&Dt.call(null,e)})}(t,n)))}function At(t,e,n,r){if(t instanceof vt)return St(t,wt(e||a,n||null,r)),!0;if(E(t))return t.then(e,n,r),!0;if(f(t))try{var i=t.then;if(l(i))return function(t,e,n,r,i){function o(t){a||(a=!0,r.call(i,t))}var a=!1;try{e.call(t,function(t){a||(a=!0,n.call(i,t))},o)}catch(t){o(t)}}(t,i,e,n,r),!0}catch(t){return n.call(r,t),!0}return!1}function Rt(t){t.h||(t.h=!0,lt(t.Ub,t))}function Ot(t){var e=null;return t.b&&(e=t.b,t.b=e.next,e.next=null),t.b||(t.f=null),e}function Pt(t,e,n,r){if(n==mt&&e.b&&!e.c)for(;t&&t.g;t=t.c)t.g=!1;if(e.a)e.a.c=null,kt(e,n,r);else try{e.c?e.g.call(e.f):kt(e,n,r)}catch(t){Dt.call(null,t)}N(bt,e)}function kt(t,e,n){e==gt?t.g.call(t.f,n):t.b&&t.b.call(t.f,n)}vt.prototype.then=function(t,e,n){return It(this,l(t)?t:null,l(e)?e:null,n)},w(vt),(t=vt.prototype).ia=function(t,e){return(t=wt(t,t,e)).c=!0,St(this,t),this},t.s=function(t,e){return It(this,null,t,e)},t.cancel=function(t){this.a==yt&&lt(function(){!function t(e,n){if(e.a==yt)if(e.c){var r=e.c;if(r.b){for(var i=0,o=null,a=null,s=r.b;s&&(s.c||(i++,s.a==e&&(o=s),!(o&&1<i)));s=s.next)o||(a=s);o&&(r.a==yt&&1==i?t(r,n):(a?((i=a).next==r.f&&(r.f=i),i.next=i.next.next):Ot(r),Pt(r,o,mt,n)))}e.c=null}else Nt(e,mt,n)}(this,new xt(t))},this)},t.Lc=function(t){this.a=yt,Nt(this,gt,t)},t.Mc=function(t){this.a=yt,Nt(this,mt,t)},t.Ub=function(){for(var t;t=Ot(this);)Pt(this,t,this.a,this.i);this.h=!1};var Dt=ht;function xt(t){C.call(this,t)}function Lt(){0!=Mt&&(Ft[this[p]||(this[p]=++d)]=this),this.pa=this.pa,this.ja=this.ja}b(xt,C),xt.prototype.name="cancel";var Mt=0,Ft={};function Ut(t){if(!t.pa&&(t.pa=!0,t.ua(),0!=Mt)){var e=t[p]||(t[p]=++d);if(0!=Mt&&t.ja&&0<t.ja.length)throw Error(t+" did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");delete Ft[e]}}function jt(t){return jt[" "](t),t}Lt.prototype.pa=!1,Lt.prototype.ua=function(){if(this.ja)for(;this.ja.length;)this.ja.shift()()},jt[" "]=a;var Wt,qt=nt("Opera"),Vt=nt("Trident")||nt("MSIE"),Bt=nt("Edge"),Ht=Bt||Vt,Gt=nt("Gecko")&&!($(H.toLowerCase(),"webkit")&&!nt("Edge"))&&!(nt("Trident")||nt("MSIE"))&&!nt("Edge"),Kt=$(H.toLowerCase(),"webkit")&&!nt("Edge");function Qt(){var t=n.document;return t?t.documentMode:void 0}t:{var zt="",Xt=function(){var t=H;return Gt?/rv:([^\);]+)(\)|;)/.exec(t):Bt?/Edge\/([\d\.]+)/.exec(t):Vt?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(t):Kt?/WebKit\/(\S+)/.exec(t):qt?/(?:Version)[ \/]?(\S+)/.exec(t):void 0}();if(Xt&&(zt=Xt?Xt[1]:""),Vt){var Yt=Qt();if(null!=Yt&&Yt>parseFloat(zt)){Wt=String(Yt);break t}}Wt=zt}var Jt,$t={};function Zt(t){return function(t,e){var n=$t;return Object.prototype.hasOwnProperty.call(n,t)?n[t]:n[t]=e(t)}(t,function(){for(var e=0,n=V(String(Wt)).split("."),r=V(String(t)).split("."),i=Math.max(n.length,r.length),o=0;0==e&&o<i;o++){var a=n[o]||"",s=r[o]||"";do{if(a=/(\d*)(\D*)(.*)/.exec(a)||["","","",""],s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],0==a[0].length&&0==s[0].length)break;e=Z(0==a[1].length?0:parseInt(a[1],10),0==s[1].length?0:parseInt(s[1],10))||Z(0==a[2].length,0==s[2].length)||Z(a[2],s[2]),a=a[3],s=s[3]}while(0==e)}return 0<=e})}var te=n.document;Jt=te&&Vt?Qt()||("CSS1Compat"==te.compatMode?parseInt(Wt,10):5):void 0;var ee=Object.freeze||function(t){return t},ne=!Vt||9<=Number(Jt),re=Vt&&!Zt("9"),ie=function(){if(!n.addEventListener||!Object.defineProperty)return!1;var t=!1,e=Object.defineProperty({},"passive",{get:function(){t=!0}});return n.addEventListener("test",a,e),n.removeEventListener("test",a,e),t}();function oe(t,e){this.type=t,this.b=this.target=e,this.Gb=!0}function ae(t,e){if(oe.call(this,t?t.type:""),this.relatedTarget=this.b=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.pointerId=0,this.pointerType="",this.a=null,t){var n=this.type=t.type,r=t.changedTouches?t.changedTouches[0]:null;if(this.target=t.target||t.srcElement,this.b=e,e=t.relatedTarget){if(Gt){t:{try{jt(e.nodeName);var o=!0;break t}catch(t){}o=!1}o||(e=null)}}else"mouseover"==n?e=t.fromElement:"mouseout"==n&&(e=t.toElement);this.relatedTarget=e,null===r?(this.clientX=void 0!==t.clientX?t.clientX:t.pageX,this.clientY=void 0!==t.clientY?t.clientY:t.pageY,this.screenX=t.screenX||0,this.screenY=t.screenY||0):(this.clientX=void 0!==r.clientX?r.clientX:r.pageX,this.clientY=void 0!==r.clientY?r.clientY:r.pageY,this.screenX=r.screenX||0,this.screenY=r.screenY||0),this.button=t.button,this.key=t.key||"",this.ctrlKey=t.ctrlKey,this.altKey=t.altKey,this.shiftKey=t.shiftKey,this.metaKey=t.metaKey,this.pointerId=t.pointerId||0,this.pointerType=i(t.pointerType)?t.pointerType:se[t.pointerType]||"",this.a=t,t.defaultPrevented&&this.preventDefault()}}oe.prototype.preventDefault=function(){this.Gb=!1},b(ae,oe);var se=ee({2:"touch",3:"pen",4:"mouse"});ae.prototype.preventDefault=function(){ae.lb.preventDefault.call(this);var t=this.a;if(t.preventDefault)t.preventDefault();else if(t.returnValue=!1,re)try{(t.ctrlKey||112<=t.keyCode&&123>=t.keyCode)&&(t.keyCode=-1)}catch(t){}},ae.prototype.f=function(){return this.a};var ue="closure_listenable_"+(1e6*Math.random()|0),ce=0;function he(t){t.na=!0,t.listener=null,t.proxy=null,t.src=null,t.La=null}function le(t){this.src=t,this.a={},this.b=0}function fe(t,e){var n=e.type;n in t.a&&F(t.a[n],e)&&(he(e),0==t.a[n].length&&(delete t.a[n],t.b--))}function pe(t,e,n,r){for(var i=0;i<t.length;++i){var o=t[i];if(!o.na&&o.listener==e&&o.capture==!!n&&o.La==r)return i}return-1}le.prototype.add=function(t,e,n,r,i){var o=t.toString();(t=this.a[o])||(t=this.a[o]=[],this.b++);var a=pe(t,e,r,i);return-1<a?(e=t[a],n||(e.Ia=!1)):((e=new function(t,e,n,r,i){this.listener=t,this.proxy=null,this.src=e,this.type=n,this.capture=!!r,this.La=i,this.key=++ce,this.na=this.Ia=!1}(e,this.src,o,!!r,i)).Ia=n,t.push(e)),e};var de="closure_lm_"+(1e6*Math.random()|0),ve={};function ye(t,e,n,r,i){if(r&&r.once)me(t,e,n,r,i);else if(c(e))for(var o=0;o<e.length;o++)ye(t,e[o],n,r,i);else n=Ne(n),t&&t[ue]?Re(t,e,n,f(r)?!!r.capture:!!r,i):ge(t,e,n,!1,r,i)}function ge(t,e,n,r,i,o){if(!e)throw Error("Invalid event type");var a=f(i)?!!i.capture:!!i,s=Se(t);if(s||(t[de]=s=new le(t)),!(n=s.add(e,n,r,a,o)).proxy){if(r=function(){var t=Te,e=ne?function(n){return t.call(e.src,e.listener,n)}:function(n){if(!(n=t.call(e.src,e.listener,n)))return n};return e}(),n.proxy=r,r.src=t,r.listener=n,t.addEventListener)ie||(i=a),void 0===i&&(i=!1),t.addEventListener(e.toString(),r,i);else if(t.attachEvent)t.attachEvent(we(e.toString()),r);else{if(!t.addListener||!t.removeListener)throw Error("addEventListener and attachEvent are unavailable.");t.addListener(r)}0}}function me(t,e,n,r,i){if(c(e))for(var o=0;o<e.length;o++)me(t,e[o],n,r,i);else n=Ne(n),t&&t[ue]?Oe(t,e,n,f(r)?!!r.capture:!!r,i):ge(t,e,n,!0,r,i)}function _e(t,e,n,r,i){if(c(e))for(var o=0;o<e.length;o++)_e(t,e[o],n,r,i);else r=f(r)?!!r.capture:!!r,n=Ne(n),t&&t[ue]?(t=t.m,(e=String(e).toString())in t.a&&(-1<(n=pe(o=t.a[e],n,r,i))&&(he(o[n]),Array.prototype.splice.call(o,n,1),0==o.length&&(delete t.a[e],t.b--)))):t&&(t=Se(t))&&(e=t.a[e.toString()],t=-1,e&&(t=pe(e,n,r,i)),(n=-1<t?e[t]:null)&&be(n))}function be(t){if("number"!=typeof t&&t&&!t.na){var e=t.src;if(e&&e[ue])fe(e.m,t);else{var n=t.type,r=t.proxy;e.removeEventListener?e.removeEventListener(n,r,t.capture):e.detachEvent?e.detachEvent(we(n),r):e.addListener&&e.removeListener&&e.removeListener(r),0,(n=Se(e))?(fe(n,t),0==n.b&&(n.src=null,e[de]=null)):he(t)}}}function we(t){return t in ve?ve[t]:ve[t]="on"+t}function Ee(t,e,n,r){var i=!0;if((t=Se(t))&&(e=t.a[e.toString()]))for(e=e.concat(),t=0;t<e.length;t++){var o=e[t];o&&o.capture==n&&!o.na&&(o=Ce(o,r),i=i&&!1!==o)}return i}function Ce(t,e){var n=t.listener,r=t.La||t.src;return t.Ia&&be(t),n.call(r,e)}function Te(t,e){if(t.na)return!0;if(!ne){if(!e)t:{e=["window","event"];for(var r=n,i=0;i<e.length;i++)if(null==(r=r[e[i]])){e=null;break t}e=r}if(e=new ae(i=e,this),r=!0,!(0>i.keyCode||void 0!=i.returnValue)){t:{var o=!1;if(0==i.keyCode)try{i.keyCode=-1;break t}catch(t){o=!0}(o||void 0==i.returnValue)&&(i.returnValue=!0)}for(i=[],o=e.b;o;o=o.parentNode)i.push(o);for(t=t.type,o=i.length-1;0<=o;o--){e.b=i[o];var a=Ee(i[o],t,!0,e);r=r&&a}for(o=0;o<i.length;o++)e.b=i[o],a=Ee(i[o],t,!1,e),r=r&&a}return r}return Ce(t,new ae(e,this))}function Se(t){return(t=t[de])instanceof le?t:null}var Ie="__closure_events_fn_"+(1e9*Math.random()>>>0);function Ne(t){return l(t)?t:(t[Ie]||(t[Ie]=function(e){return t.handleEvent(e)}),t[Ie])}function Ae(){Lt.call(this),this.m=new le(this),this.Nb=this,this.Ua=null}function Re(t,e,n,r,i){t.m.add(String(e),n,!1,r,i)}function Oe(t,e,n,r,i){t.m.add(String(e),n,!0,r,i)}function Pe(t,e,n,r){if(!(e=t.m.a[String(e)]))return!0;e=e.concat();for(var i=!0,o=0;o<e.length;++o){var a=e[o];if(a&&!a.na&&a.capture==n){var s=a.listener,u=a.La||a.src;a.Ia&&fe(t.m,a),i=!1!==s.call(u,r)&&i}}return i&&0!=r.Gb}function ke(t,e,r){if(l(t))r&&(t=g(t,r));else{if(!t||"function"!=typeof t.handleEvent)throw Error("Invalid listener argument");t=g(t.handleEvent,t)}return 2147483647<Number(e)?-1:n.setTimeout(t,e||0)}function De(t){var e=null;return new vt(function(n,r){-1==(e=ke(function(){n(void 0)},t))&&r(Error("Failed to schedule timer."))}).s(function(t){throw n.clearTimeout(e),t})}function xe(t){if(t.S&&"function"==typeof t.S)return t.S();if(i(t))return t.split("");if(h(t)){for(var e=[],n=t.length,r=0;r<n;r++)e.push(t[r]);return e}for(r in e=[],n=0,t)e[n++]=t[r];return e}function Le(t){if(t.U&&"function"==typeof t.U)return t.U();if(!t.S||"function"!=typeof t.S){if(h(t)||i(t)){var e=[];t=t.length;for(var n=0;n<t;n++)e.push(n);return e}for(var r in e=[],n=0,t)e[n++]=r;return e}}function Me(t,e){this.b={},this.a=[],this.c=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var r=0;r<n;r+=2)this.set(arguments[r],arguments[r+1])}else if(t)if(t instanceof Me)for(n=t.U(),r=0;r<n.length;r++)this.set(n[r],t.get(n[r]));else for(r in t)this.set(r,t[r])}function Fe(t){if(t.c!=t.a.length){for(var e=0,n=0;e<t.a.length;){var r=t.a[e];Ue(t.b,r)&&(t.a[n++]=r),e++}t.a.length=n}if(t.c!=t.a.length){var i={};for(n=e=0;e<t.a.length;)Ue(i,r=t.a[e])||(t.a[n++]=r,i[r]=1),e++;t.a.length=n}}function Ue(t,e){return Object.prototype.hasOwnProperty.call(t,e)}b(Ae,Lt),Ae.prototype[ue]=!0,Ae.prototype.addEventListener=function(t,e,n,r){ye(this,t,e,n,r)},Ae.prototype.removeEventListener=function(t,e,n,r){_e(this,t,e,n,r)},Ae.prototype.dispatchEvent=function(t){var e,n=this.Ua;if(n)for(e=[];n;n=n.Ua)e.push(n);n=this.Nb;var r=t.type||t;if(i(t))t=new oe(t,n);else if(t instanceof oe)t.target=t.target||n;else{var o=t;ct(t=new oe(r,n),o)}if(o=!0,e)for(var a=e.length-1;0<=a;a--){var s=t.b=e[a];o=Pe(s,r,!0,t)&&o}if(o=Pe(s=t.b=n,r,!0,t)&&o,o=Pe(s,r,!1,t)&&o,e)for(a=0;a<e.length;a++)o=Pe(s=t.b=e[a],r,!1,t)&&o;return o},Ae.prototype.ua=function(){if(Ae.lb.ua.call(this),this.m){var t,e=this.m;for(t in e.a){for(var n=e.a[t],r=0;r<n.length;r++)0,he(n[r]);delete e.a[t],e.b--}}this.Ua=null},(t=Me.prototype).S=function(){Fe(this);for(var t=[],e=0;e<this.a.length;e++)t.push(this.b[this.a[e]]);return t},t.U=function(){return Fe(this),this.a.concat()},t.clear=function(){this.b={},this.c=this.a.length=0},t.get=function(t,e){return Ue(this.b,t)?this.b[t]:e},t.set=function(t,e){Ue(this.b,t)||(this.c++,this.a.push(t)),this.b[t]=e},t.forEach=function(t,e){for(var n=this.U(),r=0;r<n.length;r++){var i=n[r],o=this.get(i);t.call(e,o,i,this)}};var je=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function We(t,e){if(this.b=this.m=this.c="",this.i=null,this.h=this.g="",this.f=!1,t instanceof We){this.f=void 0!==e?e:t.f,qe(this,t.c),this.m=t.m,this.b=t.b,Ve(this,t.i),this.g=t.g,e=t.a;var n=new nn;n.c=e.c,e.a&&(n.a=new Me(e.a),n.b=e.b),Be(this,n),this.h=t.h}else t&&(n=String(t).match(je))?(this.f=!!e,qe(this,n[1]||"",!0),this.m=ze(n[2]||""),this.b=ze(n[3]||"",!0),Ve(this,n[4]),this.g=ze(n[5]||"",!0),Be(this,n[6]||"",!0),this.h=ze(n[7]||"")):(this.f=!!e,this.a=new nn(null,this.f))}function qe(t,e,n){t.c=n?ze(e,!0):e,t.c&&(t.c=t.c.replace(/:$/,""))}function Ve(t,e){if(e){if(e=Number(e),isNaN(e)||0>e)throw Error("Bad port number "+e);t.i=e}else t.i=null}function Be(t,e,n){e instanceof nn?(t.a=e,function(t,e){e&&!t.f&&(rn(t),t.c=null,t.a.forEach(function(t,e){var n=e.toLowerCase();e!=n&&(an(this,e),un(this,n,t))},t)),t.f=e}(t.a,t.f)):(n||(e=Xe(e,tn)),t.a=new nn(e,t.f))}function He(t,e,n){t.a.set(e,n)}function Ge(t,e){return t.a.get(e)}function Ke(t){return t instanceof We?new We(t):new We(t,void 0)}function Qe(t,e){var n=new We(null,void 0);return qe(n,"https"),t&&(n.b=t),e&&(n.g=e),n}function ze(t,e){return t?e?decodeURI(t.replace(/%25/g,"%2525")):decodeURIComponent(t):""}function Xe(t,e,n){return i(t)?(t=encodeURI(t).replace(e,Ye),n&&(t=t.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),t):null}function Ye(t){return"%"+((t=t.charCodeAt(0))>>4&15).toString(16)+(15&t).toString(16)}We.prototype.toString=function(){var t=[],e=this.c;e&&t.push(Xe(e,Je,!0),":");var n=this.b;return(n||"file"==e)&&(t.push("//"),(e=this.m)&&t.push(Xe(e,Je,!0),"@"),t.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.i)&&t.push(":",String(n))),(n=this.g)&&(this.b&&"/"!=n.charAt(0)&&t.push("/"),t.push(Xe(n,"/"==n.charAt(0)?Ze:$e,!0))),(n=this.a.toString())&&t.push("?",n),(n=this.h)&&t.push("#",Xe(n,en)),t.join("")};var Je=/[#\/\?@]/g,$e=/[#\?:]/g,Ze=/[#\?]/g,tn=/[#\?@]/g,en=/#/g;function nn(t,e){this.b=this.a=null,this.c=t||null,this.f=!!e}function rn(t){t.a||(t.a=new Me,t.b=0,t.c&&function(t,e){if(t){t=t.split("&");for(var n=0;n<t.length;n++){var r=t[n].indexOf("="),i=null;if(0<=r){var o=t[n].substring(0,r);i=t[n].substring(r+1)}else o=t[n];e(o,i?decodeURIComponent(i.replace(/\+/g," ")):"")}}}(t.c,function(e,n){t.add(decodeURIComponent(e.replace(/\+/g," ")),n)}))}function on(t){var e=Le(t);if(void 0===e)throw Error("Keys are undefined");var n=new nn(null,void 0);t=xe(t);for(var r=0;r<e.length;r++){var i=e[r],o=t[r];c(o)?un(n,i,o):n.add(i,o)}return n}function an(t,e){rn(t),e=cn(t,e),Ue(t.a.b,e)&&(t.c=null,t.b-=t.a.get(e).length,Ue((t=t.a).b,e)&&(delete t.b[e],t.c--,t.a.length>2*t.c&&Fe(t)))}function sn(t,e){return rn(t),e=cn(t,e),Ue(t.a.b,e)}function un(t,e,n){an(t,e),0<n.length&&(t.c=null,t.a.set(cn(t,e),W(n)),t.b+=n.length)}function cn(t,e){return e=String(e),t.f&&(e=e.toLowerCase()),e}(t=nn.prototype).add=function(t,e){rn(this),this.c=null,t=cn(this,t);var n=this.a.get(t);return n||this.a.set(t,n=[]),n.push(e),this.b+=1,this},t.clear=function(){this.a=this.c=null,this.b=0},t.forEach=function(t,e){rn(this),this.a.forEach(function(n,r){D(n,function(n){t.call(e,n,r,this)},this)},this)},t.U=function(){rn(this);for(var t=this.a.S(),e=this.a.U(),n=[],r=0;r<e.length;r++)for(var i=t[r],o=0;o<i.length;o++)n.push(e[r]);return n},t.S=function(t){rn(this);var e=[];if(i(t))sn(this,t)&&(e=j(e,this.a.get(cn(this,t))));else{t=this.a.S();for(var n=0;n<t.length;n++)e=j(e,t[n])}return e},t.set=function(t,e){return rn(this),this.c=null,sn(this,t=cn(this,t))&&(this.b-=this.a.get(t).length),this.a.set(t,[e]),this.b+=1,this},t.get=function(t,e){return 0<(t=t?this.S(t):[]).length?String(t[0]):e},t.toString=function(){if(this.c)return this.c;if(!this.a)return"";for(var t=[],e=this.a.U(),n=0;n<e.length;n++){var r=e[n],i=encodeURIComponent(String(r));r=this.S(r);for(var o=0;o<r.length;o++){var a=i;""!==r[o]&&(a+="="+encodeURIComponent(String(r[o]))),t.push(a)}}return this.c=t.join("&")};var hn=!Vt||9<=Number(Jt);function ln(){this.a="",this.b=pn}function fn(t){return t instanceof ln&&t.constructor===ln&&t.b===pn?t.a:(S("expected object of type Const, got '"+t+"'"),"type_error:Const")}ln.prototype.ma=!0,ln.prototype.la=function(){return this.a},ln.prototype.toString=function(){return"Const{"+this.a+"}"};var pn={};function dn(t){var e=new ln;return e.a=t,e}function vn(){this.a="",this.b=bn}function yn(t){return t instanceof vn&&t.constructor===vn&&t.b===bn?t.a:(S("expected object of type TrustedResourceUrl, got '"+t+"' of type "+s(t)),"type_error:TrustedResourceUrl")}function gn(t,e){var n=fn(t);if(!_n.test(n))throw Error("Invalid TrustedResourceUrl format: "+n);return function(t){var e=new vn;return e.a=t,e}(t=n.replace(mn,function(t,r){if(!Object.prototype.hasOwnProperty.call(e,r))throw Error('Found marker, "'+r+'", in format string, "'+n+'", but no valid label mapping found in args: '+JSON.stringify(e));return(t=e[r])instanceof ln?fn(t):encodeURIComponent(String(t))}))}dn(""),vn.prototype.ma=!0,vn.prototype.la=function(){return this.a},vn.prototype.toString=function(){return"TrustedResourceUrl{"+this.a+"}"};var mn=/%{(\w+)}/g,_n=/^(?:https:)?\/\/[0-9a-z.:[\]-]+\/|^\/[^\/\\]|^about:blank#/i,bn={};function wn(){this.a="",this.b=Sn}function En(t){return t instanceof wn&&t.constructor===wn&&t.b===Sn?t.a:(S("expected object of type SafeUrl, got '"+t+"' of type "+s(t)),"type_error:SafeUrl")}wn.prototype.ma=!0,wn.prototype.la=function(){return this.a},wn.prototype.toString=function(){return"SafeUrl{"+this.a+"}"};var Cn=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;function Tn(t){return t instanceof wn?t:(t=t.ma?t.la():String(t),Cn.test(t)||(t="about:invalid#zClosurez"),In(t))}var Sn={};function In(t){var e=new wn;return e.a=t,e}function Nn(){this.a="",this.b=An}In("about:blank"),Nn.prototype.ma=!0,Nn.prototype.la=function(){return this.a},Nn.prototype.toString=function(){return"SafeHtml{"+this.a+"}"};var An={};function Rn(t){var e=new Nn;return e.a=t,e}function On(t){var e=document;return i(t)?e.getElementById(t):t}function Pn(t,e){rt(e,function(e,n){e&&e.ma&&(e=e.la()),"style"==n?t.style.cssText=e:"class"==n?t.className=e:"for"==n?t.htmlFor=e:kn.hasOwnProperty(n)?t.setAttribute(kn[n],e):0==n.lastIndexOf("aria-",0)||0==n.lastIndexOf("data-",0)?t.setAttribute(n,e):t[n]=e})}Rn("<!DOCTYPE html>"),Rn(""),Rn("<br>");var kn={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};function Dn(t,e,n){var r=arguments,o=document,a=String(r[0]),s=r[1];if(!hn&&s&&(s.name||s.type)){if(a=["<",a],s.name&&a.push(' name="',B(s.name),'"'),s.type){a.push(' type="',B(s.type),'"');var u={};ct(u,s),delete u.type,s=u}a.push(">"),a=a.join("")}return a=o.createElement(a),s&&(i(s)?a.className=s:c(s)?a.className=s.join(" "):Pn(a,s)),2<r.length&&function(t,e,n){function r(n){n&&e.appendChild(i(n)?t.createTextNode(n):n)}for(var o=2;o<n.length;o++){var a=n[o];!h(a)||f(a)&&0<a.nodeType?r(a):D(xn(a)?W(a):a,r)}}(o,a,r),a}function xn(t){if(t&&"number"==typeof t.length){if(f(t))return"function"==typeof t.item||"string"==typeof t.item;if(l(t))return"function"==typeof t.item}return!1}function Ln(t){var e=[];return function t(e,n,r){if(null==n)r.push("null");else{if("object"==typeof n){if(c(n)){var i=n;n=i.length,r.push("[");for(var o="",a=0;a<n;a++)r.push(o),t(e,i[a],r),o=",";return void r.push("]")}if(!(n instanceof String||n instanceof Number||n instanceof Boolean)){for(i in r.push("{"),o="",n)Object.prototype.hasOwnProperty.call(n,i)&&("function"!=typeof(a=n[i])&&(r.push(o),Un(i,r),r.push(":"),t(e,a,r),o=","));return void r.push("}")}n=n.valueOf()}switch(typeof n){case"string":Un(n,r);break;case"number":r.push(isFinite(n)&&!isNaN(n)?String(n):"null");break;case"boolean":r.push(String(n));break;case"function":r.push("null");break;default:throw Error("Unknown type: "+typeof n)}}}(new function(){},t,e),e.join("")}var Mn={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\u000b"},Fn=/\uffff/.test("￿")?/[\\"\x00-\x1f\x7f-\uffff]/g:/[\\"\x00-\x1f\x7f-\xff]/g;function Un(t,e){e.push('"',t.replace(Fn,function(t){var e=Mn[t];return e||(e="\\u"+(65536|t.charCodeAt(0)).toString(16).substr(1),Mn[t]=e),e}),'"')}function jn(){var t=rr();return Vt&&!!Jt&&11==Jt||/Edge\/\d+/.test(t)}function Wn(){return n.window&&n.window.location.href||self&&self.location&&self.location.href||""}function qn(t,e){e=e||n.window;var r="about:blank";t&&(r=En(Tn(t))),e.location.href=r}function Vn(t){return!!((t=(t||rr()).toLowerCase()).match(/android/)||t.match(/webos/)||t.match(/iphone|ipad|ipod/)||t.match(/blackberry/)||t.match(/windows phone/)||t.match(/iemobile/))}function Bn(t){t=t||n.window;try{t.close()}catch(t){}}function Hn(t,e,n){var r=Math.floor(1e9*Math.random()).toString();e=e||500,n=n||600;var i=(window.screen.availHeight-n)/2,o=(window.screen.availWidth-e)/2;for(a in e={width:e,height:n,top:0<i?i:0,left:0<o?o:0,location:!0,resizable:!0,statusbar:!0,toolbar:!1},n=rr().toLowerCase(),r&&(e.target=r,$(n,"crios/")&&(e.target="_blank")),tr(rr())==$n&&(t=t||"http://localhost",e.scrollbars=!0),n=t||"",(t=e)||(t={}),r=window,e=n instanceof wn?n:Tn(void 0!==n.href?n.href:String(n)),n=t.target||n.target,i=[],t)switch(a){case"width":case"height":case"top":case"left":i.push(a+"="+t[a]);break;case"target":case"noopener":case"noreferrer":break;default:i.push(a+"="+(t[a]?1:0))}var a=i.join(",");if((nt("iPhone")&&!nt("iPod")&&!nt("iPad")||nt("iPad")||nt("iPod"))&&r.navigator&&r.navigator.standalone&&n&&"_self"!=n?(a=r.document.createElement("A"),e instanceof wn||e instanceof wn||(e=e.ma?e.la():String(e),Cn.test(e)||(e="about:invalid#zClosurez"),e=In(e)),a.href=En(e),a.setAttribute("target",n),t.noreferrer&&a.setAttribute("rel","noreferrer"),(t=document.createEvent("MouseEvent")).initMouseEvent("click",!0,!0,r,1),a.dispatchEvent(t),a={}):t.noreferrer?(a=r.open("",n,a),t=En(e),a&&(Ht&&$(t,";")&&(t="'"+t.replace(/'/g,"%27")+"'"),a.opener=null,dn("b/12014412, meta tag with sanitized URL"),t=Rn(t='<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+B(t)+'">'),a.document.write(function(t){return t instanceof Nn&&t.constructor===Nn&&t.b===An?t.a:(S("expected object of type SafeHtml, got '"+t+"' of type "+s(t)),"type_error:SafeHtml")}(t)),a.document.close())):(a=r.open(En(e),n,a))&&t.noopener&&(a.opener=null),a)try{a.focus()}catch(t){}return a}var Gn=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;function Kn(){var t=null;return new vt(function(e){"complete"==n.document.readyState?e():(t=function(){e()},me(window,"load",t))}).s(function(e){throw _e(window,"load",t),e})}function Qn(t){return t=t||rr(),!("file:"!==ur()||!t.toLowerCase().match(/iphone|ipad|ipod|android/))}function zn(){var t=n.window;try{return!(!t||t==t.top)}catch(t){return!1}}function Xn(){return"object"!=typeof n.window&&"function"==typeof n.importScripts}function Yn(){return r.a.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":r.a.INTERNAL.hasOwnProperty("node")?"Node":Xn()?"Worker":"Browser"}function Jn(){var t=Yn();return"ReactNative"===t||"Node"===t}var $n="Firefox",Zn="Chrome";function tr(t){var e=t.toLowerCase();return $(e,"opera/")||$(e,"opr/")||$(e,"opios/")?"Opera":$(e,"iemobile")?"IEMobile":$(e,"msie")||$(e,"trident/")?"IE":$(e,"edge/")?"Edge":$(e,"firefox/")?$n:$(e,"silk/")?"Silk":$(e,"blackberry")?"Blackberry":$(e,"webos")?"Webos":!$(e,"safari/")||$(e,"chrome/")||$(e,"crios/")||$(e,"android")?!$(e,"chrome/")&&!$(e,"crios/")||$(e,"edge/")?$(e,"android")?"Android":(t=t.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&2==t.length?t[1]:"Other":Zn:"Safari"}var er={Sc:"FirebaseCore-web",Uc:"FirebaseUI-web"};function nr(t,e){e=e||[];var n,r=[],i={};for(n in er)i[er[n]]=!0;for(n=0;n<e.length;n++)void 0!==i[e[n]]&&(delete i[e[n]],r.push(e[n]));return r.sort(),(e=r).length||(e=["FirebaseCore-web"]),"Browser"===(r=Yn())?r=tr(i=rr()):"Worker"===r&&(r=tr(i=rr())+"-"+r),r+"/JsCore/"+t+"/"+e.join(",")}function rr(){return n.navigator&&n.navigator.userAgent||""}function ir(t,e){t=t.split("."),e=e||n;for(var r=0;r<t.length&&"object"==typeof e&&null!=e;r++)e=e[t[r]];return r!=t.length&&(e=void 0),e}function or(){try{var t=n.localStorage,e=pr();if(t)return t.setItem(e,"1"),t.removeItem(e),!jn()||!!n.indexedDB}catch(t){return Xn()&&!!n.indexedDB}return!1}function ar(){return(sr()||"chrome-extension:"===ur()||Qn())&&!Jn()&&or()&&!Xn()}function sr(){return"http:"===ur()||"https:"===ur()}function ur(){return n.location&&n.location.protocol||null}function cr(t){return!Vn(t=t||rr())&&tr(t)!=$n}function hr(t){return void 0===t?null:Ln(t)}function lr(t){var e,n={};for(e in t)t.hasOwnProperty(e)&&null!==t[e]&&void 0!==t[e]&&(n[e]=t[e]);return n}function fr(t){if(null!==t)return JSON.parse(t)}function pr(t){return t||Math.floor(1e9*Math.random()).toString()}function dr(t){return"Safari"!=tr(t=t||rr())&&!t.toLowerCase().match(/iphone|ipad|ipod/)}function vr(){var t=n.___jsl;if(t&&t.H)for(var e in t.H)if(t.H[e].r=t.H[e].r||[],t.H[e].L=t.H[e].L||[],t.H[e].r=t.H[e].L.concat(),t.CP)for(var r=0;r<t.CP.length;r++)t.CP[r]=null}function yr(t,e){if(t>e)throw Error("Short delay should be less than long delay!");this.a=t,this.c=e,t=rr(),e=Yn(),this.b=Vn(t)||"ReactNative"===e}function gr(){var t=n.document;return!t||void 0===t.visibilityState||"visible"==t.visibilityState}function mr(t){try{var e=new Date(parseInt(t,10));if(!isNaN(e.getTime())&&!/[^0-9]/.test(t))return e.toUTCString()}catch(t){}return null}function _r(){return!(!ir("fireauth.oauthhelper",n)&&!ir("fireauth.iframe",n))}yr.prototype.get=function(){var t=n.navigator;return!t||"boolean"!=typeof t.onLine||!sr()&&"chrome-extension:"!==ur()&&void 0===t.connection||t.onLine?this.b?this.c:this.a:Math.min(5e3,this.a)};var br,wr={};function Er(t){wr[t]||(wr[t]=!0,"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn(t))}try{var Cr={};Object.defineProperty(Cr,"abcd",{configurable:!0,enumerable:!0,value:1}),Object.defineProperty(Cr,"abcd",{configurable:!0,enumerable:!0,value:2}),br=2==Cr.abcd}catch(t){br=!1}function Tr(t,e,n){br?Object.defineProperty(t,e,{configurable:!0,enumerable:!0,value:n}):t[e]=n}function Sr(t,e){if(e)for(var n in e)e.hasOwnProperty(n)&&Tr(t,n,e[n])}function Ir(t){var e={};return Sr(e,t),e}function Nr(t){var e=t;if("object"==typeof t&&null!=t)for(var n in e="length"in t?[]:{},t)Tr(e,n,Nr(t[n]));return e}var Ar="EMAIL_SIGNIN",Rr="email",Or="newEmail",Pr="requestType",kr="email",Dr="fromEmail",xr="data",Lr="operation";function Mr(t,e){this.code=Ur+t,this.message=e||jr[t]||""}function Fr(t){var e=t&&t.code;return e?new Mr(e.substring(Ur.length),t.message):null}b(Mr,Error),Mr.prototype.D=function(){return{code:this.code,message:this.message}},Mr.prototype.toJSON=function(){return this.D()};var Ur="auth/",jr={"argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.","captcha-check-failed":"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.","code-expired":"The SMS code has expired. Please re-send the verification code to try again.","cordova-not-ready":"Cordova framework is not ready.","cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.","requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.","dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-already-in-use":"The email address is already in use by another account.","expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.","internal-error":"An internal error has occurred.","invalid-app-credential":"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.","invalid-app-id":"The mobile app identifier is not registed for the current project.","invalid-user-token":"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.","invalid-auth-event":"An internal error has occurred.","invalid-verification-code":"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.","invalid-continue-uri":"The continue URL provided in the request is invalid.","invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.","invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.","invalid-cert-hash":"The SHA-1 certificate hash provided is invalid.","invalid-credential":"The supplied auth credential is malformed or has expired.","invalid-persistence-type":"The specified persistence type is invalid. It can only be local, session or none.","invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.","invalid-oauth-client-id":"The OAuth client ID provided is either invalid or does not match the specified API key.","unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.","invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.","wrong-password":"The password is invalid or the user does not have a password.","invalid-phone-number":"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].","invalid-recipient-email":"The email corresponding to this action failed to send as the provided recipient email address is invalid.","invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-verification-id":"The verification ID used to create the phone auth credential is invalid.","missing-android-pkg-name":"An Android Package Name must be provided if the Android App is required to be installed.","auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.","missing-app-credential":"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.","missing-verification-code":"The phone auth credential was created with an empty SMS verification code.","missing-continue-uri":"A continue URL must be provided in the request.","missing-iframe-start":"An internal error has occurred.","missing-ios-bundle-id":"An iOS Bundle ID must be provided if an App Store ID is provided.","missing-phone-number":"To send verification codes, provide a phone number for the recipient.","missing-verification-id":"The phone auth credential was created with an empty verification ID.","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.","network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.","no-auth-event":"An internal error has occurred.","no-such-provider":"User was not linked to an account with the given provider.","null-user":"A null user object was provided as the argument for an operation which requires a non-null user object.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',"popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","quota-exceeded":"The project's quota for this operation has been exceeded.","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.",timeout:"The operation has timed out.","user-token-expired":"The user's credential is no longer valid. The user must sign in again.","too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","unauthorized-continue-uri":"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.","unsupported-persistence-type":"The current environment does not support the specified persistence type.","user-cancelled":"User did not grant your application the permissions it requested.","user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.","user-signed-out":"","weak-password":"The password must be 6 characters long or more.","web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."};function Wr(t){var e=t[Hr];if(void 0===e)throw new Mr("missing-continue-uri");if("string"!=typeof e||"string"==typeof e&&!e.length)throw new Mr("invalid-continue-uri");this.h=e,this.b=this.a=null,this.g=!1;var n=t[qr];if(n&&"object"==typeof n){e=n[Qr];var r=n[Gr];if(n=n[Kr],"string"==typeof e&&e.length){if(this.a=e,void 0!==r&&"boolean"!=typeof r)throw new Mr("argument-error",Gr+" property must be a boolean when specified.");if(this.g=!!r,void 0!==n&&("string"!=typeof n||"string"==typeof n&&!n.length))throw new Mr("argument-error",Kr+" property must be a non empty string when specified.");this.b=n||null}else{if(void 0!==e)throw new Mr("argument-error",Qr+" property must be a non empty string when specified.");if(void 0!==r||void 0!==n)throw new Mr("missing-android-pkg-name")}}else if(void 0!==n)throw new Mr("argument-error",qr+" property must be a non null object when specified.");if(this.f=null,(e=t[Br])&&"object"==typeof e){if("string"==typeof(e=e[zr])&&e.length)this.f=e;else if(void 0!==e)throw new Mr("argument-error",zr+" property must be a non empty string when specified.")}else if(void 0!==e)throw new Mr("argument-error",Br+" property must be a non null object when specified.");if(void 0!==(t=t[Vr])&&"boolean"!=typeof t)throw new Mr("argument-error",Vr+" property must be a boolean when specified.");this.c=!!t}var qr="android",Vr="handleCodeInApp",Br="iOS",Hr="url",Gr="installApp",Kr="minimumVersion",Qr="packageName",zr="bundleId";function Xr(t){var e={};for(var n in e.continueUrl=t.h,e.canHandleCodeInApp=t.c,(e.androidPackageName=t.a)&&(e.androidMinimumVersion=t.b,e.androidInstallApp=t.g),e.iOSBundleId=t.f,e)null===e[n]&&delete e[n];return e}var Yr=null,Jr=null;function $r(t){var e="";return function(t,e){function n(e){for(;r<t.length;){var n=t.charAt(r++),i=Jr[n];if(null!=i)return i;if(!/^[\s\xa0]*$/.test(n))throw Error("Unknown base64 encoding at char: "+n)}return e}!function(){if(!Yr){Yr={},Jr={};for(var t=0;65>t;t++)Yr[t]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(t),Jr[Yr[t]]=t,62<=t&&(Jr["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(t)]=t)}}();for(var r=0;;){var i=n(-1),o=n(0),a=n(64),s=n(64);if(64===s&&-1===i)break;e(i<<2|o>>4),64!=a&&(e(o<<4&240|a>>2),64!=s&&e(a<<6&192|s))}}(t,function(t){e+=String.fromCharCode(t)}),e}function Zr(t){this.c=t.sub,_(),this.a=t.provider_id||t.firebase&&t.firebase.sign_in_provider||null,this.b=!!t.is_anonymous||"anonymous"==this.a}function ti(t){return(t=ei(t))&&t.sub&&t.iss&&t.aud&&t.exp?new Zr(t):null}function ei(t){if(!t)return null;if(3!=(t=t.split(".")).length)return null;for(var e=(4-(t=t[1]).length%4)%4,n=0;n<e;n++)t+=".";try{return JSON.parse($r(t))}catch(t){}return null}Zr.prototype.f=function(){return this.b};var ni="oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),ri=["client_id","response_type","scope","redirect_uri","state"],ii={Tc:{Ma:"locale",Ba:500,Aa:600,Na:"facebook.com",eb:ri},Vc:{Ma:null,Ba:500,Aa:620,Na:"github.com",eb:ri},Wc:{Ma:"hl",Ba:515,Aa:680,Na:"google.com",eb:ri},bd:{Ma:"lang",Ba:485,Aa:705,Na:"twitter.com",eb:ni}};function oi(t){for(var e in ii)if(ii[e].Na==t)return ii[e];return null}function ai(t){var e={};e["facebook.com"]=li,e["google.com"]=pi,e["github.com"]=fi,e["twitter.com"]=di;var n=t&&t[ui];try{if(n)return e[n]?new e[n](t):new hi(t);if(void 0!==t[si])return new ci(t)}catch(t){}return null}var si="idToken",ui="providerId";function ci(t){var e=t[ui];if(!e&&t[si]){var n=ti(t[si]);n&&n.a&&(e=n.a)}if(!e)throw Error("Invalid additional user info!");"anonymous"!=e&&"custom"!=e||(e=null),n=!1,void 0!==t.isNewUser?n=!!t.isNewUser:"identitytoolkit#SignupNewUserResponse"===t.kind&&(n=!0),Tr(this,"providerId",e),Tr(this,"isNewUser",n)}function hi(t){ci.call(this,t),Tr(this,"profile",Nr((t=fr(t.rawUserInfo||"{}"))||{}))}function li(t){if(hi.call(this,t),"facebook.com"!=this.providerId)throw Error("Invalid provider ID!")}function fi(t){if(hi.call(this,t),"github.com"!=this.providerId)throw Error("Invalid provider ID!");Tr(this,"username",this.profile&&this.profile.login||null)}function pi(t){if(hi.call(this,t),"google.com"!=this.providerId)throw Error("Invalid provider ID!")}function di(t){if(hi.call(this,t),"twitter.com"!=this.providerId)throw Error("Invalid provider ID!");Tr(this,"username",t.screenName||null)}function vi(t){var e=Ke(t),n=Ge(e,"link"),r=Ge(Ke(n),"link");return Ge(Ke(e=Ge(e,"deep_link_id")),"link")||e||r||n||t}function yi(t,e){return t.then(function(t){if(t[Yo]){var n=ti(t[Yo]);if(!n||e!=n.c)throw new Mr("user-mismatch");return t}throw new Mr("user-mismatch")}).s(function(t){throw t&&t.code&&t.code==Ur+"user-not-found"?new Mr("user-mismatch"):t})}function gi(t,e,n){if(e.idToken||e.accessToken)e.idToken&&Tr(this,"idToken",e.idToken),e.accessToken&&Tr(this,"accessToken",e.accessToken);else{if(!e.oauthToken||!e.oauthTokenSecret)throw new Mr("internal-error","failed to construct a credential");Tr(this,"accessToken",e.oauthToken),Tr(this,"secret",e.oauthTokenSecret)}Tr(this,"providerId",t),Tr(this,"signInMethod",n)}function mi(t){var e={};return t.idToken&&(e.id_token=t.idToken),t.accessToken&&(e.access_token=t.accessToken),t.secret&&(e.oauth_token_secret=t.secret),e.providerId=t.providerId,{postBody:on(e).toString(),requestUri:"http://localhost"}}function _i(t,e){this.Ac=e||[],Sr(this,{providerId:t,isOAuthProvider:!0}),this.vb={},this.$a=(oi(t)||{}).Ma||null,this.Ya=null}function bi(t){_i.call(this,t,ri),this.a=[]}function wi(){bi.call(this,"facebook.com")}function Ei(t){if(!t)throw new Mr("argument-error","credential failed: expected 1 argument (the OAuth access token).");var e=t;return f(t)&&(e=t.accessToken),(new wi).credential(null,e)}function Ci(){bi.call(this,"github.com")}function Ti(t){if(!t)throw new Mr("argument-error","credential failed: expected 1 argument (the OAuth access token).");var e=t;return f(t)&&(e=t.accessToken),(new Ci).credential(null,e)}function Si(){bi.call(this,"google.com"),this.ta("profile")}function Ii(t,e){var n=t;return f(t)&&(n=t.idToken,e=t.accessToken),(new Si).credential(n,e)}function Ni(){_i.call(this,"twitter.com",ni)}function Ai(t,e){var n=t;if(f(n)||(n={oauthToken:t,oauthTokenSecret:e}),!n.oauthToken||!n.oauthTokenSecret)throw new Mr("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");return new gi("twitter.com",n,"twitter.com")}function Ri(t,e,n){this.a=t,this.b=e,Tr(this,"providerId","password"),Tr(this,"signInMethod",n===Oi.EMAIL_LINK_SIGN_IN_METHOD?Oi.EMAIL_LINK_SIGN_IN_METHOD:Oi.EMAIL_PASSWORD_SIGN_IN_METHOD)}function Oi(){Sr(this,{providerId:"password",isOAuthProvider:!1})}function Pi(t,e){if(!(e=ki(e)))throw new Mr("argument-error","Invalid email link!");return new Ri(t,e,Oi.EMAIL_LINK_SIGN_IN_METHOD)}function ki(t){var e=Ge((t=new function(t){this.a=Ke(t)}(t=vi(t))).a,"oobCode")||null;return"signIn"===(Ge(t.a,"mode")||null)&&e?e:null}function Di(t){if(!(t.Sa&&t.Ra||t.Fa&&t.$))throw new Mr("internal-error");this.a=t,Tr(this,"providerId","phone"),Tr(this,"signInMethod","phone")}function xi(t){return t.a.Fa&&t.a.$?{temporaryProof:t.a.Fa,phoneNumber:t.a.$}:{sessionInfo:t.a.Sa,code:t.a.Ra}}function Li(t){try{this.a=t||r.a.auth()}catch(t){throw new Mr("argument-error","Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().")}Sr(this,{providerId:"phone",isOAuthProvider:!1})}function Mi(t,e){if(!t)throw new Mr("missing-verification-id");if(!e)throw new Mr("missing-verification-code");return new Di({Sa:t,Ra:e})}function Fi(t){if(t.temporaryProof&&t.phoneNumber)return new Di({Fa:t.temporaryProof,$:t.phoneNumber});var e=t&&t.providerId;if(!e||"password"===e)return null;var n=t&&t.oauthAccessToken,r=t&&t.oauthTokenSecret;t=t&&t.oauthIdToken;try{switch(e){case"google.com":return Ii(t,n);case"facebook.com":return Ei(n);case"github.com":return Ti(n);case"twitter.com":return Ai(n,r);default:return new bi(e).credential(t,n)}}catch(t){return null}}function Ui(t){if(!t.isOAuthProvider)throw new Mr("invalid-oauth-provider")}function ji(t,e,n,r,i){if(this.b=t,this.c=e||null,this.f=n||null,this.g=r||null,this.a=i||null,!this.f&&!this.a)throw new Mr("invalid-auth-event");if(this.f&&this.a)throw new Mr("invalid-auth-event");if(this.f&&!this.g)throw new Mr("invalid-auth-event")}function Wi(t){return(t=t||{}).type?new ji(t.type,t.eventId,t.urlResponse,t.sessionId,t.error&&Fr(t.error)):null}function qi(){this.b=null,this.a=[]}b(hi,ci),b(li,hi),b(fi,hi),b(pi,hi),b(di,hi),gi.prototype.ya=function(t){return pa(t,mi(this))},gi.prototype.c=function(t,e){var n=mi(this);return n.idToken=e,da(t,n)},gi.prototype.f=function(t,e){return yi(va(t,mi(this)),e)},gi.prototype.D=function(){var t={providerId:this.providerId,signInMethod:this.signInMethod};return this.idToken&&(t.oauthIdToken=this.idToken),this.accessToken&&(t.oauthAccessToken=this.accessToken),this.secret&&(t.oauthTokenSecret=this.secret),t},_i.prototype.Da=function(t){return this.vb=ot(t),this},b(bi,_i),bi.prototype.ta=function(t){return M(this.a,t)||this.a.push(t),this},bi.prototype.Ab=function(){return W(this.a)},bi.prototype.credential=function(t,e){if(!t&&!e)throw new Mr("argument-error","credential failed: must provide the ID token and/or the access token.");return new gi(this.providerId,{idToken:t||null,accessToken:e||null},this.providerId)},b(wi,bi),Tr(wi,"PROVIDER_ID","facebook.com"),Tr(wi,"FACEBOOK_SIGN_IN_METHOD","facebook.com"),b(Ci,bi),Tr(Ci,"PROVIDER_ID","github.com"),Tr(Ci,"GITHUB_SIGN_IN_METHOD","github.com"),b(Si,bi),Tr(Si,"PROVIDER_ID","google.com"),Tr(Si,"GOOGLE_SIGN_IN_METHOD","google.com"),b(Ni,_i),Tr(Ni,"PROVIDER_ID","twitter.com"),Tr(Ni,"TWITTER_SIGN_IN_METHOD","twitter.com"),Ri.prototype.ya=function(t){return this.signInMethod==Oi.EMAIL_LINK_SIGN_IN_METHOD?Ha(t,Ca,{email:this.a,oobCode:this.b}):Ha(t,Wa,{email:this.a,password:this.b})},Ri.prototype.c=function(t,e){return this.signInMethod==Oi.EMAIL_LINK_SIGN_IN_METHOD?Ha(t,Ta,{idToken:e,email:this.a,oobCode:this.b}):Ha(t,xa,{idToken:e,email:this.a,password:this.b})},Ri.prototype.f=function(t,e){return yi(this.ya(t),e)},Ri.prototype.D=function(){return{email:this.a,password:this.b,signInMethod:this.signInMethod}},Sr(Oi,{PROVIDER_ID:"password"}),Sr(Oi,{EMAIL_LINK_SIGN_IN_METHOD:"emailLink"}),Sr(Oi,{EMAIL_PASSWORD_SIGN_IN_METHOD:"password"}),Di.prototype.ya=function(t){return t.Ta(xi(this))},Di.prototype.c=function(t,e){var n=xi(this);return n.idToken=e,Ha(t,Va,n)},Di.prototype.f=function(t,e){var n=xi(this);return n.operation="REAUTH",yi(t=Ha(t,Ba,n),e)},Di.prototype.D=function(){var t={providerId:"phone"};return this.a.Sa&&(t.verificationId=this.a.Sa),this.a.Ra&&(t.verificationCode=this.a.Ra),this.a.Fa&&(t.temporaryProof=this.a.Fa),this.a.$&&(t.phoneNumber=this.a.$),t},Li.prototype.Ta=function(t,e){var n=this.a.b;return Et(e.verify()).then(function(r){if(!i(r))throw new Mr("argument-error","An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch(e.type){case"recaptcha":return function(t,e){return Ha(t,ka,e)}(n,{phoneNumber:t,recaptchaToken:r}).then(function(t){return"function"==typeof e.reset&&e.reset(),t},function(t){throw"function"==typeof e.reset&&e.reset(),t});default:throw new Mr("argument-error",'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.')}})},Sr(Li,{PROVIDER_ID:"phone"}),Sr(Li,{PHONE_SIGN_IN_METHOD:"phone"}),ji.prototype.D=function(){return{type:this.b,eventId:this.c,urlResponse:this.f,sessionId:this.g,error:this.a&&this.a.D()}};var Vi=null;function Bi(t){var e="unauthorized-domain",n=void 0,r=Ke(t);t=r.b,"chrome-extension"==(r=r.c)?n=q("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",t):"http"==r||"https"==r?n=q("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",t):e="operation-not-supported-in-this-environment",Mr.call(this,e,n)}function Hi(t,e,n){Mr.call(this,t,n),(t=e||{}).wb&&Tr(this,"email",t.wb),t.$&&Tr(this,"phoneNumber",t.$),t.credential&&Tr(this,"credential",t.credential)}function Gi(t){if(t.code){var e=t.code||"";0==e.indexOf(Ur)&&(e=e.substring(Ur.length));var n={credential:Fi(t)};if(t.email)n.wb=t.email;else{if(!t.phoneNumber)return new Mr(e,t.message||void 0);n.$=t.phoneNumber}return new Hi(e,n,t.message)}return null}qi.prototype.subscribe=function(t){var e=this;this.a.push(t),this.b||(this.b=function(t){for(var n=0;n<e.a.length;n++)e.a[n](t)},"function"==typeof(t=ir("universalLinks.subscribe",n))&&t(null,this.b))},qi.prototype.unsubscribe=function(t){U(this.a,function(e){return e==t})},b(Bi,Mr),b(Hi,Mr),Hi.prototype.D=function(){var t={code:this.code,message:this.message};this.email&&(t.email=this.email),this.phoneNumber&&(t.phoneNumber=this.phoneNumber);var e=this.credential&&this.credential.D();return e&&ct(t,e),t},Hi.prototype.toJSON=function(){return this.D()};var Ki,Qi=/^[+a-zA-Z0-9_.!#$%&'*\/=?^`{|}~-]+@([a-zA-Z0-9-]+\.)+[a-zA-Z0-9]{2,63}$/;function zi(){}function Xi(t){return t.c||(t.c=t.b())}function Yi(){}function Ji(t){if(!t.f&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var e=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],n=0;n<e.length;n++){var r=e[n];try{return new ActiveXObject(r),t.f=r}catch(t){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed")}return t.f}function $i(){}function Zi(){this.a=new XDomainRequest,this.readyState=0,this.onreadystatechange=null,this.responseText="",this.status=-1,this.statusText="",this.a.onload=g(this.bc,this),this.a.onerror=g(this.Bb,this),this.a.onprogress=g(this.cc,this),this.a.ontimeout=g(this.fc,this)}function to(t,e){t.readyState=e,t.onreadystatechange&&t.onreadystatechange()}function eo(t,e,n){this.reset(t,e,n,void 0,void 0)}zi.prototype.c=null,b(Yi,zi),Yi.prototype.a=function(){var t=Ji(this);return t?new ActiveXObject(t):new XMLHttpRequest},Yi.prototype.b=function(){var t={};return Ji(this)&&(t[0]=!0,t[1]=!0),t},Ki=new Yi,b($i,zi),$i.prototype.a=function(){var t=new XMLHttpRequest;if("withCredentials"in t)return t;if("undefined"!=typeof XDomainRequest)return new Zi;throw Error("Unsupported browser")},$i.prototype.b=function(){return{}},(t=Zi.prototype).open=function(t,e,n){if(null!=n&&!n)throw Error("Only async requests are supported.");this.a.open(t,e)},t.send=function(t){if(t){if("string"!=typeof t)throw Error("Only string data is supported");this.a.send(t)}else this.a.send()},t.abort=function(){this.a.abort()},t.setRequestHeader=function(){},t.getResponseHeader=function(t){return"content-type"==t.toLowerCase()?this.a.contentType:""},t.bc=function(){this.status=200,this.responseText=this.a.responseText,to(this,4)},t.Bb=function(){this.status=500,this.responseText="",to(this,4)},t.fc=function(){this.Bb()},t.cc=function(){this.status=200,to(this,1)},t.getAllResponseHeaders=function(){return"content-type: "+this.a.contentType},eo.prototype.a=null;function no(t){this.f=t,this.b=this.c=this.a=null}function ro(t,e){this.name=t,this.value=e}eo.prototype.reset=function(t,e,n,r,i){"number"==typeof i||0,r||_(),delete this.a},ro.prototype.toString=function(){return this.name};var io=new ro("SEVERE",1e3),oo=new ro("WARNING",900),ao=new ro("CONFIG",700),so=new ro("FINE",500);no.prototype.log=function(t,e,n){if(t.value>=function t(e){return e.c?e.c:e.a?t(e.a):(S("Root logger has no level set."),null)}(this).value)for(l(e)&&(e=e()),t=new eo(t,String(e),this.f),n&&(t.a=n),n=this;n;)n=n.a};var uo={},co=null;function ho(t){var e;if(co||(co=new no(""),uo[""]=co,co.c=ao),!(e=uo[t])){e=new no(t);var n=t.lastIndexOf("."),r=t.substr(n+1);(n=ho(t.substr(0,n))).b||(n.b={}),n.b[r]=e,e.a=n,uo[t]=e}return e}function lo(t,e){t&&t.log(so,e,void 0)}function fo(t){this.f=t}function po(t){Ae.call(this),this.i=t,this.readyState=vo,this.status=0,this.responseText=this.statusText="",this.onreadystatechange=null,this.g=new Headers,this.b=null,this.h="GET",this.c="",this.a=!1,this.f=ho("goog.net.FetchXmlHttp")}b(fo,zi),fo.prototype.a=function(){return new po(this.f)},fo.prototype.b=function(t){return function(){return t}}({}),b(po,Ae);var vo=0;function yo(t){t.onreadystatechange&&t.onreadystatechange.call(t)}function go(t){Ae.call(this),this.headers=new Me,this.C=t||null,this.c=!1,this.w=this.a=null,this.h=this.N=this.l="",this.f=this.I=this.i=this.G=!1,this.g=0,this.u=null,this.o=mo,this.v=this.O=!1}(t=po.prototype).open=function(t,e){if(this.readyState!=vo)throw this.abort(),Error("Error reopening a connection");this.h=t,this.c=e,this.readyState=1,yo(this)},t.send=function(t){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.a=!0;var e={headers:this.g,method:this.h,credentials:void 0,cache:void 0};t&&(e.body=t),this.i.fetch(new Request(this.c,e)).then(this.ec.bind(this),this.Cb.bind(this))},t.abort=function(){this.responseText="",this.g=new Headers,this.status=0,1<=this.readyState&&this.a&&4!=this.readyState&&(this.readyState=4,this.a=!1,yo(this)),this.readyState=vo},t.ec=function(t){this.a&&(this.b||(this.b=t.headers,this.readyState=2,yo(this)),this.a&&(this.readyState=3,yo(this),this.a&&t.text().then(this.dc.bind(this,t),this.Cb.bind(this))))},t.dc=function(t,e){this.a&&(this.status=t.status,this.statusText=t.statusText,this.responseText=e,this.readyState=4,yo(this))},t.Cb=function(t){var e=this.f;e&&e.log(oo,"Failed to fetch url "+this.c,t instanceof Error?t:Error(t)),this.a&&(this.readyState=4,yo(this))},t.setRequestHeader=function(t,e){this.g.append(t,e)},t.getResponseHeader=function(t){return this.b?this.b.get(t.toLowerCase())||"":((t=this.f)&&t.log(oo,"Attempting to get response header but no headers have been received for url: "+this.c,void 0),"")},t.getAllResponseHeaders=function(){if(!this.b){var t=this.f;return t&&t.log(oo,"Attempting to get all response headers but no headers have been received for url: "+this.c,void 0),""}t=[];for(var e=this.b.entries(),n=e.next();!n.done;)n=n.value,t.push(n[0]+": "+n[1]),n=e.next();return t.join("\r\n")},b(go,Ae);var mo="";go.prototype.b=ho("goog.net.XhrIo");var _o=/^https?$/i,bo=["POST","PUT"];function wo(t,e,r,o,a){if(t.a)throw Error("[goog.net.XhrIo] Object is active with another request="+t.l+"; newUri="+e);r=r?r.toUpperCase():"GET",t.l=e,t.h="",t.N=r,t.G=!1,t.c=!0,t.a=t.C?t.C.a():Ki.a(),t.w=t.C?Xi(t.C):Xi(Ki),t.a.onreadystatechange=g(t.Fb,t);try{lo(t.b,Oo(t,"Opening Xhr")),t.I=!0,t.a.open(r,String(e),!0),t.I=!1}catch(e){return lo(t.b,Oo(t,"Error opening Xhr: "+e.message)),void Co(t,e)}e=o||"";var s=new Me(t.headers);a&&function(t,e){if(t.forEach&&"function"==typeof t.forEach)t.forEach(e,void 0);else if(h(t)||i(t))D(t,e,void 0);else for(var n=Le(t),r=xe(t),o=r.length,a=0;a<o;a++)e.call(void 0,r[a],n&&n[a],t)}(a,function(t,e){s.set(e,t)}),a=function(t){t:{for(var e=Eo,n=t.length,r=i(t)?t.split(""):t,o=0;o<n;o++)if(o in r&&e.call(void 0,r[o],o,t)){e=o;break t}e=-1}return 0>e?null:i(t)?t.charAt(e):t[e]}(s.U()),o=n.FormData&&e instanceof n.FormData,!M(bo,r)||a||o||s.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),s.forEach(function(t,e){this.a.setRequestHeader(e,t)},t),t.o&&(t.a.responseType=t.o),"withCredentials"in t.a&&t.a.withCredentials!==t.O&&(t.a.withCredentials=t.O);try{No(t),0<t.g&&(t.v=function(t){return Vt&&Zt(9)&&"number"==typeof t.timeout&&void 0!==t.ontimeout}(t.a),lo(t.b,Oo(t,"Will abort after "+t.g+"ms if incomplete, xhr2 "+t.v)),t.v?(t.a.timeout=t.g,t.a.ontimeout=g(t.Ga,t)):t.u=ke(t.Ga,t.g,t)),lo(t.b,Oo(t,"Sending request")),t.i=!0,t.a.send(e),t.i=!1}catch(e){lo(t.b,Oo(t,"Send error: "+e.message)),Co(t,e)}}function Eo(t){return"content-type"==t.toLowerCase()}function Co(t,e){t.c=!1,t.a&&(t.f=!0,t.a.abort(),t.f=!1),t.h=e,To(t),Io(t)}function To(t){t.G||(t.G=!0,t.dispatchEvent("complete"),t.dispatchEvent("error"))}function So(t){if(t.c&&void 0!==e)if(t.w[1]&&4==Ao(t)&&2==Ro(t))lo(t.b,Oo(t,"Local request error detected and ignored"));else if(t.i&&4==Ao(t))ke(t.Fb,0,t);else if(t.dispatchEvent("readystatechange"),4==Ao(t)){lo(t.b,Oo(t,"Request complete")),t.c=!1;try{var r,i=Ro(t);t:switch(i){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var o=!0;break t;default:o=!1}if(!(r=o)){var a;if(a=0===i){var s=String(t.l).match(je)[1]||null;if(!s&&n.self&&n.self.location){var u=n.self.location.protocol;s=u.substr(0,u.length-1)}a=!_o.test(s?s.toLowerCase():"")}r=a}if(r)t.dispatchEvent("complete"),t.dispatchEvent("success");else{try{var c=2<Ao(t)?t.a.statusText:""}catch(e){lo(t.b,"Can not get status: "+e.message),c=""}t.h=c+" ["+Ro(t)+"]",To(t)}}finally{Io(t)}}}function Io(t,e){if(t.a){No(t);var n=t.a,r=t.w[0]?a:null;t.a=null,t.w=null,e||t.dispatchEvent("ready");try{n.onreadystatechange=r}catch(e){(t=t.b)&&t.log(io,"Problem encountered resetting onreadystatechange: "+e.message,void 0)}}}function No(t){t.a&&t.v&&(t.a.ontimeout=null),t.u&&(n.clearTimeout(t.u),t.u=null)}function Ao(t){return t.a?t.a.readyState:0}function Ro(t){try{return 2<Ao(t)?t.a.status:-1}catch(t){return-1}}function Oo(t,e){return e+" ["+t.N+" "+t.l+" "+Ro(t)+"]"}function Po(t,e){this.g=[],this.v=t,this.u=e||null,this.f=this.a=!1,this.c=void 0,this.l=this.w=this.i=!1,this.h=0,this.b=null,this.m=0}function ko(t,e,n){t.a=!0,t.c=n,t.f=!e,Mo(t)}function Do(t){if(t.a){if(!t.l)throw new Fo(t);t.l=!1}}function xo(t,e,n,r){t.g.push([e,n,r]),t.a&&Mo(t)}function Lo(t){return L(t.g,function(t){return l(t[1])})}function Mo(t){if(t.h&&t.a&&Lo(t)){var e=t.h,r=Wo[e];r&&(n.clearTimeout(r.a),delete Wo[e]),t.h=0}t.b&&(t.b.m--,delete t.b),e=t.c;for(var i=r=!1;t.g.length&&!t.i;){var o=t.g.shift(),a=o[0],s=o[1];if(o=o[2],a=t.f?s:a)try{var u=a.call(o||t.u,e);void 0!==u&&(t.f=t.f&&(u==e||u instanceof Error),t.c=e=u),(E(e)||"function"==typeof n.Promise&&e instanceof n.Promise)&&(i=!0,t.i=!0)}catch(n){e=n,t.f=!0,Lo(t)||(r=!0)}}t.c=e,i&&(u=g(t.o,t,!0),i=g(t.o,t,!1),e instanceof Po?(xo(e,u,i),e.w=!0):e.then(u,i)),r&&(e=new jo(e),Wo[e.a]=e,t.h=e.a)}function Fo(){C.call(this)}function Uo(){C.call(this)}function jo(t){this.a=n.setTimeout(g(this.c,this),0),this.b=t}(t=go.prototype).Ga=function(){void 0!==e&&this.a&&(this.h="Timed out after "+this.g+"ms, aborting",lo(this.b,Oo(this,this.h)),this.dispatchEvent("timeout"),this.abort(8))},t.abort=function(){this.a&&this.c&&(lo(this.b,Oo(this,"Aborting")),this.c=!1,this.f=!0,this.a.abort(),this.f=!1,this.dispatchEvent("complete"),this.dispatchEvent("abort"),Io(this))},t.ua=function(){this.a&&(this.c&&(this.c=!1,this.f=!0,this.a.abort(),this.f=!1),Io(this,!0)),go.lb.ua.call(this)},t.Fb=function(){this.pa||(this.I||this.i||this.f?So(this):this.tc())},t.tc=function(){So(this)},t.getResponse=function(){try{if(!this.a)return null;if("response"in this.a)return this.a.response;switch(this.o){case mo:case"text":return this.a.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in this.a)return this.a.mozResponseArrayBuffer}var t=this.b;return t&&t.log(io,"Response type "+this.o+" is not supported on this browser",void 0),null}catch(t){return lo(this.b,"Can not get response: "+t.message),null}},Po.prototype.cancel=function(t){if(this.a)this.c instanceof Po&&this.c.cancel();else{if(this.b){var e=this.b;delete this.b,t?e.cancel(t):(e.m--,0>=e.m&&e.cancel())}this.v?this.v.call(this.u,this):this.l=!0,this.a||(t=new Uo(this),Do(this),ko(this,!1,t))}},Po.prototype.o=function(t,e){this.i=!1,ko(this,t,e)},Po.prototype.C=function(){Do(this),ko(this,!0,null)},Po.prototype.then=function(t,e,n){var r,i,o=new vt(function(t,e){r=t,i=e});return xo(this,r,function(t){t instanceof Uo?o.cancel():i(t)}),o.then(t,e,n)},w(Po),b(Fo,C),Fo.prototype.message="Deferred has already fired",Fo.prototype.name="AlreadyCalledError",b(Uo,C),Uo.prototype.message="Deferred was canceled",Uo.prototype.name="CanceledError",jo.prototype.c=function(){throw delete Wo[this.a],this.b};var Wo={};function qo(t){var e={},n=e.document||document,r=yn(t),i=document.createElement("SCRIPT"),o={Hb:i,Ga:void 0},a=new Po(Vo,o),s=null,u=null!=e.timeout?e.timeout:5e3;return 0<u&&(s=window.setTimeout(function(){Bo(i,!0);var t=new Ko(Go,"Timeout reached for loading script "+r);Do(a),ko(a,!1,t)},u),o.Ga=s),i.onload=i.onreadystatechange=function(){i.readyState&&"loaded"!=i.readyState&&"complete"!=i.readyState||(Bo(i,e.dd||!1,s),a.C())},i.onerror=function(){Bo(i,!0,s);var t=new Ko(Ho,"Error while loading script "+r);Do(a),ko(a,!1,t)},ct(o=e.attributes||{},{type:"text/javascript",charset:"UTF-8"}),Pn(i,o),i.src=yn(t),function(t){var e;return(e=(t||document).getElementsByTagName("HEAD"))&&0!=e.length?e[0]:t.documentElement}(n).appendChild(i),a}function Vo(){if(this&&this.Hb){var t=this.Hb;t&&"SCRIPT"==t.tagName&&Bo(t,!0,this.Ga)}}function Bo(t,e,r){null!=r&&n.clearTimeout(r),t.onload=a,t.onerror=a,t.onreadystatechange=a,e&&window.setTimeout(function(){t&&t.parentNode&&t.parentNode.removeChild(t)},0)}var Ho=0,Go=1;function Ko(t,e){var n="Jsloader error (code #"+t+")";e&&(n+=": "+e),C.call(this,n),this.code=t}function Qo(t){this.f=t}function zo(t,e,i){if(this.b=t,t=e||{},this.i=t.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token",this.m=t.secureTokenTimeout||Jo,this.f=ot(t.secureTokenHeaders||$o),this.g=t.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",this.h=t.firebaseTimeout||Zo,this.a=ot(t.firebaseHeaders||ta),i&&(this.a["X-Client-Version"]=i,this.f["X-Client-Version"]=i),i="Node"==Yn(),!(i=n.XMLHttpRequest||i&&r.a.INTERNAL.node&&r.a.INTERNAL.node.XMLHttpRequest)&&!Xn())throw new Mr("internal-error","The XMLHttpRequest compatibility library was not found.");this.c=void 0,Xn()?this.c=new fo(self):Jn()?this.c=new Qo(i):this.c=new $i}b(Ko,C),b(Qo,zi),Qo.prototype.a=function(){return new this.f},Qo.prototype.b=function(){return{}};var Xo,Yo="idToken",Jo=new yr(3e4,6e4),$o={"Content-Type":"application/x-www-form-urlencoded"},Zo=new yr(3e4,6e4),ta={"Content-Type":"application/json"};function ea(t,e){e?t.a["X-Firebase-Locale"]=e:delete t.a["X-Firebase-Locale"]}function na(t,e){e?(t.a["X-Client-Version"]=e,t.f["X-Client-Version"]=e):(delete t.a["X-Client-Version"],delete t.f["X-Client-Version"])}function ra(t,e,r,i,o,a,s){(function(){var t=rr();return!((t=tr(t)!=Zn?null:(t=t.match(/\sChrome\/(\d+)/i))&&2==t.length?parseInt(t[1],10):null)&&30>t||Vt&&Jt&&!(9<Jt))})()||Xn()?t=g(t.o,t):(Xo||(Xo=new vt(function(t,e){!function(t,e){if(((window.gapi||{}).client||{}).request)t();else{n[oa]=function(){((window.gapi||{}).client||{}).request?t():e(Error("CORS_UNSUPPORTED"))};var r=gn(ia,{onload:oa});!function(t,e){xo(t,null,e,void 0)}(qo(r),function(){e(Error("CORS_UNSUPPORTED"))})}}(t,e)})),t=g(t.l,t)),t(e,r,i,o,a,s)}zo.prototype.o=function(t,e,r,i,o,a){if(Xn()&&(void 0===n.fetch||void 0===n.Headers||void 0===n.Request))throw new Mr("operation-not-supported-in-this-environment","fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");var s=new go(this.c);if(a){s.g=Math.max(0,a);var u=setTimeout(function(){s.dispatchEvent("timeout")},a)}Re(s,"complete",function(){u&&clearTimeout(u);var t=null;try{t=JSON.parse(function(t){try{return t.a?t.a.responseText:""}catch(e){return lo(t.b,"Can not get responseText: "+e.message),""}}(this))||null}catch(e){t=null}e&&e(t)}),Oe(s,"ready",function(){u&&clearTimeout(u),Ut(this)}),Oe(s,"timeout",function(){u&&clearTimeout(u),Ut(this),e&&e(null)}),wo(s,t,r,i,o)};var ia=dn("https://apis.google.com/js/client.js?onload=%{onload}"),oa="__fcb"+Math.floor(1e6*Math.random()).toString();function aa(t){if(!Qi.test(t.email))throw new Mr("invalid-email")}function sa(t){"email"in t&&aa(t)}function ua(t){if(!t[Yo])throw new Mr("internal-error")}function ca(t){if(t.phoneNumber||t.temporaryProof){if(!t.phoneNumber||!t.temporaryProof)throw new Mr("internal-error")}else{if(!t.sessionInfo)throw new Mr("missing-verification-id");if(!t.code)throw new Mr("missing-verification-code")}}zo.prototype.l=function(t,e,n,r,i){var o=this;Xo.then(function(){window.gapi.client.setApiKey(o.b);var a=window.gapi.auth.getToken();window.gapi.auth.setToken(null),window.gapi.client.request({path:t,method:n,body:r,headers:i,authType:"none",callback:function(t){window.gapi.auth.setToken(a),e&&e(t)}})}).s(function(t){e&&e({error:{message:t&&t.message||"CORS_UNSUPPORTED"}})})},zo.prototype.Pa=function(){return Ha(this,La,{})},zo.prototype.mb=function(t,e){return Ha(this,Da,{idToken:t,email:e})},zo.prototype.nb=function(t,e){return Ha(this,xa,{idToken:t,password:e})};var ha={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};function la(t){if(!t.requestUri||!t.sessionId&&!t.postBody)throw new Mr("internal-error")}function fa(t){var e=null;if(t.needConfirmation?(t.code="account-exists-with-different-credential",e=Gi(t)):"FEDERATED_USER_ID_ALREADY_LINKED"==t.errorMessage?(t.code="credential-already-in-use",e=Gi(t)):"EMAIL_EXISTS"==t.errorMessage?(t.code="email-already-in-use",e=Gi(t)):t.errorMessage&&(e=Ga(t.errorMessage)),e)throw e;if(!t[Yo])throw new Mr("internal-error")}function pa(t,e){return e.returnIdpCredential=!0,Ha(t,Ma,e)}function da(t,e){return e.returnIdpCredential=!0,Ha(t,Ua,e)}function va(t,e){return e.returnIdpCredential=!0,e.autoCreate=!1,Ha(t,Fa,e)}function ya(t){if(!t.oobCode)throw new Mr("invalid-action-code")}(t=zo.prototype).ob=function(t,e){var n={idToken:t},r=[];return rt(ha,function(t,i){var o=e[i];null===o?r.push(t):i in e&&(n[i]=o)}),r.length&&(n.deleteAttribute=r),Ha(this,Da,n)},t.hb=function(t,e){return ct(t={requestType:"PASSWORD_RESET",email:t},e),Ha(this,Aa,t)},t.ib=function(t,e){return ct(t={requestType:"EMAIL_SIGNIN",email:t},e),Ha(this,Ia,t)},t.gb=function(t,e){return ct(t={requestType:"VERIFY_EMAIL",idToken:t},e),Ha(this,Na,t)},t.Ta=function(t){return Ha(this,qa,t)},t.Xa=function(t,e){return Ha(this,Pa,{oobCode:t,newPassword:e})},t.Ja=function(t){return Ha(this,ma,{oobCode:t})},t.Va=function(t){return Ha(this,ga,{oobCode:t})};var ga={endpoint:"setAccountInfo",B:ya,da:"email"},ma={endpoint:"resetPassword",B:ya,J:function(t){var e=t.requestType;if(!e||!t.email&&"EMAIL_SIGNIN"!=e)throw new Mr("internal-error")}},_a={endpoint:"signupNewUser",B:function(t){if(aa(t),!t.password)throw new Mr("weak-password")},J:ua,R:!0},ba={endpoint:"createAuthUri"},wa={endpoint:"deleteAccount",T:["idToken"]},Ea={endpoint:"setAccountInfo",T:["idToken","deleteProvider"],B:function(t){if(!c(t.deleteProvider))throw new Mr("internal-error")}},Ca={endpoint:"emailLinkSignin",T:["email","oobCode"],B:aa,J:ua,R:!0},Ta={endpoint:"emailLinkSignin",T:["idToken","email","oobCode"],B:aa,J:ua,R:!0},Sa={endpoint:"getAccountInfo"},Ia={endpoint:"getOobConfirmationCode",T:["requestType"],B:function(t){if("EMAIL_SIGNIN"!=t.requestType)throw new Mr("internal-error");aa(t)},da:"email"},Na={endpoint:"getOobConfirmationCode",T:["idToken","requestType"],B:function(t){if("VERIFY_EMAIL"!=t.requestType)throw new Mr("internal-error")},da:"email"},Aa={endpoint:"getOobConfirmationCode",T:["requestType"],B:function(t){if("PASSWORD_RESET"!=t.requestType)throw new Mr("internal-error");aa(t)},da:"email"},Ra={rb:!0,endpoint:"getProjectConfig",Eb:"GET"},Oa={rb:!0,endpoint:"getRecaptchaParam",Eb:"GET",J:function(t){if(!t.recaptchaSiteKey)throw new Mr("internal-error")}},Pa={endpoint:"resetPassword",B:ya,da:"email"},ka={endpoint:"sendVerificationCode",T:["phoneNumber","recaptchaToken"],da:"sessionInfo"},Da={endpoint:"setAccountInfo",T:["idToken"],B:sa,R:!0},xa={endpoint:"setAccountInfo",T:["idToken"],B:function(t){if(sa(t),!t.password)throw new Mr("weak-password")},J:ua,R:!0},La={endpoint:"signupNewUser",J:ua,R:!0},Ma={endpoint:"verifyAssertion",B:la,J:fa,R:!0},Fa={endpoint:"verifyAssertion",B:la,J:function(t){if(t.errorMessage&&"USER_NOT_FOUND"==t.errorMessage)throw new Mr("user-not-found");if(t.errorMessage)throw Ga(t.errorMessage);if(!t[Yo])throw new Mr("internal-error")},R:!0},Ua={endpoint:"verifyAssertion",B:function(t){if(la(t),!t.idToken)throw new Mr("internal-error")},J:fa,R:!0},ja={endpoint:"verifyCustomToken",B:function(t){if(!t.token)throw new Mr("invalid-custom-token")},J:ua,R:!0},Wa={endpoint:"verifyPassword",B:function(t){if(aa(t),!t.password)throw new Mr("wrong-password")},J:ua,R:!0},qa={endpoint:"verifyPhoneNumber",B:ca,J:ua},Va={endpoint:"verifyPhoneNumber",B:function(t){if(!t.idToken)throw new Mr("internal-error");ca(t)},J:function(t){if(t.temporaryProof)throw t.code="credential-already-in-use",Gi(t);ua(t)}},Ba={Tb:{USER_NOT_FOUND:"user-not-found"},endpoint:"verifyPhoneNumber",B:ca,J:ua};function Ha(t,e,n){if(!function(t,e){if(!e||!e.length)return!0;if(!t)return!1;for(var n=0;n<e.length;n++){var r=t[e[n]];if(void 0===r||null===r||""===r)return!1}return!0}(n,e.T))return Ct(new Mr("internal-error"));var r,i=e.Eb||"POST";return Et(n).then(e.B).then(function(){return e.R&&(n.returnSecureToken=!0),function(t,e,n,r,i,o){var a=Ke(t.g+e);He(a,"key",t.b),o&&He(a,"cb",_().toString());var s="GET"==n;if(s)for(var u in r)r.hasOwnProperty(u)&&He(a,u,r[u]);return new vt(function(e,o){ra(t,a.toString(),function(t){t?t.error?o(Ka(t,i||{})):e(t):o(new Mr("network-request-failed"))},n,s?void 0:Ln(lr(r)),t.a,t.h.get())})}(t,e.endpoint,i,n,e.Tb,e.rb||!1)}).then(function(t){return r=t}).then(e.J).then(function(){if(!e.da)return r;if(!(e.da in r))throw new Mr("internal-error");return r[e.da]})}function Ga(t){return Ka({error:{errors:[{message:t}],code:400,message:t}})}function Ka(t,e){var n=(t.error&&t.error.errors&&t.error.errors[0]||{}).reason||"",r={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(n=r[n]?new Mr(r[n]):null)return n;for(var i in n=t.error&&t.error.message||"",ct(r={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_RECIPIENT_EMAIL:"invalid-recipient-email",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",INVALID_APP_ID:"invalid-app-id",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled",CAPTCHA_CHECK_FAILED:"captcha-check-failed",INVALID_APP_CREDENTIAL:"invalid-app-credential",INVALID_CODE:"invalid-verification-code",INVALID_PHONE_NUMBER:"invalid-phone-number",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_APP_CREDENTIAL:"missing-app-credential",MISSING_CODE:"missing-verification-code",MISSING_PHONE_NUMBER:"missing-phone-number",MISSING_SESSION_INFO:"missing-verification-id",QUOTA_EXCEEDED:"quota-exceeded",SESSION_EXPIRED:"code-expired",INVALID_CONTINUE_URI:"invalid-continue-uri",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",MISSING_IOS_BUNDLE_ID:"missing-ios-bundle-id",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",INVALID_CERT_HASH:"invalid-cert-hash"},e||{}),e=(e=n.match(/^[^\s]+\s*:\s*(.*)$/))&&1<e.length?e[1]:void 0,r)if(0===n.indexOf(i))return new Mr(r[i],e);return!e&&t&&(e=hr(t)),new Mr("internal-error",e)}var Qa,za={Yc:{Za:"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",fb:"https://securetoken.googleapis.com/v1/token",id:"p"},$c:{Za:"https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",fb:"https://staging-securetoken.sandbox.googleapis.com/v1/token",id:"s"},ad:{Za:"https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",fb:"https://test-securetoken.sandbox.googleapis.com/v1/token",id:"t"}};function Xa(t){for(var e in za)if(za[e].id===t)return{firebaseEndpoint:(t=za[e]).Za,secureTokenEndpoint:t.fb};return null}function Ya(t){this.b=t,this.a=null,this.bb=function(t){return(es||(es=new vt(function(t,e){function r(){vr(),ir("gapi.load")("gapi.iframes",{callback:t,ontimeout:function(){vr(),e(Error("Network Error"))},timeout:Za.get()})}if(ir("gapi.iframes.Iframe"))t();else if(ir("gapi.load"))r();else{var i="__iframefcb"+Math.floor(1e6*Math.random()).toString();n[i]=function(){ir("gapi.load")?r():e(Error("Network Error"))},Et(qo(i=gn($a,{onload:i}))).s(function(){e(Error("Network Error"))})}}).s(function(t){throw es=null,t}))).then(function(){return new vt(function(e,n){ir("gapi.iframes.getContext")().open({where:document.body,url:t.b,messageHandlersFilter:ir("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),attributes:{style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},dontclear:!0},function(r){function i(){clearTimeout(o),e()}t.a=r,t.a.restyle({setHideOnLeave:!1});var o=setTimeout(function(){n(Error("Network Error"))},ts.get());r.ping(i).then(i,function(){n(Error("Network Error"))})})})})}(this)}Qa=Xa("__EID__")?"__EID__":void 0;var Ja,$a=dn("https://apis.google.com/js/api.js?onload=%{onload}"),Za=new yr(3e4,6e4),ts=new yr(5e3,15e3),es=null;function ns(t,e,n){this.i=t,this.g=e,this.h=n,this.f=null,this.a=Qe(this.i,"/__/auth/iframe"),He(this.a,"apiKey",this.g),He(this.a,"appName",this.h),this.b=null,this.c=[]}function rs(t,e,n,r,i){this.o=t,this.l=e,this.c=n,this.m=r,this.h=this.g=this.i=null,this.a=i,this.f=null}function is(t){try{return r.a.app(t).auth().xa()}catch(t){return[]}}function os(t,e,n,r,i){this.l=t,this.f=e,this.b=n,this.c=r||null,this.h=i||null,this.o=this.u=this.v=null,this.g=[],this.m=this.a=null}function as(t){var e=Wn();return function(t){return Ha(t,Ra,{}).then(function(t){return t.authorizedDomains||[]})}(t).then(function(t){t:{var n=Ke(e),r=n.c;n=n.b;for(var i=0;i<t.length;i++){var o=t[i],a=n,s=r;if(0==o.indexOf("chrome-extension://")?a=Ke(o).b==a&&"chrome-extension"==s:"http"!=s&&"https"!=s?a=!1:Gn.test(o)?a=a==o:(o=o.split(".").join("\\."),a=new RegExp("^(.+\\."+o+"|"+o+")$","i").test(a)),a){t=!0;break t}}t=!1}if(!t)throw new Bi(Wn())})}function ss(t){return t.m?t.m:(t.m=Kn().then(function(){if(!t.u){var e=t.c,n=t.h,r=is(t.b),i=new ns(t.l,t.f,t.b);i.f=e,i.b=n,i.c=W(r||[]),t.u=i.toString()}t.i=new Ya(t.u),function(t){if(!t.i)throw Error("IfcHandler must be initialized!");!function(t,e){t.bb.then(function(){t.a.register("authEvent",e,ir("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))})}(t.i,function(e){var n={};if(e&&e.authEvent){var r=!1;for(e=Wi(e.authEvent),n=0;n<t.g.length;n++)r=t.g[n](e)||r;return(n={}).status=r?"ACK":"ERROR",Et(n)}return n.status="ERROR",Et(n)})}(t)}),t.m)}function us(t){return t.o||(t.v=t.c?nr(t.c,is(t.b)):null,t.o=new zo(t.f,Xa(t.h),t.v)),t.o}function cs(t,e,n,r,i,o,a,s,u,c){return(t=new rs(t,e,n,r,i)).i=o,t.g=a,t.h=s,t.b=ot(u||null),t.f=c,t.toString()}function hs(t){if(this.a=t||r.a.INTERNAL.reactNative&&r.a.INTERNAL.reactNative.AsyncStorage,!this.a)throw new Mr("internal-error","The React Native compatibility library was not found.");this.type="asyncStorage"}function ls(){if(!ds())throw new Mr("web-storage-unsupported");this.f={},this.a=[],this.b=0,this.g=n.indexedDB,this.type="indexedDB"}function fs(t){return new vt(function(e,n){var r=t.g.open("firebaseLocalStorageDb",1);r.onerror=function(t){try{t.preventDefault()}catch(t){}n(Error(t.target.error))},r.onupgradeneeded=function(t){t=t.target.result;try{t.createObjectStore("firebaseLocalStorage",{keyPath:"fbase_key"})}catch(t){n(t)}},r.onsuccess=function(r){(r=r.target.result).objectStoreNames.contains("firebaseLocalStorage")?e(r):function(t){return new vt(function(e,n){var r=t.g.deleteDatabase("firebaseLocalStorageDb");r.onsuccess=function(){e()},r.onerror=function(t){n(Error(t.target.error))}})}(t).then(function(){return fs(t)}).then(function(t){e(t)}).s(function(t){n(t)})}})}function ps(t){return t.h||(t.h=fs(t)),t.h}function ds(){try{return!!n.indexedDB}catch(t){return!1}}function vs(t){return t.objectStore("firebaseLocalStorage")}function ys(t,e){return t.transaction(["firebaseLocalStorage"],e?"readwrite":"readonly")}function gs(t){return new vt(function(e,n){t.onsuccess=function(t){t&&t.target?e(t.target.result):e()},t.onerror=function(t){n(Error(t.target.errorCode))}})}function ms(t){var e=this,n=null;this.a=[],this.type="indexedDB",this.c=t,this.b=Et().then(function(){if(ds()){var t=pr(),r="__sak"+t;return Ja||(Ja=new ls),(n=Ja).set(r,t).then(function(){return n.get(r)}).then(function(e){if(e!==t)throw Error("indexedDB not supported!");return n.P(r)}).then(function(){return n}).s(function(){return e.c})}return e.c}).then(function(t){return e.type=t.type,t.Y(function(t){D(e.a,function(e){e(t)})}),t})}function _s(){this.a={},this.type="inMemory"}function bs(){if(!function(){var t="Node"==Yn();if(!(t=ws()||t&&r.a.INTERNAL.node&&r.a.INTERNAL.node.localStorage))return!1;try{return t.setItem("__sak","1"),t.removeItem("__sak"),!0}catch(t){return!1}}()){if("Node"==Yn())throw new Mr("internal-error","The LocalStorage compatibility library was not found.");throw new Mr("web-storage-unsupported")}this.a=ws()||r.a.INTERNAL.node.localStorage,this.type="localStorage"}function ws(){try{var t=n.localStorage,e=pr();return t&&(t.setItem(e,"1"),t.removeItem(e)),t}catch(t){return null}}function Es(){this.type="nullStorage"}function Cs(){if(!function(){var t="Node"==Yn();if(!(t=Ts()||t&&r.a.INTERNAL.node&&r.a.INTERNAL.node.sessionStorage))return!1;try{return t.setItem("__sak","1"),t.removeItem("__sak"),!0}catch(t){return!1}}()){if("Node"==Yn())throw new Mr("internal-error","The SessionStorage compatibility library was not found.");throw new Mr("web-storage-unsupported")}this.a=Ts()||r.a.INTERNAL.node.sessionStorage,this.type="sessionStorage"}function Ts(){try{var t=n.sessionStorage,e=pr();return t&&(t.setItem(e,"1"),t.removeItem(e)),t}catch(t){return null}}ns.prototype.toString=function(){return this.f?He(this.a,"v",this.f):an(this.a.a,"v"),this.b?He(this.a,"eid",this.b):an(this.a.a,"eid"),this.c.length?He(this.a,"fw",this.c.join(",")):an(this.a.a,"fw"),this.a.toString()},rs.prototype.toString=function(){var t=Qe(this.o,"/__/auth/handler");if(He(t,"apiKey",this.l),He(t,"appName",this.c),He(t,"authType",this.m),this.a.isOAuthProvider){var e=this.a;try{var n=r.a.app(this.c).auth().ea()}catch(t){n=null}for(var i in e.Ya=n,He(t,"providerId",this.a.providerId),n=lr((e=this.a).vb))n[i]=n[i].toString();i=e.Ac,n=ot(n);for(var o=0;o<i.length;o++){var a=i[o];a in n&&delete n[a]}e.$a&&e.Ya&&!n[e.$a]&&(n[e.$a]=e.Ya),it(n)||He(t,"customParameters",hr(n))}if("function"==typeof this.a.Ab&&((e=this.a.Ab()).length&&He(t,"scopes",e.join(","))),this.i?He(t,"redirectUrl",this.i):an(t.a,"redirectUrl"),this.g?He(t,"eventId",this.g):an(t.a,"eventId"),this.h?He(t,"v",this.h):an(t.a,"v"),this.b)for(var s in this.b)this.b.hasOwnProperty(s)&&!Ge(t,s)&&He(t,s,this.b[s]);return this.f?He(t,"eid",this.f):an(t.a,"eid"),(s=is(this.c)).length&&He(t,"fw",s.join(",")),t.toString()},(t=os.prototype).Ea=function(t,e,n){var r=new Mr("popup-closed-by-user"),i=new Mr("web-storage-unsupported"),o=this,a=!1;return this.ga().then(function(){(function(t){var e={type:"webStorageSupport"};return ss(t).then(function(){return function(t,e){return t.bb.then(function(){return new vt(function(n){t.a.send(e.type,e,n,ir("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))})})}(t.i,e)}).then(function(t){if(t&&t.length&&void 0!==t[0].webStorageSupport)return t[0].webStorageSupport;throw Error()})})(o).then(function(n){n||(t&&Bn(t),e(i),a=!0)})}).s(function(){}).then(function(){if(!a)return function(t){return new vt(function(e){return function n(){De(2e3).then(function(){if(t&&!t.closed)return n();e()})}()})}(t)}).then(function(){if(!a)return De(n).then(function(){e(r)})})},t.Ib=function(){var t=rr();return!cr(t)&&!dr(t)},t.Db=function(){return!1},t.zb=function(t,e,n,r,i,o,a){if(!t)return Ct(new Mr("popup-blocked"));if(a&&!cr())return this.ga().s(function(e){Bn(t),i(e)}),r(),Et();this.a||(this.a=as(us(this)));var s=this;return this.a.then(function(){var e=s.ga().s(function(e){throw Bn(t),i(e),e});return r(),e}).then(function(){(Ui(n),a)||qn(cs(s.l,s.f,s.b,e,n,null,o,s.c,void 0,s.h),t)}).s(function(t){throw"auth/network-request-failed"==t.code&&(s.a=null),t})},t.Ca=function(t,e,n){this.a||(this.a=as(us(this)));var r=this;return this.a.then(function(){Ui(e),qn(cs(r.l,r.f,r.b,t,e,Wn(),n,r.c,void 0,r.h))}).s(function(t){throw"auth/network-request-failed"==t.code&&(r.a=null),t})},t.ga=function(){var t=this;return ss(this).then(function(){return t.i.bb}).s(function(){throw t.a=null,new Mr("network-request-failed")})},t.Mb=function(){return!0},t.va=function(t){this.g.push(t)},t.Ka=function(t){U(this.g,function(e){return e==t})},(t=hs.prototype).get=function(t){return Et(this.a.getItem(t)).then(function(t){return t&&fr(t)})},t.set=function(t,e){return Et(this.a.setItem(t,hr(e)))},t.P=function(t){return Et(this.a.removeItem(t))},t.Y=function(){},t.ca=function(){},(t=ls.prototype).set=function(t,e){var n,r=!1,i=this;return ps(this).then(function(e){return gs((e=vs(ys(n=e,!0))).get(t))}).then(function(o){var a=vs(ys(n,!0));return o?(o.value=e,gs(a.put(o))):(i.b++,r=!0,(o={}).fbase_key=t,o.value=e,gs(a.add(o)))}).then(function(){i.f[t]=e}).ia(function(){r&&i.b--})},t.get=function(t){return ps(this).then(function(e){return gs(vs(ys(e,!1)).get(t))}).then(function(t){return t&&t.value})},t.P=function(t){var e=!1,n=this;return ps(this).then(function(r){return e=!0,n.b++,gs(vs(ys(r,!0)).delete(t))}).then(function(){delete n.f[t]}).ia(function(){e&&n.b--})},t.Kc=function(){var t=this;return ps(this).then(function(t){var e=vs(ys(t,!1));return e.getAll?gs(e.getAll()):new vt(function(t,n){var r=[],i=e.openCursor();i.onsuccess=function(e){(e=e.target.result)?(r.push(e.value),e.continue()):t(r)},i.onerror=function(t){n(Error(t.target.errorCode))}})}).then(function(e){var n={},r=[];if(0==t.b){for(r=0;r<e.length;r++)n[e[r].fbase_key]=e[r].value;r=function t(e,n){var r,i=[];for(r in e)r in n?typeof e[r]!=typeof n[r]?i.push(r):"object"==typeof e[r]&&null!=e[r]&&null!=n[r]?0<t(e[r],n[r]).length&&i.push(r):e[r]!==n[r]&&i.push(r):i.push(r);for(r in n)r in e||i.push(r);return i}(t.f,n),t.f=n}return r})},t.Y=function(t){0==this.a.length&&function(t){t.c&&t.c.cancel("STOP_EVENT"),function e(){t.c=De(800).then(g(t.Kc,t)).then(function(e){0<e.length&&D(t.a,function(t){t(e)})}).then(e).s(function(t){"STOP_EVENT"!=t.message&&e()});return t.c}()}(this),this.a.push(t)},t.ca=function(t){U(this.a,function(e){return e==t}),0==this.a.length&&this.c&&this.c.cancel("STOP_EVENT")},(t=ms.prototype).get=function(t){return this.b.then(function(e){return e.get(t)})},t.set=function(t,e){return this.b.then(function(n){return n.set(t,e)})},t.P=function(t){return this.b.then(function(e){return e.P(t)})},t.Y=function(t){this.a.push(t)},t.ca=function(t){U(this.a,function(e){return e==t})},(t=_s.prototype).get=function(t){return Et(this.a[t])},t.set=function(t,e){return this.a[t]=e,Et()},t.P=function(t){return delete this.a[t],Et()},t.Y=function(){},t.ca=function(){},(t=bs.prototype).get=function(t){var e=this;return Et().then(function(){return fr(e.a.getItem(t))})},t.set=function(t,e){var n=this;return Et().then(function(){var r=hr(e);null===r?n.P(t):n.a.setItem(t,r)})},t.P=function(t){var e=this;return Et().then(function(){e.a.removeItem(t)})},t.Y=function(t){n.window&&ye(n.window,"storage",t)},t.ca=function(t){n.window&&_e(n.window,"storage",t)},(t=Es.prototype).get=function(){return Et(null)},t.set=function(){return Et()},t.P=function(){return Et()},t.Y=function(){},t.ca=function(){},(t=Cs.prototype).get=function(t){var e=this;return Et().then(function(){return fr(e.a.getItem(t))})},t.set=function(t,e){var n=this;return Et().then(function(){var r=hr(e);null===r?n.P(t):n.a.setItem(t,r)})},t.P=function(t){var e=this;return Et().then(function(){e.a.removeItem(t)})},t.Y=function(){},t.ca=function(){};var Ss,Is,Ns={A:bs,Qa:Cs},As={A:bs,Qa:Cs},Rs={A:hs,Qa:Es},Os={A:bs,Qa:Es},Ps={Xc:"local",NONE:"none",Zc:"session"};function ks(){var t=!(dr(rr())||!zn()),e=cr(),r=or();this.o=t,this.h=e,this.m=r,this.a={},Ss||(Ss=new function(){var t={};t.Browser=Ns,t.Node=As,t.ReactNative=Rs,t.Worker=Os,this.a=t[Yn()]}),t=Ss;try{this.g=!jn()&&_r()||!n.indexedDB?new t.a.A:new ms(Xn()?new _s:new t.a.A)}catch(t){this.g=new _s,this.h=!0}try{this.i=new t.a.Qa}catch(t){this.i=new _s}this.l=new _s,this.f=g(this.Lb,this),this.b={}}function Ds(){return Is||(Is=new ks),Is}function xs(t,e){switch(e){case"session":return t.i;case"none":return t.l;default:return t.g}}function Ls(t,e){return"firebase:"+t.name+(e?":"+e:"")}function Ms(t,e,n){return n=Ls(e,n),"local"==e.A&&(t.b[n]=null),xs(t,e.A).P(n)}function Fs(t){t.c&&(clearInterval(t.c),t.c=null)}(t=ks.prototype).get=function(t,e){return xs(this,t.A).get(Ls(t,e))},t.set=function(t,e,n){var r=Ls(t,n),i=this,o=xs(this,t.A);return o.set(r,e).then(function(){return o.get(r)}).then(function(e){"local"==t.A&&(i.b[r]=e)})},t.addListener=function(t,e,r){t=Ls(t,e),this.m&&(this.b[t]=n.localStorage.getItem(t)),it(this.a)&&(xs(this,"local").Y(this.f),this.h||(jn()||!_r())&&n.indexedDB||!this.m||function(t){Fs(t),t.c=setInterval(function(){for(var e in t.a){var r=n.localStorage.getItem(e),i=t.b[e];r!=i&&(t.b[e]=r,r=new ae({type:"storage",key:e,target:window,oldValue:i,newValue:r,a:!0}),t.Lb(r))}},1e3)}(this)),this.a[t]||(this.a[t]=[]),this.a[t].push(r)},t.removeListener=function(t,e,n){t=Ls(t,e),this.a[t]&&(U(this.a[t],function(t){return t==n}),0==this.a[t].length&&delete this.a[t]),it(this.a)&&(xs(this,"local").ca(this.f),Fs(this))},t.Lb=function(t){if(t&&t.f){var e=t.a.key;if(null==e)for(var r in this.a){var i=this.b[r];void 0===i&&(i=null);var o=n.localStorage.getItem(r);o!==i&&(this.b[r]=o,this.Wa(r))}else if(0==e.indexOf("firebase:")&&this.a[e]){if(void 0!==t.a.a?xs(this,"local").ca(this.f):Fs(this),this.o)if(r=n.localStorage.getItem(e),(i=t.a.newValue)!==r)null!==i?n.localStorage.setItem(e,i):n.localStorage.removeItem(e);else if(this.b[e]===i&&void 0===t.a.a)return;var a=this;r=function(){void 0===t.a.a&&a.b[e]===n.localStorage.getItem(e)||(a.b[e]=n.localStorage.getItem(e),a.Wa(e))},Vt&&Jt&&10==Jt&&n.localStorage.getItem(e)!==t.a.newValue&&t.a.newValue!==t.a.oldValue?setTimeout(r,10):r()}}else D(t,g(this.Wa,this))},t.Wa=function(t){this.a[t]&&D(this.a[t],function(t){t()})};var Us,js={name:"authEvent",A:"local"};function Ws(t,e){this.b=-1,this.b=qs,this.f=n.Uint8Array?new Uint8Array(this.b):Array(this.b),this.g=this.c=0,this.a=[],this.i=t,this.h=e,this.m=n.Int32Array?new Int32Array(64):Array(64),void 0!==Us||(Us=n.Int32Array?new Int32Array(zs):zs),this.reset()}b(Ws,function(){this.b=-1});for(var qs=64,Vs=qs-1,Bs=[],Hs=0;Hs<Vs;Hs++)Bs[Hs]=0;var Gs=j(128,Bs);function Ks(t){for(var e=t.f,n=t.m,r=0,i=0;i<e.length;)n[r++]=e[i]<<24|e[i+1]<<16|e[i+2]<<8|e[i+3],i=4*r;for(e=16;64>e;e++){i=0|n[e-15],r=0|n[e-2];var o=(0|n[e-16])+((i>>>7|i<<25)^(i>>>18|i<<14)^i>>>3)|0,a=(0|n[e-7])+((r>>>17|r<<15)^(r>>>19|r<<13)^r>>>10)|0;n[e]=o+a|0}r=0|t.a[0],i=0|t.a[1];var s=0|t.a[2],u=0|t.a[3],c=0|t.a[4],h=0|t.a[5],l=0|t.a[6];for(o=0|t.a[7],e=0;64>e;e++){var f=((r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10))+(r&i^r&s^i&s)|0;a=(o=o+((c>>>6|c<<26)^(c>>>11|c<<21)^(c>>>25|c<<7))|0)+((a=(a=c&h^~c&l)+(0|Us[e])|0)+(0|n[e])|0)|0,o=l,l=h,h=c,c=u+a|0,u=s,s=i,i=r,r=a+f|0}t.a[0]=t.a[0]+r|0,t.a[1]=t.a[1]+i|0,t.a[2]=t.a[2]+s|0,t.a[3]=t.a[3]+u|0,t.a[4]=t.a[4]+c|0,t.a[5]=t.a[5]+h|0,t.a[6]=t.a[6]+l|0,t.a[7]=t.a[7]+o|0}function Qs(t,e,n){void 0===n&&(n=e.length);var r=0,o=t.c;if(i(e))for(;r<n;)t.f[o++]=e.charCodeAt(r++),o==t.b&&(Ks(t),o=0);else{if(!h(e))throw Error("message must be string or array");for(;r<n;){var a=e[r++];if(!("number"==typeof a&&0<=a&&255>=a&&a==(0|a)))throw Error("message must be a byte array");t.f[o++]=a,o==t.b&&(Ks(t),o=0)}}t.c=o,t.g+=n}Ws.prototype.reset=function(){this.g=this.c=0,this.a=n.Int32Array?new Int32Array(this.h):W(this.h)};var zs=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function Xs(){Ws.call(this,8,Ys)}b(Xs,Ws);var Ys=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function Js(t,e,n,r,i){this.l=t,this.i=e,this.m=n,this.o=r||null,this.u=i||null,this.h=e+":"+n,this.v=new function(){this.a=Ds()},this.g=new function(t){this.a=t,this.b=Ds()}(this.h),this.f=null,this.b=[],this.a=this.c=null}function $s(t){return new Mr("invalid-cordova-configuration",t)}function Zs(t){var e=new Xs;Qs(e,t),t=[];var n=8*e.g;56>e.c?Qs(e,Gs,56-e.c):Qs(e,Gs,e.b-(e.c-56));for(var r=63;56<=r;r--)e.f[r]=255&n,n/=256;for(Ks(e),r=n=0;r<e.i;r++)for(var i=24;0<=i;i-=8)t[n++]=e.a[r]>>i&255;return function(t){return x(t,function(t){return 1<(t=t.toString(16)).length?t:"0"+t}).join("")}(t)}function tu(t,e){for(var n=0;n<t.b.length;n++)try{t.b[n](e)}catch(t){}}function eu(t){return t.f||(t.f=t.ga().then(function(){return new vt(function(e){t.va(function n(r){return e(r),t.Ka(n),!1}),function(t){function e(e){i=!0,o&&o.cancel(),nu(t).then(function(n){var i=r;if(n&&e&&e.url){var o=null;-1!=(i=vi(e.url)).indexOf("/__/auth/callback")&&(o=(o="object"==typeof(o=fr(Ge(o=Ke(i),"firebaseError")||null))?Fr(o):null)?new ji(n.b,n.c,null,null,o):new ji(n.b,n.c,i,n.g)),i=o||r}tu(t,i)})}var r=new ji("unknown",null,null,null,new Mr("no-auth-event")),i=!1,o=De(500).then(function(){return nu(t).then(function(){i||tu(t,r)})}),a=n.handleOpenURL;n.handleOpenURL=function(t){if(0==t.toLowerCase().indexOf(ir("BuildInfo.packageName",n).toLowerCase()+"://")&&e({url:t}),"function"==typeof a)try{a(t)}catch(t){console.error(t)}},Vi||(Vi=new qi),Vi.subscribe(e)}(t)})})),t.f}function nu(t){var e=null;return function(t){return t.b.get(js,t.a).then(function(t){return Wi(t)})}(t.g).then(function(n){return e=n,Ms((n=t.g).b,js,n.a)}).then(function(){return e})}(t=Js.prototype).ga=function(){return this.za?this.za:this.za=(Qn(void 0)?Kn().then(function(){return new vt(function(t,e){var r=n.document,i=setTimeout(function(){e(Error("Cordova framework is not ready."))},1e3);r.addEventListener("deviceready",function(){clearTimeout(i),t()},!1)})}):Ct(Error("Cordova must run in an Android or iOS file scheme."))).then(function(){if("function"!=typeof ir("universalLinks.subscribe",n))throw $s("cordova-universal-links-plugin is not installed");if(void 0===ir("BuildInfo.packageName",n))throw $s("cordova-plugin-buildinfo is not installed");if("function"!=typeof ir("cordova.plugins.browsertab.openUrl",n))throw $s("cordova-plugin-browsertab is not installed");if("function"!=typeof ir("cordova.InAppBrowser.open",n))throw $s("cordova-plugin-inappbrowser is not installed")},function(){throw new Mr("cordova-not-ready")})},t.Ea=function(t,e){return e(new Mr("operation-not-supported-in-this-environment")),Et()},t.zb=function(){return Ct(new Mr("operation-not-supported-in-this-environment"))},t.Mb=function(){return!1},t.Ib=function(){return!0},t.Db=function(){return!0},t.Ca=function(t,e,r){if(this.c)return Ct(new Mr("redirect-operation-pending"));var i=this,o=n.document,a=null,s=null,u=null,c=null;return this.c=Et().then(function(){return Ui(e),eu(i)}).then(function(){return function(t,e,r,i){var o=function(){for(var t=20,e=[];0<t;)e.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),t--;return e.join("")}(),a=new ji(e,i,null,o,new Mr("no-auth-event")),s=ir("BuildInfo.packageName",n);if("string"!=typeof s)throw new Mr("invalid-cordova-configuration");var u=ir("BuildInfo.displayName",n),c={};if(rr().toLowerCase().match(/iphone|ipad|ipod/))c.ibi=s;else{if(!rr().toLowerCase().match(/android/))return Ct(new Mr("operation-not-supported-in-this-environment"));c.apn=s}u&&(c.appDisplayName=u),o=Zs(o),c.sessionId=o;var h=cs(t.l,t.i,t.m,e,r,null,i,t.o,c,t.u);return t.ga().then(function(){var e=t.h;return t.v.a.set(js,a.D(),e)}).then(function(){var e=ir("cordova.plugins.browsertab.isAvailable",n);if("function"!=typeof e)throw new Mr("invalid-cordova-configuration");var r=null;e(function(e){if(e){if("function"!=typeof(r=ir("cordova.plugins.browsertab.openUrl",n)))throw new Mr("invalid-cordova-configuration");r(h)}else{if("function"!=typeof(r=ir("cordova.InAppBrowser.open",n)))throw new Mr("invalid-cordova-configuration");e=!(!(e=rr()).match(/(iPad|iPhone|iPod).*OS 7_\d/i)&&!e.match(/(iPad|iPhone|iPod).*OS 8_\d/i)),t.a=r(h,e?"_blank":"_system","location=yes")}})})}(i,t,e,r)}).then(function(){return new vt(function(t,e){s=function(){var e=ir("cordova.plugins.browsertab.close",n);return t(),"function"==typeof e&&e(),i.a&&"function"==typeof i.a.close&&(i.a.close(),i.a=null),!1},i.va(s),u=function(){a||(a=De(2e3).then(function(){e(new Mr("redirect-cancelled-by-user"))}))},c=function(){gr()&&u()},o.addEventListener("resume",u,!1),rr().toLowerCase().match(/android/)||o.addEventListener("visibilitychange",c,!1)}).s(function(t){return nu(i).then(function(){throw t})})}).ia(function(){u&&o.removeEventListener("resume",u,!1),c&&o.removeEventListener("visibilitychange",c,!1),a&&a.cancel(),s&&i.Ka(s),i.c=null})},t.va=function(t){this.b.push(t),eu(this).s(function(e){"auth/invalid-cordova-configuration"===e.code&&(e=new ji("unknown",null,null,null,new Mr("no-auth-event")),t(e))})},t.Ka=function(t){U(this.b,function(e){return e==t})};var ru={name:"pendingRedirect",A:"session"};function iu(t){return Ms(t.b,ru,t.a)}function ou(t,e,n){this.v=t,this.m=e,this.l=n,this.h=[],this.f=!1,this.i=g(this.o,this),this.c=new vu,this.u=new _u,this.g=new function(t){this.a=t,this.b=Ds()}(this.m+":"+this.l),this.b={},this.b.unknown=this.c,this.b.signInViaRedirect=this.c,this.b.linkViaRedirect=this.c,this.b.reauthViaRedirect=this.c,this.b.signInViaPopup=this.u,this.b.linkViaPopup=this.u,this.b.reauthViaPopup=this.u,this.a=au(this.v,this.m,this.l,Qa)}function au(t,e,n,i){var o=r.a.SDK_VERSION||null;return Qn()?new Js(t,e,n,o,i):new os(t,e,n,o,i)}function su(t){t.f||(t.f=!0,t.a.va(t.i));var e=t.a;return t.a.ga().s(function(n){throw t.a==e&&t.reset(),n})}function uu(t){t.a.Ib()&&su(t).s(function(e){var n=new ji("unknown",null,null,null,new Mr("operation-not-supported-in-this-environment"));fu(e)&&t.o(n)}),t.a.Db()||yu(t.c)}ou.prototype.reset=function(){this.f=!1,this.a.Ka(this.i),this.a=au(this.v,this.m,this.l)},ou.prototype.subscribe=function(t){if(M(this.h,t)||this.h.push(t),!this.f){var e=this;(function(t){return t.b.get(ru,t.a).then(function(t){return"pending"==t})})(this.g).then(function(t){t?iu(e.g).then(function(){su(e).s(function(t){var n=new ji("unknown",null,null,null,new Mr("operation-not-supported-in-this-environment"));fu(t)&&e.o(n)})}):uu(e)}).s(function(){uu(e)})}},ou.prototype.unsubscribe=function(t){U(this.h,function(e){return e==t})},ou.prototype.o=function(t){if(!t)throw new Mr("invalid-auth-event");for(var e=!1,n=0;n<this.h.length;n++){var r=this.h[n];if(r.sb(t.b,t.c)){(e=this.b[t.b])&&e.h(t,r),e=!0;break}}return yu(this.c),e};var cu=new yr(2e3,1e4),hu=new yr(3e4,6e4);function lu(t,e,n,r,i,o){return t.a.zb(e,n,r,function(){t.f||(t.f=!0,t.a.va(t.i))},function(){t.reset()},i,o)}function fu(t){return!(!t||"auth/cordova-not-ready"!=t.code)}ou.prototype.fa=function(){return this.c.fa()},ou.prototype.Ca=function(t,e,n){var r,i=this;return function(t){return t.b.set(ru,"pending",t.a)}(this.g).then(function(){return i.a.Ca(t,e,n).s(function(t){if(fu(t))throw new Mr("operation-not-supported-in-this-environment");return r=t,iu(i.g).then(function(){throw r})}).then(function(){return i.a.Mb()?new vt(function(){}):iu(i.g).then(function(){return i.fa()}).then(function(){}).s(function(){})})})},ou.prototype.Ea=function(t,e,n,r){return this.a.Ea(n,function(n){t.ha(e,null,n,r)},cu.get())};var pu={};function du(t,e,n){var r=e+":"+n;return pu[r]||(pu[r]=new ou(t,e,n)),pu[r]}function vu(){this.b=null,this.f=[],this.c=[],this.a=null,this.g=!1}function yu(t){t.g||(t.g=!0,mu(t,!1,null,null))}function gu(t,e){if(t.b=function(){return Et(e)},t.f.length)for(var n=0;n<t.f.length;n++)t.f[n](e)}function mu(t,e,n,r){e?r?function(t,e){if(t.b=function(){return Ct(e)},t.c.length)for(var n=0;n<t.c.length;n++)t.c[n](e)}(t,r):gu(t,n):gu(t,{user:null}),t.f=[],t.c=[]}function _u(){}function bu(){this.pb=!1,Object.defineProperty(this,"appVerificationDisabled",{get:function(){return this.pb},set:function(t){this.pb=t},enumerable:!1})}function wu(t,e){this.a=e,Tr(this,"verificationId",t)}function Eu(t,e,n,r){return new Li(t).Ta(e,n).then(function(t){return new wu(t,r)})}function Cu(t,e,n){if(this.h=t,this.i=e,this.g=n,this.c=3e4,this.f=96e4,this.b=null,this.a=this.c,this.f<this.c)throw Error("Proactive refresh lower bound greater than upper bound!")}function Tu(t){this.f=t,this.b=this.a=null,this.c=0}function Su(t,e){var n=e[Yo],r=e.refreshToken;e=Iu(e.expiresIn),t.b=n,t.c=e,t.a=r}function Iu(t){return _()+1e3*parseInt(t,10)}function Nu(t,e){return function(t,e){return new vt(function(n,r){"refresh_token"==e.grant_type&&e.refresh_token||"authorization_code"==e.grant_type&&e.code?ra(t,t.i+"?key="+encodeURIComponent(t.b),function(t){t?t.error?r(Ka(t)):t.access_token&&t.refresh_token?n(t):r(new Mr("internal-error")):r(new Mr("network-request-failed"))},"POST",on(e).toString(),t.f,t.m.get()):r(new Mr("internal-error"))})}(t.f,e).then(function(e){return t.b=e.access_token,t.c=Iu(e.expires_in),t.a=e.refresh_token,{accessToken:t.b,expirationTime:t.c,refreshToken:t.a}}).s(function(e){throw"auth/user-token-expired"==e.code&&(t.a=null),e})}function Au(t,e){this.a=t||null,this.b=e||null,Sr(this,{lastSignInTime:mr(e||null),creationTime:mr(t||null)})}function Ru(t,e){for(var n in oe.call(this,t),e)this[n]=e[n]}function Ou(t,e,n){this.G=[],this.l=t.apiKey,this.o=t.appName,this.u=t.authDomain||null,t=r.a.SDK_VERSION?nr(r.a.SDK_VERSION):null,this.b=new zo(this.l,Xa(Qa),t),this.h=new Tu(this.b),Fu(this,e[Yo]),Su(this.h,e),Tr(this,"refreshToken",this.h.a),Wu(this,n||{}),Ae.call(this),this.I=!1,this.u&&ar()&&(this.a=du(this.u,this.l,this.o)),this.N=[],this.i=null,this.w=function(t){return new Cu(function(){return t.F(!0)},function(t){return!(!t||"auth/network-request-failed"!=t.code)},function(){var e=t.h.c-_()-3e5;return 0<e?e:0})}(this),this.V=g(this.Ha,this);var i=this;this.ka=null,this.sa=function(t){i.oa(t.g)},this.X=null,this.O=[],this.ra=function(t){ku(i,t.c)},this.W=null}function Pu(t,e){t.X&&_e(t.X,"languageCodeChanged",t.sa),(t.X=e)&&ye(e,"languageCodeChanged",t.sa)}function ku(t,e){t.O=e,na(t.b,r.a.SDK_VERSION?nr(r.a.SDK_VERSION,t.O):null)}function Du(t,e){t.W&&_e(t.W,"frameworkChanged",t.ra),(t.W=e)&&ye(e,"frameworkChanged",t.ra)}function xu(t){try{return r.a.app(t.o).auth()}catch(e){throw new Mr("internal-error","No firebase.auth.Auth instance is available for the Firebase App '"+t.o+"'!")}}function Lu(t){t.C||t.w.b||(t.w.start(),_e(t,"tokenChanged",t.V),ye(t,"tokenChanged",t.V))}function Mu(t){_e(t,"tokenChanged",t.V),t.w.stop()}function Fu(t,e){t.qa=e,Tr(t,"_lat",e)}function Uu(t){for(var e=[],n=0;n<t.N.length;n++)e.push(t.N[n](t));return function(t){return new vt(function(e){var n=t.length,r=[];if(n)for(var i=function(t,i,o){n--,r[t]=i?{Zb:!0,value:o}:{Zb:!1,reason:o},0==n&&e(r)},o=0;o<t.length;o++)Tt(t[o],m(i,o,!0),m(i,o,!1));else e(r)})}(e).then(function(){return t})}function ju(t){t.a&&!t.I&&(t.I=!0,t.a.subscribe(t))}function Wu(t,e){Sr(t,{uid:e.uid,displayName:e.displayName||null,photoURL:e.photoURL||null,email:e.email||null,emailVerified:e.emailVerified||!1,phoneNumber:e.phoneNumber||null,isAnonymous:e.isAnonymous||!1,metadata:new Au(e.createdAt,e.lastLoginAt),providerData:[]})}function qu(){}function Vu(t){return Et().then(function(){if(t.C)throw new Mr("app-deleted")})}function Bu(t){return x(t.providerData,function(t){return t.providerId})}function Hu(t,e){e&&(Gu(t,e.providerId),t.providerData.push(e))}function Gu(t,e){U(t.providerData,function(t){return t.providerId==e})}function Ku(t,e,n){("uid"!=e||n)&&t.hasOwnProperty(e)&&Tr(t,e,n)}function Qu(t,e){t!=e&&(Sr(t,{uid:e.uid,displayName:e.displayName,photoURL:e.photoURL,email:e.email,emailVerified:e.emailVerified,phoneNumber:e.phoneNumber,isAnonymous:e.isAnonymous,providerData:[]}),e.metadata?Tr(t,"metadata",function(t){return new Au(t.a,t.b)}(e.metadata)):Tr(t,"metadata",new Au),D(e.providerData,function(e){Hu(t,e)}),function(t,e){t.b=e.b,t.a=e.a,t.c=e.c}(t.h,e.h),Tr(t,"refreshToken",t.h.a))}function zu(t){return t.F().then(function(e){var n=t.isAnonymous;return function(t,e){return Ha(t.b,Sa,{idToken:e}).then(g(t.uc,t))}(t,e).then(function(){return n||Ku(t,"isAnonymous",!1),e})})}function Xu(t,e){e[Yo]&&t.qa!=e[Yo]&&(Su(t.h,e),t.dispatchEvent(new Ru("tokenChanged")),Fu(t,e[Yo]),Ku(t,"refreshToken",t.h.a))}function Yu(t,e){return zu(t).then(function(){if(M(Bu(t),e))return Uu(t).then(function(){throw new Mr("provider-already-linked")})})}function Ju(t,e,n){return Ir({user:t,credential:Fi(e),additionalUserInfo:e=ai(e),operationType:n})}function $u(t,e){return Xu(t,e),t.reload().then(function(){return t})}function Zu(t,e,n,i,o){if(!ar())return Ct(new Mr("operation-not-supported-in-this-environment"));if(t.i&&!o)return Ct(t.i);var a=oi(n.providerId),s=pr(t.uid+":::"),u=null;(!cr()||zn())&&t.u&&n.isOAuthProvider&&(u=cs(t.u,t.l,t.o,e,n,null,s,r.a.SDK_VERSION||null));var c=Hn(u,a&&a.Ba,a&&a.Aa);return i=i().then(function(){if(ec(t),!o)return t.F().then(function(){})}).then(function(){return lu(t.a,c,e,n,s,!!u)}).then(function(){return new vt(function(n,r){t.ha(e,null,new Mr("cancelled-popup-request"),t.g||null),t.f=n,t.v=r,t.g=s,t.c=t.a.Ea(t,e,c,s)})}).then(function(t){return c&&Bn(c),t?Ir(t):null}).s(function(t){throw c&&Bn(c),t}),nc(t,i,o)}function tc(t,e,n,r,i){if(!ar())return Ct(new Mr("operation-not-supported-in-this-environment"));if(t.i&&!i)return Ct(t.i);var o=null,a=pr(t.uid+":::");return r=r().then(function(){if(ec(t),!i)return t.F().then(function(){})}).then(function(){return t.aa=a,Uu(t)}).then(function(e){return t.ba&&(e=(e=t.ba).b.set(ic,t.D(),e.a)),e}).then(function(){return t.a.Ca(e,n,a)}).s(function(e){if(o=e,t.ba)return oc(t.ba);throw o}).then(function(){if(o)throw o}),nc(t,r,i)}function ec(t){if(!t.a||!t.I){if(t.a&&!t.I)throw new Mr("internal-error");throw new Mr("auth-domain-config-required")}}function nc(t,e,n){var r=function(t,e,n){return t.i&&!n?(e.cancel(),Ct(t.i)):e.s(function(e){throw!e||"auth/user-disabled"!=e.code&&"auth/user-token-expired"!=e.code||(t.i||t.dispatchEvent(new Ru("userInvalidated")),t.i=e),e})}(t,e,n);return t.G.push(r),r.ia(function(){F(t.G,r)}),r}function rc(t){if(!t.apiKey)return null;var e={apiKey:t.apiKey,authDomain:t.authDomain,appName:t.appName},n={};if(!(t.stsTokenManager&&t.stsTokenManager.accessToken&&t.stsTokenManager.expirationTime))return null;n[Yo]=t.stsTokenManager.accessToken,n.refreshToken=t.stsTokenManager.refreshToken||null,n.expiresIn=(t.stsTokenManager.expirationTime-_())/1e3;var r=new Ou(e,n,t);return t.providerData&&D(t.providerData,function(t){t&&Hu(r,Ir(t))}),t.redirectEventId&&(r.aa=t.redirectEventId),r}vu.prototype.reset=function(){this.b=null,this.a&&(this.a.cancel(),this.a=null)},vu.prototype.h=function(t,e){if(t){this.reset(),this.g=!0;var n=t.b,r=t.c,i=t.a&&"auth/web-storage-unsupported"==t.a.code,o=t.a&&"auth/operation-not-supported-in-this-environment"==t.a.code;"unknown"!=n||i||o?t.a?(mu(this,!0,null,t.a),Et()):e.wa(n,r)?function(t,e,n){n=n.wa(e.b,e.c);var r=e.f,i=e.g,o=!!e.b.match(/Redirect$/);n(r,i).then(function(e){mu(t,o,e,null)}).s(function(e){mu(t,o,null,e)})}(this,t,e):Ct(new Mr("invalid-auth-event")):(mu(this,!1,null,null),Et())}else Ct(new Mr("invalid-auth-event"))},vu.prototype.fa=function(){var t=this;return new vt(function(e,n){t.b?t.b().then(e,n):(t.f.push(e),t.c.push(n),function(t){var e=new Mr("timeout");t.a&&t.a.cancel(),t.a=De(hu.get()).then(function(){t.b||mu(t,!0,null,e)})}(t))})},_u.prototype.h=function(t,e){if(t){var n=t.b,r=t.c;t.a?(e.ha(t.b,null,t.a,t.c),Et()):e.wa(n,r)?function(t,e){var n=t.c,r=t.b;e.wa(r,n)(t.f,t.g).then(function(t){e.ha(r,t,null,n)}).s(function(t){e.ha(r,null,t,n)})}(t,e):Ct(new Mr("invalid-auth-event"))}else Ct(new Mr("invalid-auth-event"))},wu.prototype.confirm=function(t){return t=Mi(this.verificationId,t),this.a(t)},Cu.prototype.start=function(){this.a=this.c,function t(e,r){e.stop();e.b=De(function(t,e){return e?(t.a=t.c,t.g()):(e=t.a,t.a*=2,t.a>t.f&&(t.a=t.f),e)}(e,r)).then(function(){return function(){var t=n.document,e=null;return gr()||!t?Et():new vt(function(n){e=function(){gr()&&(t.removeEventListener("visibilitychange",e,!1),n())},t.addEventListener("visibilitychange",e,!1)}).s(function(n){throw t.removeEventListener("visibilitychange",e,!1),n})}()}).then(function(){return e.h()}).then(function(){t(e,!0)}).s(function(n){e.i(n)&&t(e,!1)})}(this,!0)},Cu.prototype.stop=function(){this.b&&(this.b.cancel(),this.b=null)},Tu.prototype.D=function(){return{apiKey:this.f.b,refreshToken:this.a,accessToken:this.b,expirationTime:this.c}},Tu.prototype.getToken=function(t){return t=!!t,this.b&&!this.a?Ct(new Mr("user-token-expired")):t||!this.b||_()>this.c-3e4?this.a?Nu(this,{grant_type:"refresh_token",refresh_token:this.a}):Et(null):Et({accessToken:this.b,expirationTime:this.c,refreshToken:this.a})},Au.prototype.D=function(){return{lastLoginAt:this.b,createdAt:this.a}},b(Ru,oe),b(Ou,Ae),Ou.prototype.oa=function(t){this.ka=t,ea(this.b,t)},Ou.prototype.ea=function(){return this.ka},Ou.prototype.xa=function(){return W(this.O)},Ou.prototype.Ha=function(){this.w.b&&(this.w.stop(),this.w.start())},Tr(Ou.prototype,"providerId","firebase"),(t=Ou.prototype).reload=function(){var t=this;return nc(this,Vu(this).then(function(){return zu(t).then(function(){return Uu(t)}).then(qu)}))},t.ac=function(t){return this.F(t).then(function(t){return new function(t){var e=ei(t);if(!(e&&e.exp&&e.auth_time&&e.iat))throw new Mr("internal-error","An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");Sr(this,{token:t,expirationTime:mr(1e3*e.exp),authTime:mr(1e3*e.auth_time),issuedAtTime:mr(1e3*e.iat),signInProvider:e.firebase&&e.firebase.sign_in_provider?e.firebase.sign_in_provider:null,claims:e})}(t)})},t.F=function(t){var e=this;return nc(this,Vu(this).then(function(){return e.h.getToken(t)}).then(function(t){if(!t)throw new Mr("internal-error");return t.accessToken!=e.qa&&(Fu(e,t.accessToken),e.dispatchEvent(new Ru("tokenChanged"))),Ku(e,"refreshToken",t.refreshToken),t.accessToken}))},t.uc=function(t){if(!(t=t.users)||!t.length)throw new Mr("internal-error");Wu(this,{uid:(t=t[0]).localId,displayName:t.displayName,photoURL:t.photoUrl,email:t.email,emailVerified:!!t.emailVerified,phoneNumber:t.phoneNumber,lastLoginAt:t.lastLoginAt,createdAt:t.createdAt});for(var e=function(t){return(t=t.providerUserInfo)&&t.length?x(t,function(t){return new function(t,e,n,r,i,o){Sr(this,{uid:t,displayName:r||null,photoURL:i||null,email:n||null,phoneNumber:o||null,providerId:e})}(t.rawId,t.providerId,t.email,t.displayName,t.photoUrl,t.phoneNumber)}):[]}(t),n=0;n<e.length;n++)Hu(this,e[n]);Ku(this,"isAnonymous",!(this.email&&t.passwordHash||this.providerData&&this.providerData.length))},t.cb=function(t){var e=this,n=null;return nc(this,t.f(this.b,this.uid).then(function(t){return Xu(e,t),n=Ju(e,t,"reauthenticate"),e.i=null,e.reload()}).then(function(){return n}),!0)},t.vc=function(t){return Er("firebase.User.prototype.reauthenticateWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential instead."),this.cb(t).then(function(){})},t.ab=function(t){var e=this,n=null;return nc(this,Yu(this,t.providerId).then(function(){return e.F()}).then(function(n){return t.c(e.b,n)}).then(function(t){return n=Ju(e,t,"link"),$u(e,t)}).then(function(){return n}))},t.mc=function(t){return Er("firebase.User.prototype.linkWithCredential is deprecated. Please use firebase.User.prototype.linkAndRetrieveDataWithCredential instead."),this.ab(t).then(function(t){return t.user})},t.nc=function(t,e){var n=this;return nc(this,Yu(this,"phone").then(function(){return Eu(xu(n),t,e,g(n.ab,n))}))},t.wc=function(t,e){var n=this;return nc(this,Et().then(function(){return Eu(xu(n),t,e,g(n.cb,n))}),!0)},t.mb=function(t){var e=this;return nc(this,this.F().then(function(n){return e.b.mb(n,t)}).then(function(t){return Xu(e,t),e.reload()}))},t.Pc=function(t){var e=this;return nc(this,this.F().then(function(n){return t.c(e.b,n)}).then(function(t){return Xu(e,t),e.reload()}))},t.nb=function(t){var e=this;return nc(this,this.F().then(function(n){return e.b.nb(n,t)}).then(function(t){return Xu(e,t),e.reload()}))},t.ob=function(t){if(void 0===t.displayName&&void 0===t.photoURL)return Vu(this);var e=this;return nc(this,this.F().then(function(n){return e.b.ob(n,{displayName:t.displayName,photoUrl:t.photoURL})}).then(function(t){return Xu(e,t),Ku(e,"displayName",t.displayName||null),Ku(e,"photoURL",t.photoUrl||null),D(e.providerData,function(t){"password"===t.providerId&&(Tr(t,"displayName",e.displayName),Tr(t,"photoURL",e.photoURL))}),Uu(e)}).then(qu))},t.Nc=function(t){var e=this;return nc(this,zu(this).then(function(n){return M(Bu(e),t)?function(t,e,n){return Ha(t,Ea,{idToken:e,deleteProvider:n})}(e.b,n,[t]).then(function(t){var n={};return D(t.providerUserInfo||[],function(t){n[t.providerId]=!0}),D(Bu(e),function(t){n[t]||Gu(e,t)}),n[Li.PROVIDER_ID]||Tr(e,"phoneNumber",null),Uu(e)}):Uu(e).then(function(){throw new Mr("no-such-provider")})}))},t.delete=function(){var t=this;return nc(this,this.F().then(function(e){return Ha(t.b,wa,{idToken:e})}).then(function(){t.dispatchEvent(new Ru("userDeleted"))})).then(function(){for(var e=0;e<t.G.length;e++)t.G[e].cancel("app-deleted");Pu(t,null),Du(t,null),t.G=[],t.C=!0,Mu(t),Tr(t,"refreshToken",null),t.a&&t.a.unsubscribe(t)})},t.sb=function(t,e){return!!("linkViaPopup"==t&&(this.g||null)==e&&this.f||"reauthViaPopup"==t&&(this.g||null)==e&&this.f||"linkViaRedirect"==t&&(this.aa||null)==e||"reauthViaRedirect"==t&&(this.aa||null)==e)},t.ha=function(t,e,n,r){"linkViaPopup"!=t&&"reauthViaPopup"!=t||r!=(this.g||null)||(n&&this.v?this.v(n):e&&!n&&this.f&&this.f(e),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.v)},t.wa=function(t,e){return"linkViaPopup"==t&&e==(this.g||null)?g(this.xb,this):"reauthViaPopup"==t&&e==(this.g||null)?g(this.yb,this):"linkViaRedirect"==t&&(this.aa||null)==e?g(this.xb,this):"reauthViaRedirect"==t&&(this.aa||null)==e?g(this.yb,this):null},t.oc=function(t){var e=this;return Zu(this,"linkViaPopup",t,function(){return Yu(e,t.providerId).then(function(){return Uu(e)})},!1)},t.xc=function(t){return Zu(this,"reauthViaPopup",t,function(){return Et()},!0)},t.pc=function(t){var e=this;return tc(this,"linkViaRedirect",t,function(){return Yu(e,t.providerId)},!1)},t.yc=function(t){return tc(this,"reauthViaRedirect",t,function(){return Et()},!0)},t.xb=function(t,e){var n=this;this.c&&(this.c.cancel(),this.c=null);var r=null;return nc(this,this.F().then(function(r){return da(n.b,{requestUri:t,sessionId:e,idToken:r})}).then(function(t){return r=Ju(n,t,"link"),$u(n,t)}).then(function(){return r}))},t.yb=function(t,e){var n=this;this.c&&(this.c.cancel(),this.c=null);var r=null;return nc(this,Et().then(function(){return yi(va(n.b,{requestUri:t,sessionId:e}),n.uid)}).then(function(t){return r=Ju(n,t,"reauthenticate"),Xu(n,t),n.i=null,n.reload()}).then(function(){return r}),!0)},t.gb=function(t){var e=this,n=null;return nc(this,this.F().then(function(e){return n=e,void 0===t||it(t)?{}:Xr(new Wr(t))}).then(function(t){return e.b.gb(n,t)}).then(function(t){if(e.email!=t)return e.reload()}).then(function(){}))},t.toJSON=function(){return this.D()},t.D=function(){var t={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,phoneNumber:this.phoneNumber,isAnonymous:this.isAnonymous,providerData:[],apiKey:this.l,appName:this.o,authDomain:this.u,stsTokenManager:this.h.D(),redirectEventId:this.aa||null};return this.metadata&&ct(t,this.metadata.D()),D(this.providerData,function(e){t.providerData.push(function(t){var e,n={};for(e in t)t.hasOwnProperty(e)&&(n[e]=t[e]);return n}(e))}),t};var ic={name:"redirectUser",A:"session"};function oc(t){return Ms(t.b,ic,t.a)}function ac(t){this.a=t,this.b=Ds(),this.c=null,this.f=function(t){var e=cc("local"),r=cc("session"),i=cc("none");return function(t,e,r){var i=Ls(e,r),o=xs(t,e.A);return t.get(e,r).then(function(a){var s=null;try{s=fr(n.localStorage.getItem(i))}catch(t){}if(s&&!a)return n.localStorage.removeItem(i),t.set(e,s,r);s&&a&&"localStorage"!=o.type&&n.localStorage.removeItem(i)})}(t.b,e,t.a).then(function(){return t.b.get(r,t.a)}).then(function(n){return n?r:t.b.get(i,t.a).then(function(n){return n?i:t.b.get(e,t.a).then(function(n){return n?e:t.b.get(uc,t.a).then(function(t){return t?cc(t):e})})})}).then(function(e){return t.c=e,sc(t,e.A)}).s(function(){t.c||(t.c=e)})}(this),this.b.addListener(cc("local"),this.a,g(this.g,this))}function sc(t,e){var n,r=[];for(n in Ps)Ps[n]!==e&&r.push(Ms(t.b,cc(Ps[n]),t.a));return r.push(Ms(t.b,uc,t.a)),function(t){return new vt(function(e,n){var r=t.length,i=[];if(r)for(var o=function(t,n){r--,i[t]=n,0==r&&e(i)},a=function(t){n(t)},s=0;s<t.length;s++)Tt(t[s],m(o,s),a);else e(i)})}(r)}ac.prototype.g=function(){var t=this,e=cc("local");pc(this,function(){return Et().then(function(){return t.c&&"local"!=t.c.A?t.b.get(e,t.a):null}).then(function(n){if(n)return sc(t,"local").then(function(){t.c=e})})})};var uc={name:"persistence",A:"session"};function cc(t){return{name:"authUser",A:t}}function hc(t,e){return pc(t,function(){return t.b.set(t.c,e.D(),t.a)})}function lc(t){return pc(t,function(){return Ms(t.b,t.c,t.a)})}function fc(t,e){return pc(t,function(){return t.b.get(t.c,t.a).then(function(t){return t&&e&&(t.authDomain=e),rc(t||{})})})}function pc(t,e){return t.f=t.f.then(e,e),t.f}function dc(t){if(this.l=!1,Tr(this,"settings",new bu),Tr(this,"app",t),!wc(this).options||!wc(this).options.apiKey)throw new Mr("invalid-api-key");t=r.a.SDK_VERSION?nr(r.a.SDK_VERSION):null,this.b=new zo(wc(this).options&&wc(this).options.apiKey,Xa(Qa),t),this.N=[],this.o=[],this.I=[],this.Pb=r.a.INTERNAL.createSubscribe(g(this.ic,this)),this.O=void 0,this.Qb=r.a.INTERNAL.createSubscribe(g(this.jc,this)),_c(this,null),this.h=new ac(wc(this).options.apiKey+":"+wc(this).name),this.w=new function(t){this.a=t,this.b=Ds()}(wc(this).options.apiKey+":"+wc(this).name),this.V=Sc(this,function(t){var e=wc(t).options.authDomain,n=function(t){var e=function(t,e){return t.b.get(ic,t.a).then(function(t){return t&&e&&(t.authDomain=e),rc(t||{})})}(t.w,wc(t).options.authDomain).then(function(e){return(t.C=e)&&(e.ba=t.w),oc(t.w)});return Sc(t,e)}(t).then(function(){return fc(t.h,e)}).then(function(e){return e?(e.ba=t.w,t.C&&(t.C.aa||null)==(e.aa||null)?e:e.reload().then(function(){return hc(t.h,e).then(function(){return e})}).s(function(n){return"auth/network-request-failed"==n.code?e:lc(t.h)})):null}).then(function(e){_c(t,e||null)});return Sc(t,n)}(this)),this.i=Sc(this,function(t){return t.V.then(function(){return t.fa()}).s(function(){}).then(function(){if(!t.l)return t.ka()}).s(function(){}).then(function(){if(!t.l){t.X=!0;var e=t.h;e.b.addListener(cc("local"),e.a,t.ka)}})}(this)),this.X=!1,this.ka=g(this.Jc,this),this.Ha=g(this.Z,this),this.qa=g(this.Yb,this),this.ra=g(this.gc,this),this.sa=g(this.hc,this),function(t){var e=wc(t).options.authDomain,n=wc(t).options.apiKey;e&&ar()&&(t.Ob=t.V.then(function(){if(!t.l){if(t.a=du(e,n,wc(t).name),t.a.subscribe(t),Ec(t)&&ju(Ec(t)),t.C){ju(t.C);var r=t.C;r.oa(t.ea()),Pu(r,t),ku(r=t.C,t.G),Du(r,t),t.C=null}return t.a}}))}(this),this.INTERNAL={},this.INTERNAL.delete=g(this.delete,this),this.INTERNAL.logFramework=g(this.qc,this),this.u=0,Ae.call(this),function(t){Object.defineProperty(t,"lc",{get:function(){return this.ea()},set:function(t){this.oa(t)},enumerable:!1}),t.W=null}(this),this.G=[]}function vc(t){oe.call(this,"languageCodeChanged"),this.g=t}function yc(t){oe.call(this,"frameworkChanged"),this.c=t}function gc(t){return t.Ob||Ct(new Mr("auth-domain-config-required"))}function mc(t,e){var n={};return n.apiKey=wc(t).options.apiKey,n.authDomain=wc(t).options.authDomain,n.appName=wc(t).name,t.V.then(function(){return function(t,e,n,r){var i=new Ou(t,e);return n&&(i.ba=n),r&&ku(i,r),i.reload().then(function(){return i})}(n,e,t.w,t.xa())}).then(function(e){return Ec(t)&&e.uid==Ec(t).uid?(Qu(Ec(t),e),t.Z(e)):(_c(t,e),ju(e),t.Z(e))}).then(function(){Tc(t)})}function _c(t,e){Ec(t)&&(function(t,e){U(t.N,function(t){return t==e})}(Ec(t),t.Ha),_e(Ec(t),"tokenChanged",t.qa),_e(Ec(t),"userDeleted",t.ra),_e(Ec(t),"userInvalidated",t.sa),Mu(Ec(t))),e&&(e.N.push(t.Ha),ye(e,"tokenChanged",t.qa),ye(e,"userDeleted",t.ra),ye(e,"userInvalidated",t.sa),0<t.u&&Lu(e)),Tr(t,"currentUser",e),e&&(e.oa(t.ea()),Pu(e,t),ku(e,t.G),Du(e,t))}function bc(t,e){var n=null,r=null;return Sc(t,e.then(function(e){return n=Fi(e),r=ai(e),mc(t,e)}).then(function(){return Ir({user:Ec(t),credential:n,additionalUserInfo:r,operationType:"signIn"})}))}function wc(t){return t.app}function Ec(t){return t.currentUser}function Cc(t){return Ec(t)&&Ec(t)._lat||null}function Tc(t){if(t.X){for(var e=0;e<t.o.length;e++)t.o[e]&&t.o[e](Cc(t));if(t.O!==t.getUid()&&t.I.length)for(t.O=t.getUid(),e=0;e<t.I.length;e++)t.I[e]&&t.I[e](Cc(t))}}function Sc(t,e){return t.N.push(e),e.ia(function(){F(t.N,e)}),e}function Ic(){}function Nc(){this.a={},this.b=1e12}ac.prototype.jb=function(t){var e=null,n=this;return function(t){var e=new Mr("invalid-persistence-type"),n=new Mr("unsupported-persistence-type");t:{for(r in Ps)if(Ps[r]==t){var r=!0;break t}r=!1}if(!r||"string"!=typeof t)throw e;switch(Yn()){case"ReactNative":if("session"===t)throw n;break;case"Node":if("none"!==t)throw n;break;default:if(!or()&&"none"!==t)throw n}}(t),pc(this,function(){return t!=n.c.A?n.b.get(n.c,n.a).then(function(r){return e=r,sc(n,t)}).then(function(){if(n.c=cc(t),e)return n.b.set(n.c,e,n.a)}):Et()})},b(dc,Ae),b(vc,oe),b(yc,oe),(t=dc.prototype).jb=function(t){return Sc(this,t=this.h.jb(t))},t.oa=function(t){this.W===t||this.l||(this.W=t,ea(this.b,this.W),this.dispatchEvent(new vc(this.ea())))},t.ea=function(){return this.W},t.Qc=function(){var t=n.navigator;this.oa(t&&(t.languages&&t.languages[0]||t.language||t.userLanguage)||null)},t.qc=function(t){this.G.push(t),na(this.b,r.a.SDK_VERSION?nr(r.a.SDK_VERSION,this.G):null),this.dispatchEvent(new yc(this.G))},t.xa=function(){return W(this.G)},t.toJSON=function(){return{apiKey:wc(this).options.apiKey,authDomain:wc(this).options.authDomain,appName:wc(this).name,currentUser:Ec(this)&&Ec(this).D()}},t.sb=function(t,e){switch(t){case"unknown":case"signInViaRedirect":return!0;case"signInViaPopup":return this.g==e&&!!this.f;default:return!1}},t.ha=function(t,e,n,r){"signInViaPopup"==t&&this.g==r&&(n&&this.v?this.v(n):e&&!n&&this.f&&this.f(e),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.v)},t.wa=function(t,e){return"signInViaRedirect"==t||"signInViaPopup"==t&&this.g==e&&this.f?g(this.Xb,this):null},t.Xb=function(t,e){var n=this;t={requestUri:t,sessionId:e},this.c&&(this.c.cancel(),this.c=null);var r=null,i=null,o=pa(n.b,t).then(function(t){return r=Fi(t),i=ai(t),t});return Sc(this,t=n.V.then(function(){return o}).then(function(t){return mc(n,t)}).then(function(){return Ir({user:Ec(n),credential:r,additionalUserInfo:i,operationType:"signIn"})}))},t.Hc=function(t){if(!ar())return Ct(new Mr("operation-not-supported-in-this-environment"));var e=this,n=oi(t.providerId),i=pr(),o=null;(!cr()||zn())&&wc(this).options.authDomain&&t.isOAuthProvider&&(o=cs(wc(this).options.authDomain,wc(this).options.apiKey,wc(this).name,"signInViaPopup",t,null,i,r.a.SDK_VERSION||null));var a=Hn(o,n&&n.Ba,n&&n.Aa);return Sc(this,n=gc(this).then(function(e){return lu(e,a,"signInViaPopup",t,i,!!o)}).then(function(){return new vt(function(t,n){e.ha("signInViaPopup",null,new Mr("cancelled-popup-request"),e.g),e.f=t,e.v=n,e.g=i,e.c=e.a.Ea(e,"signInViaPopup",a,i)})}).then(function(t){return a&&Bn(a),t?Ir(t):null}).s(function(t){throw a&&Bn(a),t}))},t.Ic=function(t){if(!ar())return Ct(new Mr("operation-not-supported-in-this-environment"));var e=this;return Sc(this,gc(this).then(function(){return function(t){return pc(t,function(){return t.b.set(uc,t.c.A,t.a)})}(e.h)}).then(function(){return e.a.Ca("signInViaRedirect",t)}))},t.fa=function(){if(!ar())return Ct(new Mr("operation-not-supported-in-this-environment"));var t=this;return Sc(this,gc(this).then(function(){return t.a.fa()}).then(function(t){return t?Ir(t):null}))},t.Oc=function(t){if(!t)return Ct(new Mr("null-user"));var e=this,n={};n.apiKey=wc(this).options.apiKey,n.authDomain=wc(this).options.authDomain,n.appName=wc(this).name;var r=function(t,e,n,r){e=e||{apiKey:t.l,authDomain:t.u,appName:t.o};var i=t.h,o={};return o[Yo]=i.b,o.refreshToken=i.a,o.expiresIn=(i.c-_())/1e3,e=new Ou(e,o),n&&(e.ba=n),r&&ku(e,r),Qu(e,t),e}(t,n,e.w,e.xa());return Sc(this,this.i.then(function(){if(wc(e).options.apiKey!=t.l)return r.reload()}).then(function(){return Ec(e)&&t.uid==Ec(e).uid?(Qu(Ec(e),t),e.Z(t)):(_c(e,r),ju(r),e.Z(r))}).then(function(){Tc(e)}))},t.kb=function(){var t=this;return Sc(this,this.i.then(function(){return Ec(t)?(_c(t,null),lc(t.h).then(function(){Tc(t)})):Et()}))},t.Jc=function(){var t=this;return fc(this.h,wc(this).options.authDomain).then(function(e){if(!t.l){var n;if(n=Ec(t)&&e){n=Ec(t).uid;var r=e.uid;n=void 0!==n&&null!==n&&""!==n&&void 0!==r&&null!==r&&""!==r&&n==r}if(n)return Qu(Ec(t),e),Ec(t).F();(Ec(t)||e)&&(_c(t,e),e&&(ju(e),e.ba=t.w),t.a&&t.a.subscribe(t),Tc(t))}})},t.Z=function(t){return hc(this.h,t)},t.Yb=function(){Tc(this),this.Z(Ec(this))},t.gc=function(){this.kb()},t.hc=function(){this.kb()},t.ic=function(t){var e=this;this.addAuthTokenListener(function(){t.next(Ec(e))})},t.jc=function(t){var e=this;!function(t,e){t.I.push(e),Sc(t,t.i.then(function(){!t.l&&M(t.I,e)&&t.O!==t.getUid()&&(t.O=t.getUid(),e(Cc(t)))}))}(this,function(){t.next(Ec(e))})},t.sc=function(t,e,n){var i=this;return this.X&&r.a.Promise.resolve().then(function(){l(t)?t(Ec(i)):l(t.next)&&t.next(Ec(i))}),this.Pb(t,e,n)},t.rc=function(t,e,n){var i=this;return this.X&&r.a.Promise.resolve().then(function(){i.O=i.getUid(),l(t)?t(Ec(i)):l(t.next)&&t.next(Ec(i))}),this.Qb(t,e,n)},t.$b=function(t){var e=this;return Sc(this,this.i.then(function(){return Ec(e)?Ec(e).F(t).then(function(t){return{accessToken:t}}):null}))},t.Jb=function(t){var e=this;return this.i.then(function(){return bc(e,Ha(e.b,ja,{token:t}))}).then(function(t){var n=t.user;return Ku(n,"isAnonymous",!1),e.Z(n),t})},t.Bc=function(t){return Er("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCustomToken is deprecated. Please use firebase.auth.Auth.prototype.signInWithCustomToken instead."),this.Jb(t)},t.Cc=function(t,e){return Er("firebase.auth.Auth.prototype.signInAndRetrieveDataWithEmailAndPassword is deprecated. Please use firebase.auth.Auth.prototype.signInWithEmailAndPassword instead."),this.Kb(t,e)},t.Kb=function(t,e){var n=this;return this.i.then(function(){return bc(n,Ha(n.b,Wa,{email:t,password:e}))})},t.ub=function(t,e){var n=this;return this.i.then(function(){return bc(n,Ha(n.b,_a,{email:t,password:e}))})},t.Sb=function(t,e){return Er("firebase.auth.Auth.prototype.createUserAndRetrieveDataWithEmailAndPassword is deprecated. Please use firebase.auth.Auth.prototype.createUserWithEmailAndPassword instead."),this.ub(t,e)},t.Ec=function(t){return Er("firebase.auth.Auth.prototype.signInWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential instead."),this.Oa(t).then(function(t){return t.user})},t.Oa=function(t){var e=this;return this.i.then(function(){return bc(e,t.ya(e.b))})},t.Pa=function(){var t=this;return this.i.then(function(){var e=Ec(t);return e&&e.isAnonymous?Ir({user:e,credential:null,additionalUserInfo:Ir({providerId:null,isNewUser:!1}),operationType:"signIn"}):bc(t,t.b.Pa()).then(function(e){var n=e.user;return Ku(n,"isAnonymous",!0),t.Z(n),e})})},t.Dc=function(){return Er("firebase.auth.Auth.prototype.signInAnonymouslyAndRetrieveData is deprecated. Please use firebase.auth.Auth.prototype.signInAnonymously instead."),this.Pa()},t.getUid=function(){return Ec(this)&&Ec(this).uid||null},t.Rb=function(t){this.addAuthTokenListener(t),this.u++,0<this.u&&Ec(this)&&Lu(Ec(this))},t.zc=function(t){var e=this;D(this.o,function(n){n==t&&e.u--}),0>this.u&&(this.u=0),0==this.u&&Ec(this)&&Mu(Ec(this)),this.removeAuthTokenListener(t)},t.addAuthTokenListener=function(t){var e=this;this.o.push(t),Sc(this,this.i.then(function(){e.l||M(e.o,t)&&t(Cc(e))}))},t.removeAuthTokenListener=function(t){U(this.o,function(e){return e==t})},t.delete=function(){this.l=!0;for(var t=0;t<this.N.length;t++)this.N[t].cancel("app-deleted");return this.N=[],this.h&&(t=this.h).b.removeListener(cc("local"),t.a,this.ka),this.a&&this.a.unsubscribe(this),r.a.Promise.resolve()},t.Vb=function(t){return Er("firebase.auth.Auth.prototype.fetchProvidersForEmail is deprecated. Please use firebase.auth.Auth.prototype.fetchSignInMethodsForEmail instead."),Sc(this,function(t,e){return Ha(t,ba,{identifier:e,continueUri:sr()?Wn():"http://localhost"}).then(function(t){return t.allProviders||[]})}(this.b,t))},t.Wb=function(t){return Sc(this,function(t,e){return Ha(t,ba,{identifier:e,continueUri:sr()?Wn():"http://localhost"}).then(function(t){return t.signinMethods||[]})}(this.b,t))},t.kc=function(t){return!!ki(t)},t.ib=function(t,e){var n=this;return Sc(this,Et().then(function(){var t=new Wr(e);if(!t.c)throw new Mr("argument-error",Vr+" must be true when sending sign in link to email");return Xr(t)}).then(function(e){return n.b.ib(t,e)}).then(function(){}))},t.Rc=function(t){return this.Ja(t).then(function(t){return t.data.email})},t.Xa=function(t,e){return Sc(this,this.b.Xa(t,e).then(function(){}))},t.Ja=function(t){return Sc(this,this.b.Ja(t).then(function(t){return new function(t){var e={},n=t[Rr],r=t[Or];if(!(t=t[Pr])||t!=Ar&&!n)throw Error("Invalid provider user info!");e[Dr]=r||null,e[kr]=n||null,Tr(this,Lr,t),Tr(this,xr,Nr(e))}(t)}))},t.Va=function(t){return Sc(this,this.b.Va(t).then(function(){}))},t.hb=function(t,e){var n=this;return Sc(this,Et().then(function(){return void 0===e||it(e)?{}:Xr(new Wr(e))}).then(function(e){return n.b.hb(t,e)}).then(function(){}))},t.Gc=function(t,e){return Sc(this,Eu(this,t,e,g(this.Oa,this)))},t.Fc=function(t,e){var n=this;return Sc(this,Et().then(function(){var r=Pi(t,e||Wn());return n.Oa(r)}))},Ic.prototype.render=function(){},Ic.prototype.reset=function(){},Ic.prototype.getResponse=function(){},Ic.prototype.execute=function(){};var Ac=null;function Rc(t,e){return(e=Oc(e))&&t.a[e]||null}function Oc(t){return(t=void 0===t?1e12:t)?t.toString():null}function Pc(t,e){this.g=!1,this.c=e,this.a=this.b=null,this.h="invisible"!==this.c.size,this.f=On(t);var n=this;this.i=function(){n.execute()},this.h?this.execute():ye(this.f,"click",this.i)}function kc(t){if(t.g)throw Error("reCAPTCHA mock was already deleted!")}function Dc(){}Nc.prototype.render=function(t,e){return this.a[this.b.toString()]=new Pc(t,e),this.b++},Nc.prototype.reset=function(t){var e=Rc(this,t);t=Oc(t),e&&t&&(e.delete(),delete this.a[t])},Nc.prototype.getResponse=function(t){return(t=Rc(this,t))?t.getResponse():null},Nc.prototype.execute=function(t){(t=Rc(this,t))&&t.execute()},Pc.prototype.getResponse=function(){return kc(this),this.b},Pc.prototype.execute=function(){kc(this);var t=this;this.a||(this.a=setTimeout(function(){t.b=function(){for(var t=50,e=[];0<t;)e.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),t--;return e.join("")}();var e=t.c.callback,n=t.c["expired-callback"];if(e)try{e(t.b)}catch(t){}t.a=setTimeout(function(){if(t.a=null,t.b=null,n)try{n()}catch(t){}t.h&&t.execute()},6e4)},500))},Pc.prototype.delete=function(){kc(this),this.g=!0,clearTimeout(this.a),this.a=null,_e(this.f,"click",this.i)},Dc.prototype.g=function(){return Ac||(Ac=new Nc),Et(Ac)},Dc.prototype.c=function(){};var xc=null;function Lc(){this.b=n.grecaptcha?1/0:0,this.f=null,this.a="__rcb"+Math.floor(1e6*Math.random()).toString()}var Mc=dn("https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"),Fc=new yr(3e4,6e4);Lc.prototype.g=function(t){var e=this;return new vt(function(r,i){var o=setTimeout(function(){i(new Mr("network-request-failed"))},Fc.get());!n.grecaptcha||t!==e.f&&!e.b?(n[e.a]=function(){if(n.grecaptcha){e.f=t;var a=n.grecaptcha.render;n.grecaptcha.render=function(t,n){return t=a(t,n),e.b++,t},clearTimeout(o),r(n.grecaptcha)}else clearTimeout(o),i(new Mr("internal-error"));delete n[e.a]},Et(qo(gn(Mc,{onload:e.a,hl:t||""}))).s(function(){clearTimeout(o),i(new Mr("internal-error","Unable to load external reCAPTCHA dependencies!"))})):(clearTimeout(o),r(n.grecaptcha))})},Lc.prototype.c=function(){this.b--};var Uc=null;function jc(t,e,r,i,o,a,s){if(Tr(this,"type","recaptcha"),this.c=this.f=null,this.C=!1,this.l=e,this.g=null,s?(xc||(xc=new Dc),s=xc):(Uc||(Uc=new Lc),s=Uc),this.o=s,this.a=r||{theme:"light",type:"image"},this.h=[],this.a[Vc])throw new Mr("argument-error","sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");if(this.i="invisible"===this.a[Bc],!n.document)throw new Mr("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");if(!On(e)||!this.i&&On(e).hasChildNodes())throw new Mr("argument-error","reCAPTCHA container is either not found or already contains inner elements!");this.u=new zo(t,a||null,o||null),this.v=i||function(){return null};var u=this;this.m=[];var c=this.a[Wc];this.a[Wc]=function(t){if(Hc(u,t),"function"==typeof c)c(t);else if("string"==typeof c){var e=ir(c,n);"function"==typeof e&&e(t)}};var h=this.a[qc];this.a[qc]=function(){if(Hc(u,null),"function"==typeof h)h();else if("string"==typeof h){var t=ir(h,n);"function"==typeof t&&t()}}}var Wc="callback",qc="expired-callback",Vc="sitekey",Bc="size";function Hc(t,e){for(var n=0;n<t.m.length;n++)try{t.m[n](e)}catch(t){}}function Gc(t,e){return t.h.push(e),e.ia(function(){F(t.h,e)}),e}function Kc(t){if(t.C)throw new Mr("internal-error","RecaptchaVerifier instance has been destroyed.")}function Qc(t,e,n){var i=!1;try{this.b=n||r.a.app()}catch(t){throw new Mr("argument-error","No firebase.app.App instance is currently initialized.")}if(!this.b.options||!this.b.options.apiKey)throw new Mr("invalid-api-key");n=this.b.options.apiKey;var o=this,a=null;try{a=this.b.auth().xa()}catch(t){}try{i=this.b.auth().settings.appVerificationDisabledForTesting}catch(t){}a=r.a.SDK_VERSION?nr(r.a.SDK_VERSION,a):null,jc.call(this,n,t,e,function(){try{var t=o.b.auth().ea()}catch(e){t=null}return t},a,Xa(Qa),i)}function zc(t,e,n,r){t:{n=Array.prototype.slice.call(n);for(var i=0,o=!1,a=0;a<e.length;a++)if(e[a].optional)o=!0;else{if(o)throw new Mr("internal-error","Argument validator encountered a required argument after an optional argument.");i++}if(o=e.length,n.length<i||o<n.length)r="Expected "+(i==o?1==i?"1 argument":i+" arguments":i+"-"+o+" arguments")+" but got "+n.length+".";else{for(i=0;i<n.length;i++)if(o=e[i].optional&&void 0===n[i],!e[i].M(n[i])&&!o){if(e=e[i],0>i||i>=Xc.length)throw new Mr("internal-error","Argument validator received an unsupported number of arguments.");n=Xc[i],r=(r?"":n+" argument ")+(e.name?'"'+e.name+'" ':"")+"must be "+e.K+".";break t}r=null}}if(r)throw new Mr("argument-error",t+" failed: "+r)}(t=jc.prototype).za=function(){var t=this;return this.f?this.f:this.f=Gc(this,Et().then(function(){if(sr()&&!Xn())return Kn();throw new Mr("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.")}).then(function(){return t.o.g(t.v())}).then(function(e){return t.g=e,Ha(t.u,Oa,{})}).then(function(e){t.a[Vc]=e.recaptchaSiteKey}).s(function(e){throw t.f=null,e}))},t.render=function(){Kc(this);var t=this;return Gc(this,this.za().then(function(){if(null===t.c){var e=t.l;if(!t.i){var n=On(e);e=Dn("DIV"),n.appendChild(e)}t.c=t.g.render(e,t.a)}return t.c}))},t.verify=function(){Kc(this);var t=this;return Gc(this,this.render().then(function(e){return new vt(function(n){var r=t.g.getResponse(e);if(r)n(r);else{var i=function(e){e&&(function(t,e){U(t.m,function(t){return t==e})}(t,i),n(e))};t.m.push(i),t.i&&t.g.execute(t.c)}})}))},t.reset=function(){Kc(this),null!==this.c&&this.g.reset(this.c)},t.clear=function(){Kc(this),this.C=!0,this.o.c();for(var t=0;t<this.h.length;t++)this.h[t].cancel("RecaptchaVerifier instance has been destroyed.");if(!this.i){t=On(this.l);for(var e;e=t.firstChild;)t.removeChild(e)}},b(Qc,jc);var Xc="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");function Yc(t,e){return{name:t||"",K:"a valid string",optional:!!e,M:i}}function Jc(t,e){return{name:t||"",K:"a boolean",optional:!!e,M:o}}function $c(t,e){return{name:t||"",K:"a valid object",optional:!!e,M:f}}function Zc(t,e){return{name:t||"",K:"a function",optional:!!e,M:l}}function th(t,e){return{name:t||"",K:"null",optional:!!e,M:u}}function eh(t){return{name:t?t+"Credential":"credential",K:t?"a valid "+t+" credential":"a valid credential",optional:!1,M:function(e){if(!e)return!1;var n=!t||e.providerId===t;return!(!e.ya||!n)}}}function nh(){return{name:"applicationVerifier",K:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,M:function(t){return!!(t&&i(t.type)&&l(t.verify))}}}function rh(t,e,n,r){return{name:n||"",K:t.K+" or "+e.K,optional:!!r,M:function(n){return t.M(n)||e.M(n)}}}function ih(t,e){for(var n in e){var r=e[n].name;t[r]=sh(r,t[n],e[n].j)}}function oh(t,e){for(var n in e){var r=e[n].name;if(r!==n){var i=e[n].qb;Object.defineProperty(t,r,{get:function(){return this[n]},set:function(t){zc(r,[i],[t],!0),this[n]=t},enumerable:!0})}}}function ah(t,e,n,r){t[e]=sh(e,n,r)}function sh(t,e,n){function r(){var t=Array.prototype.slice.call(arguments);return zc(o,n,t),e.apply(this,t)}if(!n)return e;var i,o=function(t){return(t=t.split("."))[t.length-1]}(t);for(i in e)r[i]=e[i];for(i in e.prototype)r.prototype[i]=e.prototype[i];return r}ih(dc.prototype,{Va:{name:"applyActionCode",j:[Yc("code")]},Ja:{name:"checkActionCode",j:[Yc("code")]},Xa:{name:"confirmPasswordReset",j:[Yc("code"),Yc("newPassword")]},ub:{name:"createUserWithEmailAndPassword",j:[Yc("email"),Yc("password")]},Sb:{name:"createUserAndRetrieveDataWithEmailAndPassword",j:[Yc("email"),Yc("password")]},Vb:{name:"fetchProvidersForEmail",j:[Yc("email")]},Wb:{name:"fetchSignInMethodsForEmail",j:[Yc("email")]},fa:{name:"getRedirectResult",j:[]},kc:{name:"isSignInWithEmailLink",j:[Yc("emailLink")]},rc:{name:"onAuthStateChanged",j:[rh($c(),Zc(),"nextOrObserver"),Zc("opt_error",!0),Zc("opt_completed",!0)]},sc:{name:"onIdTokenChanged",j:[rh($c(),Zc(),"nextOrObserver"),Zc("opt_error",!0),Zc("opt_completed",!0)]},hb:{name:"sendPasswordResetEmail",j:[Yc("email"),rh($c("opt_actionCodeSettings",!0),th(null,!0),"opt_actionCodeSettings",!0)]},ib:{name:"sendSignInLinkToEmail",j:[Yc("email"),$c("actionCodeSettings")]},jb:{name:"setPersistence",j:[Yc("persistence")]},Oa:{name:"signInAndRetrieveDataWithCredential",j:[eh()]},Pa:{name:"signInAnonymously",j:[]},Dc:{name:"signInAnonymouslyAndRetrieveData",j:[]},Ec:{name:"signInWithCredential",j:[eh()]},Jb:{name:"signInWithCustomToken",j:[Yc("token")]},Bc:{name:"signInAndRetrieveDataWithCustomToken",j:[Yc("token")]},Kb:{name:"signInWithEmailAndPassword",j:[Yc("email"),Yc("password")]},Fc:{name:"signInWithEmailLink",j:[Yc("email"),Yc("emailLink",!0)]},Cc:{name:"signInAndRetrieveDataWithEmailAndPassword",j:[Yc("email"),Yc("password")]},Gc:{name:"signInWithPhoneNumber",j:[Yc("phoneNumber"),nh()]},Hc:{name:"signInWithPopup",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Ic:{name:"signInWithRedirect",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Oc:{name:"updateCurrentUser",j:[rh({name:"user",K:"an instance of Firebase User",optional:!1,M:function(t){return!!(t&&t instanceof Ou)}},th(),"user")]},kb:{name:"signOut",j:[]},toJSON:{name:"toJSON",j:[Yc(null,!0)]},Qc:{name:"useDeviceLanguage",j:[]},Rc:{name:"verifyPasswordResetCode",j:[Yc("code")]}}),oh(dc.prototype,{lc:{name:"languageCode",qb:rh(Yc(),th(),"languageCode")}}),dc.Persistence=Ps,dc.Persistence.LOCAL="local",dc.Persistence.SESSION="session",dc.Persistence.NONE="none",ih(Ou.prototype,{delete:{name:"delete",j:[]},ac:{name:"getIdTokenResult",j:[Jc("opt_forceRefresh",!0)]},F:{name:"getIdToken",j:[Jc("opt_forceRefresh",!0)]},ab:{name:"linkAndRetrieveDataWithCredential",j:[eh()]},mc:{name:"linkWithCredential",j:[eh()]},nc:{name:"linkWithPhoneNumber",j:[Yc("phoneNumber"),nh()]},oc:{name:"linkWithPopup",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},pc:{name:"linkWithRedirect",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},cb:{name:"reauthenticateAndRetrieveDataWithCredential",j:[eh()]},vc:{name:"reauthenticateWithCredential",j:[eh()]},wc:{name:"reauthenticateWithPhoneNumber",j:[Yc("phoneNumber"),nh()]},xc:{name:"reauthenticateWithPopup",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},yc:{name:"reauthenticateWithRedirect",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},reload:{name:"reload",j:[]},gb:{name:"sendEmailVerification",j:[rh($c("opt_actionCodeSettings",!0),th(null,!0),"opt_actionCodeSettings",!0)]},toJSON:{name:"toJSON",j:[Yc(null,!0)]},Nc:{name:"unlink",j:[Yc("provider")]},mb:{name:"updateEmail",j:[Yc("email")]},nb:{name:"updatePassword",j:[Yc("password")]},Pc:{name:"updatePhoneNumber",j:[eh("phone")]},ob:{name:"updateProfile",j:[$c("profile")]}}),ih(Nc.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),ih(Ic.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),ih(vt.prototype,{ia:{name:"finally"},s:{name:"catch"},then:{name:"then"}}),oh(bu.prototype,{appVerificationDisabled:{name:"appVerificationDisabledForTesting",qb:Jc("appVerificationDisabledForTesting")}}),ih(wu.prototype,{confirm:{name:"confirm",j:[Yc("verificationCode")]}}),ah(Oi,"credential",function(t,e){return new Ri(t,e)},[Yc("email"),Yc("password")]),ih(wi.prototype,{ta:{name:"addScope",j:[Yc("scope")]},Da:{name:"setCustomParameters",j:[$c("customOAuthParameters")]}}),ah(wi,"credential",Ei,[rh(Yc(),$c(),"token")]),ah(Oi,"credentialWithLink",Pi,[Yc("email"),Yc("emailLink")]),ih(Ci.prototype,{ta:{name:"addScope",j:[Yc("scope")]},Da:{name:"setCustomParameters",j:[$c("customOAuthParameters")]}}),ah(Ci,"credential",Ti,[rh(Yc(),$c(),"token")]),ih(Si.prototype,{ta:{name:"addScope",j:[Yc("scope")]},Da:{name:"setCustomParameters",j:[$c("customOAuthParameters")]}}),ah(Si,"credential",Ii,[rh(Yc(),rh($c(),th()),"idToken"),rh(Yc(),th(),"accessToken",!0)]),ih(Ni.prototype,{Da:{name:"setCustomParameters",j:[$c("customOAuthParameters")]}}),ah(Ni,"credential",Ai,[rh(Yc(),$c(),"token"),Yc("secret",!0)]),ih(bi.prototype,{ta:{name:"addScope",j:[Yc("scope")]},credential:{name:"credential",j:[rh(Yc(),th(),"idToken",!0),rh(Yc(),th(),"accessToken",!0)]},Da:{name:"setCustomParameters",j:[$c("customOAuthParameters")]}}),ah(Li,"credential",Mi,[Yc("verificationId"),Yc("verificationCode")]),ih(Li.prototype,{Ta:{name:"verifyPhoneNumber",j:[Yc("phoneNumber"),nh()]}}),ih(Mr.prototype,{toJSON:{name:"toJSON",j:[Yc(null,!0)]}}),ih(Hi.prototype,{toJSON:{name:"toJSON",j:[Yc(null,!0)]}}),ih(Bi.prototype,{toJSON:{name:"toJSON",j:[Yc(null,!0)]}}),ih(Qc.prototype,{clear:{name:"clear",j:[]},render:{name:"render",j:[]},verify:{name:"verify",j:[]}}),function(){if(void 0===r.a||!r.a.INTERNAL||!r.a.INTERNAL.registerService)throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");var t={Auth:dc,Error:Mr};ah(t,"EmailAuthProvider",Oi,[]),ah(t,"FacebookAuthProvider",wi,[]),ah(t,"GithubAuthProvider",Ci,[]),ah(t,"GoogleAuthProvider",Si,[]),ah(t,"TwitterAuthProvider",Ni,[]),ah(t,"OAuthProvider",bi,[Yc("providerId")]),ah(t,"PhoneAuthProvider",Li,[{name:"auth",K:"an instance of Firebase Auth",optional:!0,M:function(t){return!!(t&&t instanceof dc)}}]),ah(t,"RecaptchaVerifier",Qc,[rh(Yc(),{name:"",K:"an HTML element",optional:!1,M:function(t){return!!(t&&t instanceof Element)}},"recaptchaContainer"),$c("recaptchaParameters",!0),{name:"app",K:"an instance of Firebase App",optional:!0,M:function(t){return!!(t&&t instanceof r.a.app.App)}}]),r.a.INTERNAL.registerService("auth",function(t,e){return e({INTERNAL:{getUid:g((t=new dc(t)).getUid,t),getToken:g(t.$b,t),addAuthTokenListener:g(t.Rb,t),removeAuthTokenListener:g(t.zc,t)}}),t},t,function(t,e){if("create"===t)try{e.auth()}catch(t){}}),r.a.INTERNAL.extendNamespace({User:Ou})}()}).call(void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})}).call(this,n(2))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AuthService=void 0;var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function(t){return t&&t.__esModule?t:{default:t}}(n(3)),o=n(5);n(4),n(1),n(6);var a=document.getElementById("Login"),s=new o.Gallery;e.AuthService=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return r(t,[{key:"login",value:function(){var t=new i.default.auth.GoogleAuthProvider;return i.default.auth().signInWithPopup(t).then(function(t){a.setAttribute("value","Salir"),s.addImage()}).catch(function(t){return console.log(t.message)})}},{key:"renderLogin",value:function(){if(this.isAuth()){var t=document.createElement("div");t.innerHTML=' \n        <div class="app__upload">\n          <h2 class="title-sub app__upload__title">Añade tú foto a la galeria</h2>\n          <label for="fileUp" class="app__upload__label"> <img src="./assets/img/upload-white.png"> Add Image</label>\n          <input type="file" name="fileUp" id="fileUp" class="app__upload__input">\n          <div class="progress-bar">\n              <div class="progress-bar__bar"></div>\n          </div>\n        </div>\n      \n        <div class="app__gallery" id="gallery">\n      \n        </div>',t.id="app",t.classList.add("app"),document.body.appendChild(t)}}},{key:"isAuth",value:function(){return!!i.default.auth().currentUser}},{key:"logOut",value:function(){return i.default.auth().signOut().then(function(t){window.localStorage.removeItem("data"),a.setAttribute("value","Login With Google")}).catch(function(t){console.log(t.message)})}}]),t}()},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ModalService=void 0;var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();n(1),n(4);var i=JSON.parse(window.localStorage.getItem("data"));e.ModalService=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return r(t,null,[{key:"inyectModal",value:function(t){var e=(i=JSON.parse(window.localStorage.getItem("data")))[t];this.render(e.url,t)}},{key:"render",value:function(t,e){var n=document.createElement("div");n.innerHTML='\n            <div class="modal__background" >\n                <div class="modal__close" > <img src="./assets/img/close-modal.png"></div>\n                <figure>\n                    <img class="modal__img" src='+t+'/>\n                    <figcaption>\n                        <nav>\n                        <a href="#" class="modal__btn-prev"> <img class="prev" src="./assets/img/left-arrow.png"> </a>\n                        <a href="#" class="modal__btn-next"> <img class="next" src="./assets/img/right-arrow.png"> </a>\n                        </nav>\n                    </figcaption>\n                </figure>\n            </div>       \n        ',n.id="app__modal",n.classList.add("app__modal"),document.body.appendChild(n),this.closeModal(n),this.renderToggle(n,e)}},{key:"renderToggle",value:function(t,e){var n=t.querySelector(".prev"),r=t.querySelector(".next"),o=t.querySelector(".modal__img"),a=t.querySelector(".modal__close");window.addEventListener("keyup",function(t){"ArrowRight"===t.key&&r.click(),"ArrowLeft"===t.key&&n.click(),"Escape"===t.key&&a.click()}),t.addEventListener("click",function(t){t.preventDefault();var a=t.target;a===n?e>0?(o.src=i[e-1].url,e--):(o.src=i[i.length-1].url,e=i.length-1):a===r&&(e<i.length-1?(o.src=i[e+1].url,e++):(o.src=i[0].url,e=0))})}},{key:"closeModal",value:function(t){t.querySelector(".modal__close").addEventListener("click",function(e){document.body.removeChild(t)})}}]),t}()},function(t,e){!function(t){"use strict";if(!t.fetch){var e={searchParams:"URLSearchParams"in t,iterable:"Symbol"in t&&"iterator"in Symbol,blob:"FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in t,arrayBuffer:"ArrayBuffer"in t};if(e.arrayBuffer)var n=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],r=function(t){return t&&DataView.prototype.isPrototypeOf(t)},i=ArrayBuffer.isView||function(t){return t&&n.indexOf(Object.prototype.toString.call(t))>-1};h.prototype.append=function(t,e){t=s(t),e=u(e);var n=this.map[t];this.map[t]=n?n+","+e:e},h.prototype.delete=function(t){delete this.map[s(t)]},h.prototype.get=function(t){return t=s(t),this.has(t)?this.map[t]:null},h.prototype.has=function(t){return this.map.hasOwnProperty(s(t))},h.prototype.set=function(t,e){this.map[s(t)]=u(e)},h.prototype.forEach=function(t,e){for(var n in this.map)this.map.hasOwnProperty(n)&&t.call(e,this.map[n],n,this)},h.prototype.keys=function(){var t=[];return this.forEach(function(e,n){t.push(n)}),c(t)},h.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),c(t)},h.prototype.entries=function(){var t=[];return this.forEach(function(e,n){t.push([n,e])}),c(t)},e.iterable&&(h.prototype[Symbol.iterator]=h.prototype.entries);var o=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];y.prototype.clone=function(){return new y(this,{body:this._bodyInit})},v.call(y.prototype),v.call(m.prototype),m.prototype.clone=function(){return new m(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new h(this.headers),url:this.url})},m.error=function(){var t=new m(null,{status:0,statusText:""});return t.type="error",t};var a=[301,302,303,307,308];m.redirect=function(t,e){if(-1===a.indexOf(e))throw new RangeError("Invalid status code");return new m(null,{status:e,headers:{location:t}})},t.Headers=h,t.Request=y,t.Response=m,t.fetch=function(t,n){return new Promise(function(r,i){var o=new y(t,n),a=new XMLHttpRequest;a.onload=function(){var t={status:a.status,statusText:a.statusText,headers:function(t){var e=new h;return t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach(function(t){var n=t.split(":"),r=n.shift().trim();if(r){var i=n.join(":").trim();e.append(r,i)}}),e}(a.getAllResponseHeaders()||"")};t.url="responseURL"in a?a.responseURL:t.headers.get("X-Request-URL");var e="response"in a?a.response:a.responseText;r(new m(e,t))},a.onerror=function(){i(new TypeError("Network request failed"))},a.ontimeout=function(){i(new TypeError("Network request failed"))},a.open(o.method,o.url,!0),"include"===o.credentials?a.withCredentials=!0:"omit"===o.credentials&&(a.withCredentials=!1),"responseType"in a&&e.blob&&(a.responseType="blob"),o.headers.forEach(function(t,e){a.setRequestHeader(e,t)}),a.send(void 0===o._bodyInit?null:o._bodyInit)})},t.fetch.polyfill=!0}function s(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function u(t){return"string"!=typeof t&&(t=String(t)),t}function c(t){var n={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return e.iterable&&(n[Symbol.iterator]=function(){return n}),n}function h(t){this.map={},t instanceof h?t.forEach(function(t,e){this.append(e,t)},this):Array.isArray(t)?t.forEach(function(t){this.append(t[0],t[1])},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function l(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function f(t){return new Promise(function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}})}function p(t){var e=new FileReader,n=f(e);return e.readAsArrayBuffer(t),n}function d(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function v(){return this.bodyUsed=!1,this._initBody=function(t){if(this._bodyInit=t,t)if("string"==typeof t)this._bodyText=t;else if(e.blob&&Blob.prototype.isPrototypeOf(t))this._bodyBlob=t;else if(e.formData&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else if(e.searchParams&&URLSearchParams.prototype.isPrototypeOf(t))this._bodyText=t.toString();else if(e.arrayBuffer&&e.blob&&r(t))this._bodyArrayBuffer=d(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!e.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(t)&&!i(t))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=d(t)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):e.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},e.blob&&(this.blob=function(){var t=l(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?l(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(p)}),this.text=function(){var t=l(this);if(t)return t;if(this._bodyBlob)return function(t){var e=new FileReader,n=f(e);return e.readAsText(t),n}(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),n=new Array(e.length),r=0;r<e.length;r++)n[r]=String.fromCharCode(e[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},e.formData&&(this.formData=function(){return this.text().then(g)}),this.json=function(){return this.text().then(JSON.parse)},this}function y(t,e){var n=(e=e||{}).body;if(t instanceof y){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new h(t.headers)),this.method=t.method,this.mode=t.mode,n||null==t._bodyInit||(n=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"omit",!e.headers&&this.headers||(this.headers=new h(e.headers)),this.method=function(t){var e=t.toUpperCase();return o.indexOf(e)>-1?e:t}(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&n)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(n)}function g(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var n=t.split("="),r=n.shift().replace(/\+/g," "),i=n.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(i))}}),e}function m(t,e){e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new h(e.headers),this.url=e.url||"",this._initBody(t)}}("undefined"!=typeof self?self:this)},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,i=1,o={},a=!1,s=t.document,u=Object.getPrototypeOf&&Object.getPrototypeOf(t);u=u&&u.setTimeout?u:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick(function(){h(t)})}:function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?function(){var e="setImmediate$"+Math.random()+"$",n=function(n){n.source===t&&"string"==typeof n.data&&0===n.data.indexOf(e)&&h(+n.data.slice(e.length))};t.addEventListener?t.addEventListener("message",n,!1):t.attachEvent("onmessage",n),r=function(n){t.postMessage(e+n,"*")}}():t.MessageChannel?function(){var t=new MessageChannel;t.port1.onmessage=function(t){h(t.data)},r=function(e){t.port2.postMessage(e)}}():s&&"onreadystatechange"in s.createElement("script")?function(){var t=s.documentElement;r=function(e){var n=s.createElement("script");n.onreadystatechange=function(){h(e),n.onreadystatechange=null,t.removeChild(n),n=null},t.appendChild(n)}}():r=function(t){setTimeout(h,0,t)},u.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var a={callback:t,args:e};return o[i]=a,r(i),i++},u.clearImmediate=c}function c(t){delete o[t]}function h(t){if(a)setTimeout(h,0,t);else{var e=o[t];if(e){a=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{c(t),a=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(2),n(7))},function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(15),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(2))},function(t,e,n){"use strict";n.r(e),function(t,e){n(14);var r=setTimeout;function i(){}function o(t){if(!(this instanceof o))throw new TypeError("Promises must be constructed via new");if("function"!=typeof t)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],h(t,this)}function a(t,e){for(;3===t._state;)t=t._value;0!==t._state?(t._handled=!0,o._immediateFn(function(){var n=1===t._state?e.onFulfilled:e.onRejected;if(null!==n){var r;try{r=n(t._value)}catch(t){return void u(e.promise,t)}s(e.promise,r)}else(1===t._state?s:u)(e.promise,t._value)})):t._deferreds.push(e)}function s(t,e){try{if(e===t)throw new TypeError("A promise cannot be resolved with itself.");if(e&&("object"==typeof e||"function"==typeof e)){var n=e.then;if(e instanceof o)return t._state=3,t._value=e,void c(t);if("function"==typeof n)return void h(function(t,e){return function(){t.apply(e,arguments)}}(n,e),t)}t._state=1,t._value=e,c(t)}catch(e){u(t,e)}}function u(t,e){t._state=2,t._value=e,c(t)}function c(t){2===t._state&&0===t._deferreds.length&&o._immediateFn(function(){t._handled||o._unhandledRejectionFn(t._value)});for(var e=0,n=t._deferreds.length;e<n;e++)a(t,t._deferreds[e]);t._deferreds=null}function h(t,e){var n=!1;try{t(function(t){n||(n=!0,s(e,t))},function(t){n||(n=!0,u(e,t))})}catch(t){if(n)return;n=!0,u(e,t)}}o.prototype.catch=function(t){return this.then(null,t)},o.prototype.then=function(t,e){var n=new this.constructor(i);return a(this,new function(t,e,n){this.onFulfilled="function"==typeof t?t:null,this.onRejected="function"==typeof e?e:null,this.promise=n}(t,e,n)),n},o.prototype.finally=function(t){var e=this.constructor;return this.then(function(n){return e.resolve(t()).then(function(){return n})},function(n){return e.resolve(t()).then(function(){return e.reject(n)})})},o.all=function(t){return new o(function(e,n){if(!t||void 0===t.length)throw new TypeError("Promise.all accepts an array");var r=Array.prototype.slice.call(t);if(0===r.length)return e([]);var i=r.length;function o(t,a){try{if(a&&("object"==typeof a||"function"==typeof a)){var s=a.then;if("function"==typeof s)return void s.call(a,function(e){o(t,e)},n)}r[t]=a,0==--i&&e(r)}catch(t){n(t)}}for(var a=0;a<r.length;a++)o(a,r[a])})},o.resolve=function(t){return t&&"object"==typeof t&&t.constructor===o?t:new o(function(e){e(t)})},o.reject=function(t){return new o(function(e,n){n(t)})},o.race=function(t){return new o(function(e,n){for(var r=0,i=t.length;r<i;r++)t[r].then(e,n)})},o._immediateFn="function"==typeof t&&function(e){t(e)}||function(t){r(t,0)},o._unhandledRejectionFn=function(t){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",t)};var l=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==e)return e;throw new Error("unable to locate global object")}();function f(t,e){return t(e={exports:{}},e.exports),e.exports}l.Promise||(l.Promise=o);var p=f(function(t){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)}),d=f(function(t){var e=t.exports={version:"2.5.5"};"number"==typeof __e&&(__e=e)}),v=(d.version,function(t){return"object"==typeof t?null!==t:"function"==typeof t}),y=function(t){if(!v(t))throw TypeError(t+" is not an object!");return t},g=function(t){try{return!!t()}catch(t){return!0}},m=!g(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}),_=p.document,b=v(_)&&v(_.createElement),w=function(t){return b?_.createElement(t):{}},E=!m&&!g(function(){return 7!=Object.defineProperty(w("div"),"a",{get:function(){return 7}}).a}),C=function(t,e){if(!v(t))return t;var n,r;if(e&&"function"==typeof(n=t.toString)&&!v(r=n.call(t)))return r;if("function"==typeof(n=t.valueOf)&&!v(r=n.call(t)))return r;if(!e&&"function"==typeof(n=t.toString)&&!v(r=n.call(t)))return r;throw TypeError("Can't convert object to primitive value")},T=Object.defineProperty,S={f:m?Object.defineProperty:function(t,e,n){if(y(t),e=C(e,!0),y(n),E)try{return T(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},I=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}},N=m?function(t,e,n){return S.f(t,e,I(1,n))}:function(t,e,n){return t[e]=n,t},A={}.hasOwnProperty,R=function(t,e){return A.call(t,e)},O=0,P=Math.random(),k=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++O+P).toString(36))},D=f(function(t){var e=k("src"),n=Function.toString,r=(""+n).split("toString");d.inspectSource=function(t){return n.call(t)},(t.exports=function(t,n,i,o){var a="function"==typeof i;a&&(R(i,"name")||N(i,"name",n)),t[n]!==i&&(a&&(R(i,e)||N(i,e,t[n]?""+t[n]:r.join(String(n)))),t===p?t[n]=i:o?t[n]?t[n]=i:N(t,n,i):(delete t[n],N(t,n,i)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[e]||n.call(this)})}),x=function(t,e,n){if(function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!")}(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}},L=function(t,e,n){var r,i,o,a,s=t&L.F,u=t&L.G,c=t&L.S,h=t&L.P,l=t&L.B,f=u?p:c?p[e]||(p[e]={}):(p[e]||{}).prototype,v=u?d:d[e]||(d[e]={}),y=v.prototype||(v.prototype={});for(r in u&&(n=e),n)o=((i=!s&&f&&void 0!==f[r])?f:n)[r],a=l&&i?x(o,p):h&&"function"==typeof o?x(Function.call,o):o,f&&D(f,r,o,t&L.U),v[r]!=o&&N(v,r,a),h&&y[r]!=o&&(y[r]=o)};p.core=d,L.F=1,L.G=2,L.S=4,L.P=8,L.B=16,L.W=32,L.U=64,L.R=128;var M=L,F={}.toString,U=function(t){return F.call(t).slice(8,-1)},j=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==U(t)?t.split(""):Object(t)},W=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t},q=function(t){return Object(W(t))},V=Math.ceil,B=Math.floor,H=function(t){return isNaN(t=+t)?0:(t>0?B:V)(t)},G=Math.min,K=function(t){return t>0?G(H(t),9007199254740991):0},Q=Array.isArray||function(t){return"Array"==U(t)},z=p["__core-js_shared__"]||(p["__core-js_shared__"]={}),X=function(t){return z[t]||(z[t]={})},Y=f(function(t){var e=X("wks"),n=p.Symbol,r="function"==typeof n;(t.exports=function(t){return e[t]||(e[t]=r&&n[t]||(r?n:k)("Symbol."+t))}).store=e}),J=Y("species"),$=function(t,e){return new(function(t){var e;return Q(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!Q(e.prototype)||(e=void 0),v(e)&&null===(e=e[J])&&(e=void 0)),void 0===e?Array:e}(t))(e)},Z=function(t,e){var n=1==t,r=2==t,i=3==t,o=4==t,a=6==t,s=5==t||a,u=e||$;return function(e,c,h){for(var l,f,p=q(e),d=j(p),v=x(c,h,3),y=K(d.length),g=0,m=n?u(e,y):r?u(e,0):void 0;y>g;g++)if((s||g in d)&&(f=v(l=d[g],g,p),t))if(n)m[g]=f;else if(f)switch(t){case 3:return!0;case 5:return l;case 6:return g;case 2:m.push(l)}else if(o)return!1;return a?-1:i||o?o:m}},tt=Y("unscopables"),et=Array.prototype;void 0==et[tt]&&N(et,tt,{});var nt=function(t){et[tt][t]=!0},rt=Z(5),it=!0;"find"in[]&&Array(1).find(function(){it=!1}),M(M.P+M.F*it,"Array",{find:function(t){return rt(this,t,arguments.length>1?arguments[1]:void 0)}}),nt("find");d.Array.find;var ot=Z(6),at=!0;"findIndex"in[]&&Array(1).findIndex(function(){at=!1}),M(M.P+M.F*at,"Array",{findIndex:function(t){return ot(this,t,arguments.length>1?arguments[1]:void 0)}}),nt("findIndex");d.Array.findIndex;var st=function(t){return j(W(t))},ut=Math.max,ct=Math.min,ht=X("keys"),lt=function(t){return ht[t]||(ht[t]=k(t))},ft=function(t){return function(e,n,r){var i,o=st(e),a=K(o.length),s=function(t,e){return(t=H(t))<0?ut(t+e,0):ct(t,e)}(r,a);if(t&&n!=n){for(;a>s;)if((i=o[s++])!=i)return!0}else for(;a>s;s++)if((t||s in o)&&o[s]===n)return t||s||0;return!t&&-1}}(!1),pt=lt("IE_PROTO"),dt=function(t,e){var n,r=st(t),i=0,o=[];for(n in r)n!=pt&&R(r,n)&&o.push(n);for(;e.length>i;)R(r,n=e[i++])&&(~ft(o,n)||o.push(n));return o},vt="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(","),yt=Object.keys||function(t){return dt(t,vt)},gt={f:Object.getOwnPropertySymbols},mt={f:{}.propertyIsEnumerable},_t=Object.assign,bt=!_t||g(function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t}),7!=_t({},t)[n]||Object.keys(_t({},e)).join("")!=r})?function(t,e){for(var n=q(t),r=arguments.length,i=1,o=gt.f,a=mt.f;r>i;)for(var s,u=j(arguments[i++]),c=o?yt(u).concat(o(u)):yt(u),h=c.length,l=0;h>l;)a.call(u,s=c[l++])&&(n[s]=u[s]);return n}:_t;M(M.S+M.F,"Object",{assign:bt});d.Object.assign;var wt=Y("match"),Et=function(t,e,n){if(function(t){var e;return v(t)&&(void 0!==(e=t[wt])?!!e:"RegExp"==U(t))}(e))throw TypeError("String#"+n+" doesn't accept regex!");return String(W(t))},Ct=Y("match"),Tt="".startsWith;M(M.P+M.F*function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[Ct]=!1,!"/./"[t](e)}catch(t){}}return!0}("startsWith"),"String",{startsWith:function(t){var e=Et(this,t,"startsWith"),n=K(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return Tt?Tt.call(e,r,n):e.slice(n,n+r.length)===r}});d.String.startsWith;M(M.P,"String",{repeat:function(t){var e=String(W(this)),n="",r=H(t);if(r<0||r==1/0)throw RangeError("Count can't be negative");for(;r>0;(r>>>=1)&&(e+=e))1&r&&(n+=e);return n}});d.String.repeat;var St=f(function(t){var e=k("meta"),n=S.f,r=0,i=Object.isExtensible||function(){return!0},o=!g(function(){return i(Object.preventExtensions({}))}),a=function(t){n(t,e,{value:{i:"O"+ ++r,w:{}}})},s=t.exports={KEY:e,NEED:!1,fastKey:function(t,n){if(!v(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!R(t,e)){if(!i(t))return"F";if(!n)return"E";a(t)}return t[e].i},getWeak:function(t,n){if(!R(t,e)){if(!i(t))return!0;if(!n)return!1;a(t)}return t[e].w},onFreeze:function(t){return o&&s.NEED&&i(t)&&!R(t,e)&&a(t),t}}}),It=(St.KEY,St.NEED,St.fastKey,St.getWeak,St.onFreeze,S.f),Nt=Y("toStringTag"),At=function(t,e,n){t&&!R(t=n?t:t.prototype,Nt)&&It(t,Nt,{configurable:!0,value:e})},Rt={f:Y},Ot=S.f,Pt=function(t){var e=d.Symbol||(d.Symbol=p.Symbol||{});"_"==t.charAt(0)||t in e||Ot(e,t,{value:Rt.f(t)})},kt=m?Object.defineProperties:function(t,e){y(t);for(var n,r=yt(e),i=r.length,o=0;i>o;)S.f(t,n=r[o++],e[n]);return t},Dt=p.document,xt=Dt&&Dt.documentElement,Lt=lt("IE_PROTO"),Mt=function(){},Ft=function(){var t,e=w("iframe"),n=vt.length;for(e.style.display="none",xt.appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),Ft=t.F;n--;)delete Ft.prototype[vt[n]];return Ft()},Ut=Object.create||function(t,e){var n;return null!==t?(Mt.prototype=y(t),n=new Mt,Mt.prototype=null,n[Lt]=t):n=Ft(),void 0===e?n:kt(n,e)},jt=vt.concat("length","prototype"),Wt={f:Object.getOwnPropertyNames||function(t){return dt(t,jt)}},qt=Wt.f,Vt={}.toString,Bt="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],Ht={f:function(t){return Bt&&"[object Window]"==Vt.call(t)?function(t){try{return qt(t)}catch(t){return Bt.slice()}}(t):qt(st(t))}},Gt=Object.getOwnPropertyDescriptor,Kt={f:m?Gt:function(t,e){if(t=st(t),e=C(e,!0),E)try{return Gt(t,e)}catch(t){}if(R(t,e))return I(!mt.f.call(t,e),t[e])}},Qt=St.KEY,zt=Kt.f,Xt=S.f,Yt=Ht.f,Jt=p.Symbol,$t=p.JSON,Zt=$t&&$t.stringify,te=Y("_hidden"),ee=Y("toPrimitive"),ne={}.propertyIsEnumerable,re=X("symbol-registry"),ie=X("symbols"),oe=X("op-symbols"),ae=Object.prototype,se="function"==typeof Jt,ue=p.QObject,ce=!ue||!ue.prototype||!ue.prototype.findChild,he=m&&g(function(){return 7!=Ut(Xt({},"a",{get:function(){return Xt(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=zt(ae,e);r&&delete ae[e],Xt(t,e,n),r&&t!==ae&&Xt(ae,e,r)}:Xt,le=function(t){var e=ie[t]=Ut(Jt.prototype);return e._k=t,e},fe=se&&"symbol"==typeof Jt.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof Jt},pe=function(t,e,n){return t===ae&&pe(oe,e,n),y(t),e=C(e,!0),y(n),R(ie,e)?(n.enumerable?(R(t,te)&&t[te][e]&&(t[te][e]=!1),n=Ut(n,{enumerable:I(0,!1)})):(R(t,te)||Xt(t,te,I(1,{})),t[te][e]=!0),he(t,e,n)):Xt(t,e,n)},de=function(t,e){y(t);for(var n,r=function(t){var e=yt(t),n=gt.f;if(n)for(var r,i=n(t),o=mt.f,a=0;i.length>a;)o.call(t,r=i[a++])&&e.push(r);return e}(e=st(e)),i=0,o=r.length;o>i;)pe(t,n=r[i++],e[n]);return t},ve=function(t){var e=ne.call(this,t=C(t,!0));return!(this===ae&&R(ie,t)&&!R(oe,t))&&(!(e||!R(this,t)||!R(ie,t)||R(this,te)&&this[te][t])||e)},ye=function(t,e){if(t=st(t),e=C(e,!0),t!==ae||!R(ie,e)||R(oe,e)){var n=zt(t,e);return!n||!R(ie,e)||R(t,te)&&t[te][e]||(n.enumerable=!0),n}},ge=function(t){for(var e,n=Yt(st(t)),r=[],i=0;n.length>i;)R(ie,e=n[i++])||e==te||e==Qt||r.push(e);return r},me=function(t){for(var e,n=t===ae,r=Yt(n?oe:st(t)),i=[],o=0;r.length>o;)!R(ie,e=r[o++])||n&&!R(ae,e)||i.push(ie[e]);return i};se||(D((Jt=function(){if(this instanceof Jt)throw TypeError("Symbol is not a constructor!");var t=k(arguments.length>0?arguments[0]:void 0),e=function(n){this===ae&&e.call(oe,n),R(this,te)&&R(this[te],t)&&(this[te][t]=!1),he(this,t,I(1,n))};return m&&ce&&he(ae,t,{configurable:!0,set:e}),le(t)}).prototype,"toString",function(){return this._k}),Kt.f=ye,S.f=pe,Wt.f=Ht.f=ge,mt.f=ve,gt.f=me,m&&D(ae,"propertyIsEnumerable",ve,!0),Rt.f=function(t){return le(Y(t))}),M(M.G+M.W+M.F*!se,{Symbol:Jt});for(var _e="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),be=0;_e.length>be;)Y(_e[be++]);for(var we=yt(Y.store),Ee=0;we.length>Ee;)Pt(we[Ee++]);M(M.S+M.F*!se,"Symbol",{for:function(t){return R(re,t+="")?re[t]:re[t]=Jt(t)},keyFor:function(t){if(!fe(t))throw TypeError(t+" is not a symbol!");for(var e in re)if(re[e]===t)return e},useSetter:function(){ce=!0},useSimple:function(){ce=!1}}),M(M.S+M.F*!se,"Object",{create:function(t,e){return void 0===e?Ut(t):de(Ut(t),e)},defineProperty:pe,defineProperties:de,getOwnPropertyDescriptor:ye,getOwnPropertyNames:ge,getOwnPropertySymbols:me}),$t&&M(M.S+M.F*(!se||g(function(){var t=Jt();return"[null]"!=Zt([t])||"{}"!=Zt({a:t})||"{}"!=Zt(Object(t))})),"JSON",{stringify:function(t){for(var e,n,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);if(n=e=r[1],(v(e)||void 0!==t)&&!fe(t))return Q(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!fe(e))return e}),r[1]=e,Zt.apply($t,r)}}),Jt.prototype[ee]||N(Jt.prototype,ee,Jt.prototype.valueOf),At(Jt,"Symbol"),At(Math,"Math",!0),At(p.JSON,"JSON",!0);var Ce=Y("toStringTag"),Te="Arguments"==U(function(){return arguments}()),Se={};Se[Y("toStringTag")]="z",Se+""!="[object z]"&&D(Object.prototype,"toString",function(){return"[object "+function(t){var e,n,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),Ce))?n:Te?U(e):"Object"==(r=U(e))&&"function"==typeof e.callee?"Arguments":r}(this)+"]"},!0),Pt("asyncIterator"),Pt("observable");d.Symbol;var Ie={},Ne={};N(Ne,Y("iterator"),function(){return this});var Ae=function(t,e,n){t.prototype=Ut(Ne,{next:I(1,n)}),At(t,e+" Iterator")},Re=lt("IE_PROTO"),Oe=Object.prototype,Pe=Object.getPrototypeOf||function(t){return t=q(t),R(t,Re)?t[Re]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?Oe:null},ke=Y("iterator"),De=!([].keys&&"next"in[].keys()),xe=function(){return this},Le=function(t,e,n,r,i,o,a){Ae(n,e,r);var s,u,c,h=function(t){if(!De&&t in d)return d[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},l=e+" Iterator",f="values"==i,p=!1,d=t.prototype,v=d[ke]||d["@@iterator"]||i&&d[i],y=v||h(i),g=i?f?h("entries"):y:void 0,m="Array"==e&&d.entries||v;if(m&&(c=Pe(m.call(new t)))!==Object.prototype&&c.next&&(At(c,l,!0),"function"!=typeof c[ke]&&N(c,ke,xe)),f&&v&&"values"!==v.name&&(p=!0,y=function(){return v.call(this)}),(De||p||!d[ke])&&N(d,ke,y),Ie[e]=y,Ie[l]=xe,i)if(s={values:f?y:h("values"),keys:o?y:h("keys"),entries:g},a)for(u in s)u in d||D(d,u,s[u]);else M(M.P+M.F*(De||p),e,s);return s},Me=function(t){return function(e,n){var r,i,o=String(W(e)),a=H(n),s=o.length;return a<0||a>=s?t?"":void 0:(r=o.charCodeAt(a))<55296||r>56319||a+1===s||(i=o.charCodeAt(a+1))<56320||i>57343?t?o.charAt(a):r:t?o.slice(a,a+2):i-56320+(r-55296<<10)+65536}}(!0);Le(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=Me(e,n),this._i+=t.length,{value:t,done:!1})});var Fe=function(t,e){return{value:e,done:!!t}},Ue=Le(Array,"Array",function(t,e){this._t=st(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,Fe(1)):Fe(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])},"values");Ie.Arguments=Ie.Array,nt("keys"),nt("values"),nt("entries");for(var je=Y("iterator"),We=Y("toStringTag"),qe=Ie.Array,Ve={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},Be=yt(Ve),He=0;He<Be.length;He++){var Ge,Ke=Be[He],Qe=Ve[Ke],ze=p[Ke],Xe=ze&&ze.prototype;if(Xe&&(Xe[je]||N(Xe,je,qe),Xe[We]||N(Xe,We,Ke),Ie[Ke]=qe,Qe))for(Ge in Ue)Xe[Ge]||D(Xe,Ge,Ue[Ge],!0)}Rt.f("iterator")}.call(this,n(16).setImmediate,n(2))},function(t,e,n){"use strict";n.r(e),n.d(e,"setLogLevel",function(){return u}),n.d(e,"Logger",function(){return s}),n.d(e,"LogLevel",function(){return r});var r,i=[];!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(r||(r={}));var o=r.INFO,a=function(t,e){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];if(!(e<t.logLevel)){var o=(new Date).toISOString();switch(e){case r.DEBUG:case r.VERBOSE:console.log.apply(console,["["+o+"]  "+t.name+":"].concat(n));break;case r.INFO:console.info.apply(console,["["+o+"]  "+t.name+":"].concat(n));break;case r.WARN:console.warn.apply(console,["["+o+"]  "+t.name+":"].concat(n));break;case r.ERROR:console.error.apply(console,["["+o+"]  "+t.name+":"].concat(n));break;default:throw new Error("Attempted to log a message with an invalid logType (value: "+e+")")}}},s=function(){function t(t){this.name=t,this._logLevel=o,this._logHandler=a,i.push(this)}return Object.defineProperty(t.prototype,"logLevel",{get:function(){return this._logLevel},set:function(t){if(!(t in r))throw new TypeError("Invalid value assigned to `logLevel`");this._logLevel=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"logHandler",{get:function(){return this._logHandler},set:function(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t},enumerable:!0,configurable:!0}),t.prototype.debug=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,[this,r.DEBUG].concat(t))},t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,[this,r.VERBOSE].concat(t))},t.prototype.info=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,[this,r.INFO].concat(t))},t.prototype.warn=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,[this,r.WARN].concat(t))},t.prototype.error=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._logHandler.apply(this,[this,r.ERROR].concat(t))},t}();function u(t){i.forEach(function(e){e.logLevel=t})}},function(t,e,n){"use strict";(function(r){Object.defineProperty(e,"__esModule",{value:!0});var i=n(9),o=n(18),a=n(8),s=function(t){return t&&"object"==typeof t&&"default"in t?t.default:t}(n(0)),u=function(){function t(t){this.domStorage_=t,this.prefix_="firebase:"}return t.prototype.set=function(t,e){null==e?this.domStorage_.removeItem(this.prefixedName_(t)):this.domStorage_.setItem(this.prefixedName_(t),i.stringify(e))},t.prototype.get=function(t){var e=this.domStorage_.getItem(this.prefixedName_(t));return null==e?null:i.jsonEval(e)},t.prototype.remove=function(t){this.domStorage_.removeItem(this.prefixedName_(t))},t.prototype.prefixedName_=function(t){return this.prefix_+t},t.prototype.toString=function(){return this.domStorage_.toString()},t}(),c=function(){function t(){this.cache_={},this.isInMemoryStorage=!0}return t.prototype.set=function(t,e){null==e?delete this.cache_[t]:this.cache_[t]=e},t.prototype.get=function(t){return i.contains(this.cache_,t)?this.cache_[t]:null},t.prototype.remove=function(t){delete this.cache_[t]},t}(),h=function(t){try{if("undefined"!=typeof window&&void 0!==window[t]){var e=window[t];return e.setItem("firebase:sentinel","cache"),e.removeItem("firebase:sentinel"),new u(e)}}catch(t){}return new c},l=h("localStorage"),f=h("sessionStorage"),p=new o.Logger("@firebase/database"),d=function(){var t=1;return function(){return t++}}(),v=function(t){var e=i.stringToByteArray(t),n=new i.Sha1;n.update(e);var r=n.digest();return i.base64.encodeByteArray(r)},y=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var n="",r=0;r<t.length;r++)Array.isArray(t[r])||t[r]&&"object"==typeof t[r]&&"number"==typeof t[r].length?n+=y.apply(null,t[r]):"object"==typeof t[r]?n+=i.stringify(t[r]):n+=t[r],n+=" ";return n},g=null,m=!0,_=function(t,e){i.assert(!e||!0===t||!1===t,"Can't turn on custom loggers persistently."),!0===t?(p.logLevel=o.LogLevel.VERBOSE,g=p.log.bind(p),e&&f.set("logging_enabled",!0)):"function"==typeof t?g=t:(g=null,f.remove("logging_enabled"))},b=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(!0===m&&(m=!1,null===g&&!0===f.get("logging_enabled")&&_(!0)),g){var n=y.apply(null,t);g(n)}},w=function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];b.apply(void 0,[t].concat(e))}},E=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n="FIREBASE INTERNAL ERROR: "+y.apply(void 0,t);p.error(n)},C=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n="FIREBASE FATAL ERROR: "+y.apply(void 0,t);throw p.error(n),new Error(n)},T=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n="FIREBASE WARNING: "+y.apply(void 0,t);p.warn(n)},S=function(t){return"number"==typeof t&&(t!=t||t==Number.POSITIVE_INFINITY||t==Number.NEGATIVE_INFINITY)},I="[MIN_NAME]",N="[MAX_NAME]",A=function(t,e){if(t===e)return 0;if(t===I||e===N)return-1;if(e===I||t===N)return 1;var n=M(t),r=M(e);return null!==n?null!==r?n-r==0?t.length-e.length:n-r:-1:null!==r?1:t<e?-1:1},R=function(t,e){return t===e?0:t<e?-1:1},O=function(t,e){if(e&&t in e)return e[t];throw new Error("Missing required key ("+t+") in object: "+i.stringify(e))},P=function(t){if("object"!=typeof t||null===t)return i.stringify(t);var e=[];for(var n in t)e.push(n);e.sort();for(var r="{",o=0;o<e.length;o++)0!==o&&(r+=","),r+=i.stringify(e[o]),r+=":",r+=P(t[e[o]]);return r+="}"},k=function(t,e){var n=t.length;if(n<=e)return[t];for(var r=[],i=0;i<n;i+=e)i+e>n?r.push(t.substring(i,n)):r.push(t.substring(i,i+e));return r},D=function(t,e){if(Array.isArray(t))for(var n=0;n<t.length;++n)e(n,t[n]);else i.forEach(t,function(t,n){return e(n,t)})},x=function(t){i.assert(!S(t),"Invalid JSON number");var e,n,r,o,a,s,u;for(0===t?(n=0,r=0,e=1/t==-1/0?1:0):(e=t<0,(t=Math.abs(t))>=Math.pow(2,-1022)?(n=(o=Math.min(Math.floor(Math.log(t)/Math.LN2),1023))+1023,r=Math.round(t*Math.pow(2,52-o)-Math.pow(2,52))):(n=0,r=Math.round(t/Math.pow(2,-1074)))),s=[],a=52;a;a-=1)s.push(r%2?1:0),r=Math.floor(r/2);for(a=11;a;a-=1)s.push(n%2?1:0),n=Math.floor(n/2);s.push(e?1:0),s.reverse(),u=s.join("");var c="";for(a=0;a<64;a+=8){var h=parseInt(u.substr(a,8),2).toString(16);1===h.length&&(h="0"+h),c+=h}return c.toLowerCase()},L=new RegExp("^-?\\d{1,10}$"),M=function(t){if(L.test(t)){var e=Number(t);if(e>=-2147483648&&e<=2147483647)return e}return null},F=function(t){try{t()}catch(t){setTimeout(function(){var e=t.stack||"";throw T("Exception was thrown by user callback.",e),t},Math.floor(0))}},U=function(){return("object"==typeof window&&window.navigator&&window.navigator.userAgent||"").search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i)>=0},j=function(t,e){var n=setTimeout(t,e);return"object"==typeof n&&n.unref&&n.unref(),n},W=function(){function t(t,e){if(void 0===e){this.pieces_=t.split("/");for(var n=0,r=0;r<this.pieces_.length;r++)this.pieces_[r].length>0&&(this.pieces_[n]=this.pieces_[r],n++);this.pieces_.length=n,this.pieceNum_=0}else this.pieces_=t,this.pieceNum_=e}return Object.defineProperty(t,"Empty",{get:function(){return new t("")},enumerable:!0,configurable:!0}),t.prototype.getFront=function(){return this.pieceNum_>=this.pieces_.length?null:this.pieces_[this.pieceNum_]},t.prototype.getLength=function(){return this.pieces_.length-this.pieceNum_},t.prototype.popFront=function(){var e=this.pieceNum_;return e<this.pieces_.length&&e++,new t(this.pieces_,e)},t.prototype.getBack=function(){return this.pieceNum_<this.pieces_.length?this.pieces_[this.pieces_.length-1]:null},t.prototype.toString=function(){for(var t="",e=this.pieceNum_;e<this.pieces_.length;e++)""!==this.pieces_[e]&&(t+="/"+this.pieces_[e]);return t||"/"},t.prototype.toUrlEncodedString=function(){for(var t="",e=this.pieceNum_;e<this.pieces_.length;e++)""!==this.pieces_[e]&&(t+="/"+encodeURIComponent(String(this.pieces_[e])));return t||"/"},t.prototype.slice=function(t){return void 0===t&&(t=0),this.pieces_.slice(this.pieceNum_+t)},t.prototype.parent=function(){if(this.pieceNum_>=this.pieces_.length)return null;for(var e=[],n=this.pieceNum_;n<this.pieces_.length-1;n++)e.push(this.pieces_[n]);return new t(e,0)},t.prototype.child=function(e){for(var n=[],r=this.pieceNum_;r<this.pieces_.length;r++)n.push(this.pieces_[r]);if(e instanceof t)for(r=e.pieceNum_;r<e.pieces_.length;r++)n.push(e.pieces_[r]);else{var i=e.split("/");for(r=0;r<i.length;r++)i[r].length>0&&n.push(i[r])}return new t(n,0)},t.prototype.isEmpty=function(){return this.pieceNum_>=this.pieces_.length},t.relativePath=function(e,n){var r=e.getFront(),i=n.getFront();if(null===r)return n;if(r===i)return t.relativePath(e.popFront(),n.popFront());throw new Error("INTERNAL ERROR: innerPath ("+n+") is not within outerPath ("+e+")")},t.comparePaths=function(t,e){for(var n=t.slice(),r=e.slice(),i=0;i<n.length&&i<r.length;i++){var o=A(n[i],r[i]);if(0!==o)return o}return n.length===r.length?0:n.length<r.length?-1:1},t.prototype.equals=function(t){if(this.getLength()!==t.getLength())return!1;for(var e=this.pieceNum_,n=t.pieceNum_;e<=this.pieces_.length;e++,n++)if(this.pieces_[e]!==t.pieces_[n])return!1;return!0},t.prototype.contains=function(t){var e=this.pieceNum_,n=t.pieceNum_;if(this.getLength()>t.getLength())return!1;for(;e<this.pieces_.length;){if(this.pieces_[e]!==t.pieces_[n])return!1;++e,++n}return!0},t}(),q=function(){function t(t,e){this.errorPrefix_=e,this.parts_=t.slice(),this.byteLength_=Math.max(1,this.parts_.length);for(var n=0;n<this.parts_.length;n++)this.byteLength_+=i.stringLength(this.parts_[n]);this.checkValid_()}return Object.defineProperty(t,"MAX_PATH_DEPTH",{get:function(){return 32},enumerable:!0,configurable:!0}),Object.defineProperty(t,"MAX_PATH_LENGTH_BYTES",{get:function(){return 768},enumerable:!0,configurable:!0}),t.prototype.push=function(t){this.parts_.length>0&&(this.byteLength_+=1),this.parts_.push(t),this.byteLength_+=i.stringLength(t),this.checkValid_()},t.prototype.pop=function(){var t=this.parts_.pop();this.byteLength_-=i.stringLength(t),this.parts_.length>0&&(this.byteLength_-=1)},t.prototype.checkValid_=function(){if(this.byteLength_>t.MAX_PATH_LENGTH_BYTES)throw new Error(this.errorPrefix_+"has a key path longer than "+t.MAX_PATH_LENGTH_BYTES+" bytes ("+this.byteLength_+").");if(this.parts_.length>t.MAX_PATH_DEPTH)throw new Error(this.errorPrefix_+"path specified exceeds the maximum depth that can be written ("+t.MAX_PATH_DEPTH+") or object contains a cycle "+this.toErrorString())},t.prototype.toErrorString=function(){return 0==this.parts_.length?"":"in property '"+this.parts_.join(".")+"'"},t}(),V="long_polling",B=function(){function t(t,e,n,r,i){void 0===i&&(i=""),this.secure=e,this.namespace=n,this.webSocketOnly=r,this.persistenceKey=i,this.host=t.toLowerCase(),this.domain=this.host.substr(this.host.indexOf(".")+1),this.internalHost=l.get("host:"+t)||this.host}return t.prototype.needsQueryParam=function(){return this.host!==this.internalHost||this.isCustomHost()},t.prototype.isCacheableHost=function(){return"s-"===this.internalHost.substr(0,2)},t.prototype.isDemoHost=function(){return"firebaseio-demo.com"===this.domain},t.prototype.isCustomHost=function(){return"firebaseio.com"!==this.domain&&"firebaseio-demo.com"!==this.domain},t.prototype.updateHost=function(t){t!==this.internalHost&&(this.internalHost=t,this.isCacheableHost()&&l.set("host:"+this.host,this.internalHost))},t.prototype.connectionURL=function(t,e){var n;if(i.assert("string"==typeof t,"typeof type must == string"),i.assert("object"==typeof e,"typeof params must == object"),"websocket"===t)n=(this.secure?"wss://":"ws://")+this.internalHost+"/.ws?";else{if(t!==V)throw new Error("Unknown connection type: "+t);n=(this.secure?"https://":"http://")+this.internalHost+"/.lp?"}this.needsQueryParam()&&(e.ns=this.namespace);var r=[];return i.forEach(e,function(t,e){r.push(t+"="+e)}),n+r.join("&")},t.prototype.toString=function(){var t=this.toURLString();return this.persistenceKey&&(t+="<"+this.persistenceKey+">"),t},t.prototype.toURLString=function(){return(this.secure?"https://":"http://")+this.host},t}();var H,G,K=function(t){var e=Q(t),n=e.subdomain;"firebase"===e.domain&&C(e.host+" is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead"),n&&"undefined"!=n||"localhost"===e.domain||C("Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com"),e.secure||"undefined"!=typeof window&&window.location&&window.location.protocol&&-1!==window.location.protocol.indexOf("https:")&&T("Insecure Firebase access from a secure page. Please use https in calls to new Firebase().");var r="ws"===e.scheme||"wss"===e.scheme;return{repoInfo:new B(e.host,e.secure,n,r),path:new W(e.pathString)}},Q=function(t){var e="",n="",r="",i="",o=!0,a="https",s=443;if("string"==typeof t){var u=t.indexOf("//");u>=0&&(a=t.substring(0,u-1),t=t.substring(u+2));var c=t.indexOf("/");-1===c&&(c=t.length);var h=t.indexOf("?");-1===h&&(h=t.length),e=t.substring(0,Math.min(c,h)),c<h&&(i=function(t){for(var e="",n=t.split("/"),r=0;r<n.length;r++)if(n[r].length>0){var i=n[r];try{i=decodeURIComponent(i.replace(/\+/g," "))}catch(t){}e+="/"+i}return e}(t.substring(c,h)));var l=function(t){var e={};"?"===t.charAt(0)&&(t=t.substring(1));for(var n=0,r=t.split("&");n<r.length;n++){var i=r[n];if(0!==i.length){var o=i.split("=");2===o.length?e[decodeURIComponent(o[0])]=decodeURIComponent(o[1]):T("Invalid query segment '"+i+"' in query '"+t+"'")}}return e}(t.substring(Math.min(t.length,h)));(u=e.indexOf(":"))>=0?(o="https"===a||"wss"===a,s=parseInt(e.substring(u+1),10)):u=t.length;var f=e.split(".");3===f.length?(n=f[1],r=f[0].toLowerCase()):2===f.length?n=f[0]:"localhost"===f[0].slice(0,u).toLowerCase()&&(n="localhost"),""===r&&"ns"in l&&(r=l.ns)}return{host:e,port:s,domain:n,subdomain:r,secure:o,scheme:a,pathString:i}},z=/[\[\].#$\/\u0000-\u001F\u007F]/,X=/[\[\].#$\u0000-\u001F\u007F]/,Y=function(t){return"string"==typeof t&&0!==t.length&&!z.test(t)},J=function(t){return"string"==typeof t&&0!==t.length&&!X.test(t)},$=function(t){return null===t||"string"==typeof t||"number"==typeof t&&!S(t)||t&&"object"==typeof t&&i.contains(t,".sv")},Z=function(t,e,n,r,o){o&&void 0===n||tt(i.errorPrefix(t,e,o),n,r)},tt=function(t,e,n){var r=n instanceof W?new q(n,t):n;if(void 0===e)throw new Error(t+"contains undefined "+r.toErrorString());if("function"==typeof e)throw new Error(t+"contains a function "+r.toErrorString()+" with contents = "+e.toString());if(S(e))throw new Error(t+"contains "+e.toString()+" "+r.toErrorString());if("string"==typeof e&&e.length>10485760/3&&i.stringLength(e)>10485760)throw new Error(t+"contains a string greater than 10485760 utf8 bytes "+r.toErrorString()+" ('"+e.substring(0,50)+"...')");if(e&&"object"==typeof e){var o=!1,a=!1;if(i.forEach(e,function(e,n){if(".value"===e)o=!0;else if(".priority"!==e&&".sv"!==e&&(a=!0,!Y(e)))throw new Error(t+" contains an invalid key ("+e+") "+r.toErrorString()+'.  Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');r.push(e),tt(t,n,r),r.pop()}),o&&a)throw new Error(t+' contains ".value" child '+r.toErrorString()+" in addition to actual children.")}},et=function(t,e,n,r,o){if(!o||void 0!==n){var a=i.errorPrefix(t,e,o);if(!n||"object"!=typeof n||Array.isArray(n))throw new Error(a+" must be an object containing the children to replace.");var s=[];i.forEach(n,function(t,e){var n=new W(t);if(tt(a,e,r.child(n)),".priority"===n.getBack()&&!$(e))throw new Error(a+"contains an invalid value for '"+n.toString()+"', which must be a valid Firebase priority (a string, finite number, server value, or null).");s.push(n)}),function(t,e){var n,r;for(n=0;n<e.length;n++)for(var i=(r=e[n]).slice(),o=0;o<i.length;o++)if(".priority"===i[o]&&o===i.length-1);else if(!Y(i[o]))throw new Error(t+"contains an invalid key ("+i[o]+") in path "+r.toString()+'. Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');e.sort(W.comparePaths);var a=null;for(n=0;n<e.length;n++){if(r=e[n],null!==a&&a.contains(r))throw new Error(t+"contains a path "+a.toString()+" that is ancestor of another path "+r.toString());a=r}}(a,s)}},nt=function(t,e,n,r){if(!r||void 0!==n){if(S(n))throw new Error(i.errorPrefix(t,e,r)+"is "+n.toString()+", but must be a valid Firebase priority (a string, finite number, server value, or null).");if(!$(n))throw new Error(i.errorPrefix(t,e,r)+"must be a valid Firebase priority (a string, finite number, server value, or null).")}},rt=function(t,e,n,r){if(!r||void 0!==n)switch(n){case"value":case"child_added":case"child_removed":case"child_changed":case"child_moved":break;default:throw new Error(i.errorPrefix(t,e,r)+'must be a valid event type = "value", "child_added", "child_removed", "child_changed", or "child_moved".')}},it=function(t,e,n,r){if(!(r&&void 0===n||Y(n)))throw new Error(i.errorPrefix(t,e,r)+'was an invalid key = "'+n+'".  Firebase keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]").')},ot=function(t,e,n,r){if(!(r&&void 0===n||J(n)))throw new Error(i.errorPrefix(t,e,r)+'was an invalid path = "'+n+'". Paths must be non-empty strings and can\'t contain ".", "#", "$", "[", or "]"')},at=function(t,e){if(".info"===e.getFront())throw new Error(t+" failed = Can't modify data under /.info/")},st=function(t,e,n){var r=n.path.toString();if("string"!=typeof n.repoInfo.host||0===n.repoInfo.host.length||!Y(n.repoInfo.namespace)&&"localhost"!==n.repoInfo.host.split(":")[0]||0!==r.length&&!function(t){return t&&(t=t.replace(/^\/*\.info(\/|$)/,"/")),J(t)}(r))throw new Error(i.errorPrefix(t,e,!1)+'must be a valid firebase URL and the path can\'t contain ".", "#", "$", "[", or "]".')},ut=function(){function t(t,e){this.repo_=t,this.path_=e}return t.prototype.cancel=function(t){i.validateArgCount("OnDisconnect.cancel",0,1,arguments.length),i.validateCallback("OnDisconnect.cancel",1,t,!0);var e=new i.Deferred;return this.repo_.onDisconnectCancel(this.path_,e.wrapCallback(t)),e.promise},t.prototype.remove=function(t){i.validateArgCount("OnDisconnect.remove",0,1,arguments.length),at("OnDisconnect.remove",this.path_),i.validateCallback("OnDisconnect.remove",1,t,!0);var e=new i.Deferred;return this.repo_.onDisconnectSet(this.path_,null,e.wrapCallback(t)),e.promise},t.prototype.set=function(t,e){i.validateArgCount("OnDisconnect.set",1,2,arguments.length),at("OnDisconnect.set",this.path_),Z("OnDisconnect.set",1,t,this.path_,!1),i.validateCallback("OnDisconnect.set",2,e,!0);var n=new i.Deferred;return this.repo_.onDisconnectSet(this.path_,t,n.wrapCallback(e)),n.promise},t.prototype.setWithPriority=function(t,e,n){i.validateArgCount("OnDisconnect.setWithPriority",2,3,arguments.length),at("OnDisconnect.setWithPriority",this.path_),Z("OnDisconnect.setWithPriority",1,t,this.path_,!1),nt("OnDisconnect.setWithPriority",2,e,!1),i.validateCallback("OnDisconnect.setWithPriority",3,n,!0);var r=new i.Deferred;return this.repo_.onDisconnectSetWithPriority(this.path_,t,e,r.wrapCallback(n)),r.promise},t.prototype.update=function(t,e){if(i.validateArgCount("OnDisconnect.update",1,2,arguments.length),at("OnDisconnect.update",this.path_),Array.isArray(t)){for(var n={},r=0;r<t.length;++r)n[""+r]=t[r];t=n,T("Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}et("OnDisconnect.update",1,t,this.path_,!1),i.validateCallback("OnDisconnect.update",2,e,!0);var o=new i.Deferred;return this.repo_.onDisconnectUpdate(this.path_,t,o.wrapCallback(e)),o.promise},t}(),ct=function(){function t(t,e){this.committed=t,this.snapshot=e}return t.prototype.toJSON=function(){return i.validateArgCount("TransactionResult.toJSON",0,1,arguments.length),{committed:this.committed,snapshot:this.snapshot.toJSON()}},t}(),ht=function(){var t="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz",e=0,n=[];return function(r){var o,a=r===e;e=r;var s=new Array(8);for(o=7;o>=0;o--)s[o]=t.charAt(r%64),r=Math.floor(r/64);i.assert(0===r,"Cannot push at time == 0");var u=s.join("");if(a){for(o=11;o>=0&&63===n[o];o--)n[o]=0;n[o]++}else for(o=0;o<12;o++)n[o]=Math.floor(64*Math.random());for(o=0;o<12;o++)u+=t.charAt(n[o]);return i.assert(20===u.length,"nextPushId: Length should be 20."),u}}(),lt=function(){function t(t,e){this.name=t,this.node=e}return t.Wrap=function(e,n){return new t(e,n)},t}(),ft=function(){function t(){}return t.prototype.getCompare=function(){return this.compare.bind(this)},t.prototype.indexedValueChanged=function(t,e){var n=new lt(I,t),r=new lt(I,e);return 0!==this.compare(n,r)},t.prototype.minPost=function(){return lt.MIN},t}(),pt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a.__extends(e,t),Object.defineProperty(e,"__EMPTY_NODE",{get:function(){return H},set:function(t){H=t},enumerable:!0,configurable:!0}),e.prototype.compare=function(t,e){return A(t.name,e.name)},e.prototype.isDefinedOn=function(t){throw i.assertionError("KeyIndex.isDefinedOn not expected to be called.")},e.prototype.indexedValueChanged=function(t,e){return!1},e.prototype.minPost=function(){return lt.MIN},e.prototype.maxPost=function(){return new lt(N,H)},e.prototype.makePost=function(t,e){return i.assert("string"==typeof t,"KeyIndex indexValue must always be a string."),new lt(t,H)},e.prototype.toString=function(){return".key"},e}(ft),dt=new pt;var vt,yt,gt,mt=function(t){return"number"==typeof t?"number:"+x(t):"string:"+t},_t=function(t){if(t.isLeafNode()){var e=t.val();i.assert("string"==typeof e||"number"==typeof e||"object"==typeof e&&i.contains(e,".sv"),"Priority must be a string or number.")}else i.assert(t===G||t.isEmpty(),"priority of unexpected type.");i.assert(t===G||t.getPriority().isEmpty(),"Priority nodes can't have a priority of their own.")},bt=function(){function t(e,n){void 0===n&&(n=t.__childrenNodeConstructor.EMPTY_NODE),this.value_=e,this.priorityNode_=n,this.lazyHash_=null,i.assert(void 0!==this.value_&&null!==this.value_,"LeafNode shouldn't be created with null/undefined value."),_t(this.priorityNode_)}return Object.defineProperty(t,"__childrenNodeConstructor",{get:function(){return vt},set:function(t){vt=t},enumerable:!0,configurable:!0}),t.prototype.isLeafNode=function(){return!0},t.prototype.getPriority=function(){return this.priorityNode_},t.prototype.updatePriority=function(e){return new t(this.value_,e)},t.prototype.getImmediateChild=function(e){return".priority"===e?this.priorityNode_:t.__childrenNodeConstructor.EMPTY_NODE},t.prototype.getChild=function(e){return e.isEmpty()?this:".priority"===e.getFront()?this.priorityNode_:t.__childrenNodeConstructor.EMPTY_NODE},t.prototype.hasChild=function(){return!1},t.prototype.getPredecessorChildName=function(t,e){return null},t.prototype.updateImmediateChild=function(e,n){return".priority"===e?this.updatePriority(n):n.isEmpty()&&".priority"!==e?this:t.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(e,n).updatePriority(this.priorityNode_)},t.prototype.updateChild=function(e,n){var r=e.getFront();return null===r?n:n.isEmpty()&&".priority"!==r?this:(i.assert(".priority"!==r||1===e.getLength(),".priority must be the last token in a path"),this.updateImmediateChild(r,t.__childrenNodeConstructor.EMPTY_NODE.updateChild(e.popFront(),n)))},t.prototype.isEmpty=function(){return!1},t.prototype.numChildren=function(){return 0},t.prototype.forEachChild=function(t,e){return!1},t.prototype.val=function(t){return t&&!this.getPriority().isEmpty()?{".value":this.getValue(),".priority":this.getPriority().val()}:this.getValue()},t.prototype.hash=function(){if(null===this.lazyHash_){var t="";this.priorityNode_.isEmpty()||(t+="priority:"+mt(this.priorityNode_.val())+":");var e=typeof this.value_;t+=e+":",t+="number"===e?x(this.value_):this.value_,this.lazyHash_=v(t)}return this.lazyHash_},t.prototype.getValue=function(){return this.value_},t.prototype.compareTo=function(e){return e===t.__childrenNodeConstructor.EMPTY_NODE?1:e instanceof t.__childrenNodeConstructor?-1:(i.assert(e.isLeafNode(),"Unknown node type"),this.compareToLeafNode_(e))},t.prototype.compareToLeafNode_=function(e){var n=typeof e.value_,r=typeof this.value_,o=t.VALUE_TYPE_ORDER.indexOf(n),a=t.VALUE_TYPE_ORDER.indexOf(r);return i.assert(o>=0,"Unknown leaf type: "+n),i.assert(a>=0,"Unknown leaf type: "+r),o===a?"object"===r?0:this.value_<e.value_?-1:this.value_===e.value_?0:1:a-o},t.prototype.withIndex=function(){return this},t.prototype.isIndexed=function(){return!0},t.prototype.equals=function(t){if(t===this)return!0;if(t.isLeafNode()){var e=t;return this.value_===e.value_&&this.priorityNode_.equals(e.priorityNode_)}return!1},t.VALUE_TYPE_ORDER=["object","boolean","number","string"],t}();var wt,Et,Ct=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a.__extends(e,t),e.prototype.compare=function(t,e){var n=t.node.getPriority(),r=e.node.getPriority(),i=n.compareTo(r);return 0===i?A(t.name,e.name):i},e.prototype.isDefinedOn=function(t){return!t.getPriority().isEmpty()},e.prototype.indexedValueChanged=function(t,e){return!t.getPriority().equals(e.getPriority())},e.prototype.minPost=function(){return lt.MIN},e.prototype.maxPost=function(){return new lt(N,new bt("[PRIORITY-POST]",gt))},e.prototype.makePost=function(t,e){var n=yt(t);return new lt(e,new bt("[PRIORITY-POST]",n))},e.prototype.toString=function(){return".priority"},e}(ft)),Tt=function(){function t(t,e,n,r,i){void 0===i&&(i=null),this.isReverse_=r,this.resultGenerator_=i,this.nodeStack_=[];for(var o=1;!t.isEmpty();)if(t=t,o=e?n(t.key,e):1,r&&(o*=-1),o<0)t=this.isReverse_?t.left:t.right;else{if(0===o){this.nodeStack_.push(t);break}this.nodeStack_.push(t),t=this.isReverse_?t.right:t.left}}return t.prototype.getNext=function(){if(0===this.nodeStack_.length)return null;var t,e=this.nodeStack_.pop();if(t=this.resultGenerator_?this.resultGenerator_(e.key,e.value):{key:e.key,value:e.value},this.isReverse_)for(e=e.left;!e.isEmpty();)this.nodeStack_.push(e),e=e.right;else for(e=e.right;!e.isEmpty();)this.nodeStack_.push(e),e=e.left;return t},t.prototype.hasNext=function(){return this.nodeStack_.length>0},t.prototype.peek=function(){if(0===this.nodeStack_.length)return null;var t=this.nodeStack_[this.nodeStack_.length-1];return this.resultGenerator_?this.resultGenerator_(t.key,t.value):{key:t.key,value:t.value}},t}(),St=function(){function t(e,n,r,i,o){this.key=e,this.value=n,this.color=null!=r?r:t.RED,this.left=null!=i?i:Nt.EMPTY_NODE,this.right=null!=o?o:Nt.EMPTY_NODE}return t.prototype.copy=function(e,n,r,i,o){return new t(null!=e?e:this.key,null!=n?n:this.value,null!=r?r:this.color,null!=i?i:this.left,null!=o?o:this.right)},t.prototype.count=function(){return this.left.count()+1+this.right.count()},t.prototype.isEmpty=function(){return!1},t.prototype.inorderTraversal=function(t){return this.left.inorderTraversal(t)||t(this.key,this.value)||this.right.inorderTraversal(t)},t.prototype.reverseTraversal=function(t){return this.right.reverseTraversal(t)||t(this.key,this.value)||this.left.reverseTraversal(t)},t.prototype.min_=function(){return this.left.isEmpty()?this:this.left.min_()},t.prototype.minKey=function(){return this.min_().key},t.prototype.maxKey=function(){return this.right.isEmpty()?this.key:this.right.maxKey()},t.prototype.insert=function(t,e,n){var r,i;return(i=(r=n(t,(i=this).key))<0?i.copy(null,null,null,i.left.insert(t,e,n),null):0===r?i.copy(null,e,null,null,null):i.copy(null,null,null,null,i.right.insert(t,e,n))).fixUp_()},t.prototype.removeMin_=function(){if(this.left.isEmpty())return Nt.EMPTY_NODE;var t=this;return t.left.isRed_()||t.left.left.isRed_()||(t=t.moveRedLeft_()),(t=t.copy(null,null,null,t.left.removeMin_(),null)).fixUp_()},t.prototype.remove=function(t,e){var n,r;if(e(t,(n=this).key)<0)n.left.isEmpty()||n.left.isRed_()||n.left.left.isRed_()||(n=n.moveRedLeft_()),n=n.copy(null,null,null,n.left.remove(t,e),null);else{if(n.left.isRed_()&&(n=n.rotateRight_()),n.right.isEmpty()||n.right.isRed_()||n.right.left.isRed_()||(n=n.moveRedRight_()),0===e(t,n.key)){if(n.right.isEmpty())return Nt.EMPTY_NODE;r=n.right.min_(),n=n.copy(r.key,r.value,null,null,n.right.removeMin_())}n=n.copy(null,null,null,null,n.right.remove(t,e))}return n.fixUp_()},t.prototype.isRed_=function(){return this.color},t.prototype.fixUp_=function(){var t=this;return t.right.isRed_()&&!t.left.isRed_()&&(t=t.rotateLeft_()),t.left.isRed_()&&t.left.left.isRed_()&&(t=t.rotateRight_()),t.left.isRed_()&&t.right.isRed_()&&(t=t.colorFlip_()),t},t.prototype.moveRedLeft_=function(){var t=this.colorFlip_();return t.right.left.isRed_()&&(t=(t=(t=t.copy(null,null,null,null,t.right.rotateRight_())).rotateLeft_()).colorFlip_()),t},t.prototype.moveRedRight_=function(){var t=this.colorFlip_();return t.left.left.isRed_()&&(t=(t=t.rotateRight_()).colorFlip_()),t},t.prototype.rotateLeft_=function(){var e=this.copy(null,null,t.RED,null,this.right.left);return this.right.copy(null,null,this.color,e,null)},t.prototype.rotateRight_=function(){var e=this.copy(null,null,t.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,e)},t.prototype.colorFlip_=function(){var t=this.left.copy(null,null,!this.left.color,null,null),e=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,t,e)},t.prototype.checkMaxDepth_=function(){var t=this.check_();return Math.pow(2,t)<=this.count()+1},t.prototype.check_=function(){var t;if(this.isRed_()&&this.left.isRed_())throw new Error("Red node has red child("+this.key+","+this.value+")");if(this.right.isRed_())throw new Error("Right child of ("+this.key+","+this.value+") is red");if((t=this.left.check_())!==this.right.check_())throw new Error("Black depths differ");return t+(this.isRed_()?0:1)},t.RED=!0,t.BLACK=!1,t}(),It=function(){function t(){}return t.prototype.copy=function(t,e,n,r,i){return this},t.prototype.insert=function(t,e,n){return new St(t,e,null)},t.prototype.remove=function(t,e){return this},t.prototype.count=function(){return 0},t.prototype.isEmpty=function(){return!0},t.prototype.inorderTraversal=function(t){return!1},t.prototype.reverseTraversal=function(t){return!1},t.prototype.minKey=function(){return null},t.prototype.maxKey=function(){return null},t.prototype.check_=function(){return 0},t.prototype.isRed_=function(){return!1},t}(),Nt=function(){function t(e,n){void 0===n&&(n=t.EMPTY_NODE),this.comparator_=e,this.root_=n}return t.prototype.insert=function(e,n){return new t(this.comparator_,this.root_.insert(e,n,this.comparator_).copy(null,null,St.BLACK,null,null))},t.prototype.remove=function(e){return new t(this.comparator_,this.root_.remove(e,this.comparator_).copy(null,null,St.BLACK,null,null))},t.prototype.get=function(t){for(var e,n=this.root_;!n.isEmpty();){if(0===(e=this.comparator_(t,n.key)))return n.value;e<0?n=n.left:e>0&&(n=n.right)}return null},t.prototype.getPredecessorKey=function(t){for(var e,n=this.root_,r=null;!n.isEmpty();){if(0===(e=this.comparator_(t,n.key))){if(n.left.isEmpty())return r?r.key:null;for(n=n.left;!n.right.isEmpty();)n=n.right;return n.key}e<0?n=n.left:e>0&&(r=n,n=n.right)}throw new Error("Attempted to find predecessor key for a nonexistent key.  What gives?")},t.prototype.isEmpty=function(){return this.root_.isEmpty()},t.prototype.count=function(){return this.root_.count()},t.prototype.minKey=function(){return this.root_.minKey()},t.prototype.maxKey=function(){return this.root_.maxKey()},t.prototype.inorderTraversal=function(t){return this.root_.inorderTraversal(t)},t.prototype.reverseTraversal=function(t){return this.root_.reverseTraversal(t)},t.prototype.getIterator=function(t){return new Tt(this.root_,null,this.comparator_,!1,t)},t.prototype.getIteratorFrom=function(t,e){return new Tt(this.root_,t,this.comparator_,!1,e)},t.prototype.getReverseIteratorFrom=function(t,e){return new Tt(this.root_,t,this.comparator_,!0,e)},t.prototype.getReverseIterator=function(t){return new Tt(this.root_,null,this.comparator_,!0,t)},t.EMPTY_NODE=new It,t}(),At=Math.log(2),Rt=function(){function t(t){this.count=function(t){return parseInt(Math.log(t)/At,10)}(t+1),this.current_=this.count-1;var e=function(t){return parseInt(Array(t+1).join("1"),2)}(this.count);this.bits_=t+1&e}return t.prototype.nextBitIsOne=function(){var t=!(this.bits_&1<<this.current_);return this.current_--,t},t}(),Ot=function(t,e,n,r){t.sort(e);var i=function(e,r){var o,a,s=r-e;if(0==s)return null;if(1==s)return o=t[e],a=n?n(o):o,new St(a,o.node,St.BLACK,null,null);var u=parseInt(s/2,10)+e,c=i(e,u),h=i(u+1,r);return o=t[u],a=n?n(o):o,new St(a,o.node,St.BLACK,c,h)},o=function(e){for(var r=null,o=null,a=t.length,s=function(e,r){var o=a-e,s=a;a-=e;var c=i(o+1,s),h=t[o],l=n?n(h):h;u(new St(l,h.node,r,null,c))},u=function(t){r?(r.left=t,r=t):(o=t,r=t)},c=0;c<e.count;++c){var h=e.nextBitIsOne(),l=Math.pow(2,e.count-(c+1));h?s(l,St.BLACK):(s(l,St.BLACK),s(l,St.RED))}return o}(new Rt(t.length));return new Nt(r||e,o)},Pt={},kt=function(){function t(t,e){this.indexes_=t,this.indexSet_=e}return Object.defineProperty(t,"Default",{get:function(){return i.assert(Pt&&Ct,"ChildrenNode.ts has not been loaded"),wt=wt||new t({".priority":Pt},{".priority":Ct})},enumerable:!0,configurable:!0}),t.prototype.get=function(t){var e=i.safeGet(this.indexes_,t);if(!e)throw new Error("No index defined for "+t);return e===Pt?null:e},t.prototype.hasIndex=function(t){return i.contains(this.indexSet_,t.toString())},t.prototype.addIndex=function(e,n){i.assert(e!==dt,"KeyIndex always exists and isn't meant to be added to the IndexMap.");for(var r,o=[],a=!1,s=n.getIterator(lt.Wrap),u=s.getNext();u;)a=a||e.isDefinedOn(u.node),o.push(u),u=s.getNext();r=a?Ot(o,e.getCompare()):Pt;var c=e.toString(),h=i.clone(this.indexSet_);h[c]=e;var l=i.clone(this.indexes_);return l[c]=r,new t(l,h)},t.prototype.addToIndexes=function(e,n){var r=this;return new t(i.map(this.indexes_,function(t,o){var a=i.safeGet(r.indexSet_,o);if(i.assert(a,"Missing index implementation for "+o),t===Pt){if(a.isDefinedOn(e.node)){for(var s=[],u=n.getIterator(lt.Wrap),c=u.getNext();c;)c.name!=e.name&&s.push(c),c=u.getNext();return s.push(e),Ot(s,a.getCompare())}return Pt}var h=n.get(e.name),l=t;return h&&(l=l.remove(new lt(e.name,h))),l.insert(e,e.node)}),this.indexSet_)},t.prototype.removeFromIndexes=function(e,n){return new t(i.map(this.indexes_,function(t){if(t===Pt)return t;var r=n.get(e.name);return r?t.remove(new lt(e.name,r)):t}),this.indexSet_)},t}();function Dt(t,e){return A(t.name,e.name)}function xt(t,e){return A(t,e)}var Lt=function(){function t(t,e,n){this.children_=t,this.priorityNode_=e,this.indexMap_=n,this.lazyHash_=null,this.priorityNode_&&_t(this.priorityNode_),this.children_.isEmpty()&&i.assert(!this.priorityNode_||this.priorityNode_.isEmpty(),"An empty node cannot have a priority")}return Object.defineProperty(t,"EMPTY_NODE",{get:function(){return Et||(Et=new t(new Nt(xt),null,kt.Default))},enumerable:!0,configurable:!0}),t.prototype.isLeafNode=function(){return!1},t.prototype.getPriority=function(){return this.priorityNode_||Et},t.prototype.updatePriority=function(e){return this.children_.isEmpty()?this:new t(this.children_,e,this.indexMap_)},t.prototype.getImmediateChild=function(t){if(".priority"===t)return this.getPriority();var e=this.children_.get(t);return null===e?Et:e},t.prototype.getChild=function(t){var e=t.getFront();return null===e?this:this.getImmediateChild(e).getChild(t.popFront())},t.prototype.hasChild=function(t){return null!==this.children_.get(t)},t.prototype.updateImmediateChild=function(e,n){if(i.assert(n,"We should always be passing snapshot nodes"),".priority"===e)return this.updatePriority(n);var r=new lt(e,n),o=void 0,a=void 0;return n.isEmpty()?(o=this.children_.remove(e),a=this.indexMap_.removeFromIndexes(r,this.children_)):(o=this.children_.insert(e,n),a=this.indexMap_.addToIndexes(r,this.children_)),new t(o,o.isEmpty()?Et:this.priorityNode_,a)},t.prototype.updateChild=function(t,e){var n=t.getFront();if(null===n)return e;i.assert(".priority"!==t.getFront()||1===t.getLength(),".priority must be the last token in a path");var r=this.getImmediateChild(n).updateChild(t.popFront(),e);return this.updateImmediateChild(n,r)},t.prototype.isEmpty=function(){return this.children_.isEmpty()},t.prototype.numChildren=function(){return this.children_.count()},t.prototype.val=function(e){if(this.isEmpty())return null;var n={},r=0,i=0,o=!0;if(this.forEachChild(Ct,function(a,s){n[a]=s.val(e),r++,o&&t.INTEGER_REGEXP_.test(a)?i=Math.max(i,Number(a)):o=!1}),!e&&o&&i<2*r){var a=[];for(var s in n)a[s]=n[s];return a}return e&&!this.getPriority().isEmpty()&&(n[".priority"]=this.getPriority().val()),n},t.prototype.hash=function(){if(null===this.lazyHash_){var t="";this.getPriority().isEmpty()||(t+="priority:"+mt(this.getPriority().val())+":"),this.forEachChild(Ct,function(e,n){var r=n.hash();""!==r&&(t+=":"+e+":"+r)}),this.lazyHash_=""===t?"":v(t)}return this.lazyHash_},t.prototype.getPredecessorChildName=function(t,e,n){var r=this.resolveIndex_(n);if(r){var i=r.getPredecessorKey(new lt(t,e));return i?i.name:null}return this.children_.getPredecessorKey(t)},t.prototype.getFirstChildName=function(t){var e=this.resolveIndex_(t);if(e){var n=e.minKey();return n&&n.name}return this.children_.minKey()},t.prototype.getFirstChild=function(t){var e=this.getFirstChildName(t);return e?new lt(e,this.children_.get(e)):null},t.prototype.getLastChildName=function(t){var e=this.resolveIndex_(t);if(e){var n=e.maxKey();return n&&n.name}return this.children_.maxKey()},t.prototype.getLastChild=function(t){var e=this.getLastChildName(t);return e?new lt(e,this.children_.get(e)):null},t.prototype.forEachChild=function(t,e){var n=this.resolveIndex_(t);return n?n.inorderTraversal(function(t){return e(t.name,t.node)}):this.children_.inorderTraversal(e)},t.prototype.getIterator=function(t){return this.getIteratorFrom(t.minPost(),t)},t.prototype.getIteratorFrom=function(t,e){var n=this.resolveIndex_(e);if(n)return n.getIteratorFrom(t,function(t){return t});for(var r=this.children_.getIteratorFrom(t.name,lt.Wrap),i=r.peek();null!=i&&e.compare(i,t)<0;)r.getNext(),i=r.peek();return r},t.prototype.getReverseIterator=function(t){return this.getReverseIteratorFrom(t.maxPost(),t)},t.prototype.getReverseIteratorFrom=function(t,e){var n=this.resolveIndex_(e);if(n)return n.getReverseIteratorFrom(t,function(t){return t});for(var r=this.children_.getReverseIteratorFrom(t.name,lt.Wrap),i=r.peek();null!=i&&e.compare(i,t)>0;)r.getNext(),i=r.peek();return r},t.prototype.compareTo=function(t){return this.isEmpty()?t.isEmpty()?0:-1:t.isLeafNode()||t.isEmpty()?1:t===Mt?-1:0},t.prototype.withIndex=function(e){if(e===dt||this.indexMap_.hasIndex(e))return this;var n=this.indexMap_.addIndex(e,this.children_);return new t(this.children_,this.priorityNode_,n)},t.prototype.isIndexed=function(t){return t===dt||this.indexMap_.hasIndex(t)},t.prototype.equals=function(t){if(t===this)return!0;if(t.isLeafNode())return!1;var e=t;if(this.getPriority().equals(e.getPriority())){if(this.children_.count()===e.children_.count()){for(var n=this.getIterator(Ct),r=e.getIterator(Ct),i=n.getNext(),o=r.getNext();i&&o;){if(i.name!==o.name||!i.node.equals(o.node))return!1;i=n.getNext(),o=r.getNext()}return null===i&&null===o}return!1}return!1},t.prototype.resolveIndex_=function(t){return t===dt?null:this.indexMap_.get(t.toString())},t.INTEGER_REGEXP_=/^(0|[1-9]\d*)$/,t}(),Mt=new(function(t){function e(){return t.call(this,new Nt(xt),Lt.EMPTY_NODE,kt.Default)||this}return a.__extends(e,t),e.prototype.compareTo=function(t){return t===this?0:1},e.prototype.equals=function(t){return t===this},e.prototype.getPriority=function(){return this},e.prototype.getImmediateChild=function(t){return Lt.EMPTY_NODE},e.prototype.isEmpty=function(){return!1},e}(Lt));Object.defineProperties(lt,{MIN:{value:new lt(I,Lt.EMPTY_NODE)},MAX:{value:new lt(N,Mt)}}),pt.__EMPTY_NODE=Lt.EMPTY_NODE,bt.__childrenNodeConstructor=Lt,function(t){G=t}(Mt),function(t){gt=t}(Mt);var Ft=!0;function Ut(t,e){if(void 0===e&&(e=null),null===t)return Lt.EMPTY_NODE;if("object"==typeof t&&".priority"in t&&(e=t[".priority"]),i.assert(null===e||"string"==typeof e||"number"==typeof e||"object"==typeof e&&".sv"in e,"Invalid priority type found: "+typeof e),"object"==typeof t&&".value"in t&&null!==t[".value"]&&(t=t[".value"]),"object"!=typeof t||".sv"in t)return new bt(t,Ut(e));if(t instanceof Array||!Ft){var n=Lt.EMPTY_NODE,r=t;return i.forEach(r,function(t,e){if(i.contains(r,t)&&"."!==t.substring(0,1)){var o=Ut(e);!o.isLeafNode()&&o.isEmpty()||(n=n.updateImmediateChild(t,o))}}),n.updatePriority(Ut(e))}var o=[],a=!1,s=t;if(i.forEach(s,function(t,e){if("string"!=typeof t||"."!==t.substring(0,1)){var n=Ut(s[t]);n.isEmpty()||(a=a||!n.getPriority().isEmpty(),o.push(new lt(t,n)))}}),0==o.length)return Lt.EMPTY_NODE;var u=Ot(o,Dt,function(t){return t.name},xt);if(a){var c=Ot(o,Ct.getCompare());return new Lt(u,Ut(e),new kt({".priority":c},{".priority":Ct}))}return new Lt(u,Ut(e),kt.Default)}!function(t){yt=t}(Ut);var jt,Wt,qt=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a.__extends(e,t),e.prototype.compare=function(t,e){var n=t.node.compareTo(e.node);return 0===n?A(t.name,e.name):n},e.prototype.isDefinedOn=function(t){return!0},e.prototype.indexedValueChanged=function(t,e){return!t.equals(e)},e.prototype.minPost=function(){return lt.MIN},e.prototype.maxPost=function(){return lt.MAX},e.prototype.makePost=function(t,e){var n=Ut(t);return new lt(e,n)},e.prototype.toString=function(){return".value"},e}(ft)),Vt=function(t){function e(e){var n=t.call(this)||this;return n.indexPath_=e,i.assert(!e.isEmpty()&&".priority"!==e.getFront(),"Can't create PathIndex with empty path or .priority key"),n}return a.__extends(e,t),e.prototype.extractChild=function(t){return t.getChild(this.indexPath_)},e.prototype.isDefinedOn=function(t){return!t.getChild(this.indexPath_).isEmpty()},e.prototype.compare=function(t,e){var n=this.extractChild(t.node),r=this.extractChild(e.node),i=n.compareTo(r);return 0===i?A(t.name,e.name):i},e.prototype.makePost=function(t,e){var n=Ut(t),r=Lt.EMPTY_NODE.updateChild(this.indexPath_,n);return new lt(e,r)},e.prototype.maxPost=function(){var t=Lt.EMPTY_NODE.updateChild(this.indexPath_,Mt);return new lt(N,t)},e.prototype.toString=function(){return this.indexPath_.slice().join("/")},e}(ft),Bt=function(){function t(t,e,n){this.node_=t,this.ref_=e,this.index_=n}return t.prototype.val=function(){return i.validateArgCount("DataSnapshot.val",0,0,arguments.length),this.node_.val()},t.prototype.exportVal=function(){return i.validateArgCount("DataSnapshot.exportVal",0,0,arguments.length),this.node_.val(!0)},t.prototype.toJSON=function(){return i.validateArgCount("DataSnapshot.toJSON",0,1,arguments.length),this.exportVal()},t.prototype.exists=function(){return i.validateArgCount("DataSnapshot.exists",0,0,arguments.length),!this.node_.isEmpty()},t.prototype.child=function(e){i.validateArgCount("DataSnapshot.child",0,1,arguments.length),e=String(e),ot("DataSnapshot.child",1,e,!1);var n=new W(e),r=this.ref_.child(n);return new t(this.node_.getChild(n),r,Ct)},t.prototype.hasChild=function(t){i.validateArgCount("DataSnapshot.hasChild",1,1,arguments.length),ot("DataSnapshot.hasChild",1,t,!1);var e=new W(t);return!this.node_.getChild(e).isEmpty()},t.prototype.getPriority=function(){return i.validateArgCount("DataSnapshot.getPriority",0,0,arguments.length),this.node_.getPriority().val()},t.prototype.forEach=function(e){var n=this;return i.validateArgCount("DataSnapshot.forEach",1,1,arguments.length),i.validateCallback("DataSnapshot.forEach",1,e,!1),!this.node_.isLeafNode()&&!!this.node_.forEachChild(this.index_,function(r,i){return e(new t(i,n.ref_.child(r),Ct))})},t.prototype.hasChildren=function(){return i.validateArgCount("DataSnapshot.hasChildren",0,0,arguments.length),!this.node_.isLeafNode()&&!this.node_.isEmpty()},Object.defineProperty(t.prototype,"key",{get:function(){return this.ref_.getKey()},enumerable:!0,configurable:!0}),t.prototype.numChildren=function(){return i.validateArgCount("DataSnapshot.numChildren",0,0,arguments.length),this.node_.numChildren()},t.prototype.getRef=function(){return i.validateArgCount("DataSnapshot.ref",0,0,arguments.length),this.ref_},Object.defineProperty(t.prototype,"ref",{get:function(){return this.getRef()},enumerable:!0,configurable:!0}),t}(),Ht=function(){function t(t,e,n,r){this.eventType=t,this.eventRegistration=e,this.snapshot=n,this.prevName=r}return t.prototype.getPath=function(){var t=this.snapshot.getRef();return"value"===this.eventType?t.path:t.getParent().path},t.prototype.getEventType=function(){return this.eventType},t.prototype.getEventRunner=function(){return this.eventRegistration.getEventRunner(this)},t.prototype.toString=function(){return this.getPath().toString()+":"+this.eventType+":"+i.stringify(this.snapshot.exportVal())},t}(),Gt=function(){function t(t,e,n){this.eventRegistration=t,this.error=e,this.path=n}return t.prototype.getPath=function(){return this.path},t.prototype.getEventType=function(){return"cancel"},t.prototype.getEventRunner=function(){return this.eventRegistration.getEventRunner(this)},t.prototype.toString=function(){return this.path.toString()+":cancel"},t}(),Kt=function(){function t(t,e,n){this.callback_=t,this.cancelCallback_=e,this.context_=n}return t.prototype.respondsTo=function(t){return"value"===t},t.prototype.createEvent=function(t,e){var n=e.getQueryParams().getIndex();return new Ht("value",this,new Bt(t.snapshotNode,e.getRef(),n))},t.prototype.getEventRunner=function(t){var e=this.context_;if("cancel"===t.getEventType()){i.assert(this.cancelCallback_,"Raising a cancel event on a listener with no cancel callback");var n=this.cancelCallback_;return function(){n.call(e,t.error)}}var r=this.callback_;return function(){r.call(e,t.snapshot)}},t.prototype.createCancelEvent=function(t,e){return this.cancelCallback_?new Gt(this,t,e):null},t.prototype.matches=function(e){return e instanceof t&&(!e.callback_||!this.callback_||e.callback_===this.callback_&&e.context_===this.context_)},t.prototype.hasAnyCallback=function(){return null!==this.callback_},t}(),Qt=function(){function t(t,e,n){this.callbacks_=t,this.cancelCallback_=e,this.context_=n}return t.prototype.respondsTo=function(t){var e="children_added"===t?"child_added":t;return e="children_removed"===e?"child_removed":e,i.contains(this.callbacks_,e)},t.prototype.createCancelEvent=function(t,e){return this.cancelCallback_?new Gt(this,t,e):null},t.prototype.createEvent=function(t,e){i.assert(null!=t.childName,"Child events should have a childName.");var n=e.getRef().child(t.childName),r=e.getQueryParams().getIndex();return new Ht(t.type,this,new Bt(t.snapshotNode,n,r),t.prevName)},t.prototype.getEventRunner=function(t){var e=this.context_;if("cancel"===t.getEventType()){i.assert(this.cancelCallback_,"Raising a cancel event on a listener with no cancel callback");var n=this.cancelCallback_;return function(){n.call(e,t.error)}}var r=this.callbacks_[t.eventType];return function(){r.call(e,t.snapshot,t.prevName)}},t.prototype.matches=function(e){if(e instanceof t){if(!this.callbacks_||!e.callbacks_)return!0;if(this.context_===e.context_){var n=i.getCount(e.callbacks_);if(n===i.getCount(this.callbacks_)){if(1===n){var r=i.getAnyKey(e.callbacks_),o=i.getAnyKey(this.callbacks_);return!(o!==r||e.callbacks_[r]&&this.callbacks_[o]&&e.callbacks_[r]!==this.callbacks_[o])}return i.every(this.callbacks_,function(t,n){return e.callbacks_[t]===n})}}}return!1},t.prototype.hasAnyCallback=function(){return null!==this.callbacks_},t}(),zt=function(){function t(t,e,n,r){this.repo=t,this.path=e,this.queryParams_=n,this.orderByCalled_=r}return Object.defineProperty(t,"__referenceConstructor",{get:function(){return i.assert(jt,"Reference.ts has not been loaded"),jt},set:function(t){jt=t},enumerable:!0,configurable:!0}),t.validateQueryEndpoints_=function(t){var e=null,n=null;if(t.hasStart()&&(e=t.getIndexStartValue()),t.hasEnd()&&(n=t.getIndexEndValue()),t.getIndex()===dt){var r="Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().",o="Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.";if(t.hasStart()){if(t.getIndexStartName()!=I)throw new Error(r);if("string"!=typeof e)throw new Error(o)}if(t.hasEnd()){if(t.getIndexEndName()!=N)throw new Error(r);if("string"!=typeof n)throw new Error(o)}}else if(t.getIndex()===Ct){if(null!=e&&!$(e)||null!=n&&!$(n))throw new Error("Query: When ordering by priority, the first argument passed to startAt(), endAt(), or equalTo() must be a valid priority value (null, a number, or a string).")}else if(i.assert(t.getIndex()instanceof Vt||t.getIndex()===qt,"unknown index type."),null!=e&&"object"==typeof e||null!=n&&"object"==typeof n)throw new Error("Query: First argument passed to startAt(), endAt(), or equalTo() cannot be an object.")},t.validateLimit_=function(t){if(t.hasStart()&&t.hasEnd()&&t.hasLimit()&&!t.hasAnchoredLimit())throw new Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.")},t.prototype.validateNoPreviousOrderByCall_=function(t){if(!0===this.orderByCalled_)throw new Error(t+": You can't combine multiple orderBy calls.")},t.prototype.getQueryParams=function(){return this.queryParams_},t.prototype.getRef=function(){return i.validateArgCount("Query.ref",0,0,arguments.length),new t.__referenceConstructor(this.repo,this.path)},t.prototype.on=function(e,n,r,o){i.validateArgCount("Query.on",2,4,arguments.length),rt("Query.on",1,e,!1),i.validateCallback("Query.on",2,n,!1);var a=t.getCancelAndContextArgs_("Query.on",r,o);if("value"===e)this.onValueEvent(n,a.cancel,a.context);else{var s={};s[e]=n,this.onChildEvent(s,a.cancel,a.context)}return n},t.prototype.onValueEvent=function(t,e,n){var r=new Kt(t,e||null,n||null);this.repo.addEventCallbackForQuery(this,r)},t.prototype.onChildEvent=function(t,e,n){var r=new Qt(t,e,n);this.repo.addEventCallbackForQuery(this,r)},t.prototype.off=function(t,e,n){i.validateArgCount("Query.off",0,3,arguments.length),rt("Query.off",1,t,!0),i.validateCallback("Query.off",2,e,!0),i.validateContextObject("Query.off",3,n,!0);var r=null,o=null;"value"===t?r=new Kt(e||null,null,n||null):t&&(e&&((o={})[t]=e),r=new Qt(o,null,n||null));this.repo.removeEventCallbackForQuery(this,r)},t.prototype.once=function(e,n,r,o){var a=this;i.validateArgCount("Query.once",1,4,arguments.length),rt("Query.once",1,e,!1),i.validateCallback("Query.once",2,n,!0);var s=t.getCancelAndContextArgs_("Query.once",r,o),u=!0,c=new i.Deferred;c.promise.catch(function(){});var h=function(t){u&&(u=!1,a.off(e,h),n&&n.bind(s.context)(t),c.resolve(t))};return this.on(e,h,function(t){a.off(e,h),s.cancel&&s.cancel.bind(s.context)(t),c.reject(t)}),c.promise},t.prototype.limitToFirst=function(e){if(i.validateArgCount("Query.limitToFirst",1,1,arguments.length),"number"!=typeof e||Math.floor(e)!==e||e<=0)throw new Error("Query.limitToFirst: First argument must be a positive integer.");if(this.queryParams_.hasLimit())throw new Error("Query.limitToFirst: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new t(this.repo,this.path,this.queryParams_.limitToFirst(e),this.orderByCalled_)},t.prototype.limitToLast=function(e){if(i.validateArgCount("Query.limitToLast",1,1,arguments.length),"number"!=typeof e||Math.floor(e)!==e||e<=0)throw new Error("Query.limitToLast: First argument must be a positive integer.");if(this.queryParams_.hasLimit())throw new Error("Query.limitToLast: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new t(this.repo,this.path,this.queryParams_.limitToLast(e),this.orderByCalled_)},t.prototype.orderByChild=function(e){if(i.validateArgCount("Query.orderByChild",1,1,arguments.length),"$key"===e)throw new Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');if("$priority"===e)throw new Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');if("$value"===e)throw new Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');ot("Query.orderByChild",1,e,!1),this.validateNoPreviousOrderByCall_("Query.orderByChild");var n=new W(e);if(n.isEmpty())throw new Error("Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.");var r=new Vt(n),o=this.queryParams_.orderBy(r);return t.validateQueryEndpoints_(o),new t(this.repo,this.path,o,!0)},t.prototype.orderByKey=function(){i.validateArgCount("Query.orderByKey",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByKey");var e=this.queryParams_.orderBy(dt);return t.validateQueryEndpoints_(e),new t(this.repo,this.path,e,!0)},t.prototype.orderByPriority=function(){i.validateArgCount("Query.orderByPriority",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByPriority");var e=this.queryParams_.orderBy(Ct);return t.validateQueryEndpoints_(e),new t(this.repo,this.path,e,!0)},t.prototype.orderByValue=function(){i.validateArgCount("Query.orderByValue",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByValue");var e=this.queryParams_.orderBy(qt);return t.validateQueryEndpoints_(e),new t(this.repo,this.path,e,!0)},t.prototype.startAt=function(e,n){void 0===e&&(e=null),i.validateArgCount("Query.startAt",0,2,arguments.length),Z("Query.startAt",1,e,this.path,!0),it("Query.startAt",2,n,!0);var r=this.queryParams_.startAt(e,n);if(t.validateLimit_(r),t.validateQueryEndpoints_(r),this.queryParams_.hasStart())throw new Error("Query.startAt: Starting point was already set (by another call to startAt or equalTo).");return void 0===e&&(e=null,n=null),new t(this.repo,this.path,r,this.orderByCalled_)},t.prototype.endAt=function(e,n){void 0===e&&(e=null),i.validateArgCount("Query.endAt",0,2,arguments.length),Z("Query.endAt",1,e,this.path,!0),it("Query.endAt",2,n,!0);var r=this.queryParams_.endAt(e,n);if(t.validateLimit_(r),t.validateQueryEndpoints_(r),this.queryParams_.hasEnd())throw new Error("Query.endAt: Ending point was already set (by another call to endAt or equalTo).");return new t(this.repo,this.path,r,this.orderByCalled_)},t.prototype.equalTo=function(t,e){if(i.validateArgCount("Query.equalTo",1,2,arguments.length),Z("Query.equalTo",1,t,this.path,!1),it("Query.equalTo",2,e,!0),this.queryParams_.hasStart())throw new Error("Query.equalTo: Starting point was already set (by another call to startAt or equalTo).");if(this.queryParams_.hasEnd())throw new Error("Query.equalTo: Ending point was already set (by another call to endAt or equalTo).");return this.startAt(t,e).endAt(t,e)},t.prototype.toString=function(){return i.validateArgCount("Query.toString",0,0,arguments.length),this.repo.toString()+this.path.toUrlEncodedString()},t.prototype.toJSON=function(){return i.validateArgCount("Query.toJSON",0,1,arguments.length),this.toString()},t.prototype.queryObject=function(){return this.queryParams_.getQueryObject()},t.prototype.queryIdentifier=function(){var t=this.queryObject(),e=P(t);return"{}"===e?"default":e},t.prototype.isEqual=function(e){if(i.validateArgCount("Query.isEqual",1,1,arguments.length),!(e instanceof t)){throw new Error("Query.isEqual failed: First argument must be an instance of firebase.database.Query.")}var n=this.repo===e.repo,r=this.path.equals(e.path),o=this.queryIdentifier()===e.queryIdentifier();return n&&r&&o},t.getCancelAndContextArgs_=function(t,e,n){var r={cancel:null,context:null};if(e&&n)r.cancel=e,i.validateCallback(t,3,r.cancel,!0),r.context=n,i.validateContextObject(t,4,r.context,!0);else if(e)if("object"==typeof e&&null!==e)r.context=e;else{if("function"!=typeof e)throw new Error(i.errorPrefix(t,3,!0)+" must either be a cancel callback or a context object.");r.cancel=e}return r},Object.defineProperty(t.prototype,"ref",{get:function(){return this.getRef()},enumerable:!0,configurable:!0}),t}(),Xt=function(){function t(){this.set={}}return t.prototype.add=function(t,e){this.set[t]=null===e||e},t.prototype.contains=function(t){return i.contains(this.set,t)},t.prototype.get=function(t){return this.contains(t)?this.set[t]:void 0},t.prototype.remove=function(t){delete this.set[t]},t.prototype.clear=function(){this.set={}},t.prototype.isEmpty=function(){return i.isEmpty(this.set)},t.prototype.count=function(){return i.getCount(this.set)},t.prototype.each=function(t){i.forEach(this.set,function(e,n){return t(e,n)})},t.prototype.keys=function(){var t=[];return i.forEach(this.set,function(e){t.push(e)}),t},t}(),Yt=function(){function t(){this.value_=null,this.children_=null}return t.prototype.find=function(t){if(null!=this.value_)return this.value_.getChild(t);if(t.isEmpty()||null==this.children_)return null;var e=t.getFront();return t=t.popFront(),this.children_.contains(e)?this.children_.get(e).find(t):null},t.prototype.remember=function(e,n){if(e.isEmpty())this.value_=n,this.children_=null;else if(null!==this.value_)this.value_=this.value_.updateChild(e,n);else{null==this.children_&&(this.children_=new Xt);var r=e.getFront();this.children_.contains(r)||this.children_.add(r,new t);var i=this.children_.get(r);e=e.popFront(),i.remember(e,n)}},t.prototype.forget=function(t){if(t.isEmpty())return this.value_=null,this.children_=null,!0;if(null!==this.value_){if(this.value_.isLeafNode())return!1;var e=this.value_;this.value_=null;var n=this;return e.forEachChild(Ct,function(t,e){n.remember(new W(t),e)}),this.forget(t)}if(null!==this.children_){var r=t.getFront();if(t=t.popFront(),this.children_.contains(r))this.children_.get(r).forget(t)&&this.children_.remove(r);return!!this.children_.isEmpty()&&(this.children_=null,!0)}return!0},t.prototype.forEachTree=function(t,e){null!==this.value_?e(t,this.value_):this.forEachChild(function(n,r){var i=new W(t.toString()+"/"+n);r.forEachTree(i,e)})},t.prototype.forEachChild=function(t){null!==this.children_&&this.children_.each(function(e,n){t(e,n)})},t}(),Jt=function(t,e){return t&&"object"==typeof t?(i.assert(".sv"in t,"Unexpected leaf node or priority contents"),e[t[".sv"]]):t},$t=function(t,e){var n,r=t.getPriority().val(),i=Jt(r,e);if(t.isLeafNode()){var o=t,a=Jt(o.getValue(),e);return a!==o.getValue()||i!==o.getPriority().val()?new bt(a,Ut(i)):t}var s=t;return n=s,i!==s.getPriority().val()&&(n=n.updatePriority(new bt(i))),s.forEachChild(Ct,function(t,r){var i=$t(r,e);i!==r&&(n=n.updateImmediateChild(t,i))}),n};!function(t){t[t.OVERWRITE=0]="OVERWRITE",t[t.MERGE=1]="MERGE",t[t.ACK_USER_WRITE=2]="ACK_USER_WRITE",t[t.LISTEN_COMPLETE=3]="LISTEN_COMPLETE"}(Wt||(Wt={}));var Zt,te,ee=function(){function t(t,e,n,r){this.fromUser=t,this.fromServer=e,this.queryId=n,this.tagged=r,i.assert(!r||e,"Tagged queries must be from server.")}return t.User=new t(!0,!1,null,!1),t.Server=new t(!1,!0,null,!1),t.forServerTaggedQuery=function(e){return new t(!1,!0,e,!0)},t}(),ne=function(){function t(t,e,n){this.path=t,this.affectedTree=e,this.revert=n,this.type=Wt.ACK_USER_WRITE,this.source=ee.User}return t.prototype.operationForChild=function(e){if(this.path.isEmpty()){if(null!=this.affectedTree.value)return i.assert(this.affectedTree.children.isEmpty(),"affectedTree should not have overlapping affected paths."),this;var n=this.affectedTree.subtree(new W(e));return new t(W.Empty,n,this.revert)}return i.assert(this.path.getFront()===e,"operationForChild called for unrelated child."),new t(this.path.popFront(),this.affectedTree,this.revert)},t}(),re=function(){return Zt||(Zt=new Nt(R)),Zt},ie=function(){function t(t,e){void 0===e&&(e=re()),this.value=t,this.children=e}return t.fromObject=function(e){var n=t.Empty;return i.forEach(e,function(t,e){n=n.set(new W(t),e)}),n},t.prototype.isEmpty=function(){return null===this.value&&this.children.isEmpty()},t.prototype.findRootMostMatchingPathAndValue=function(t,e){if(null!=this.value&&e(this.value))return{path:W.Empty,value:this.value};if(t.isEmpty())return null;var n=t.getFront(),r=this.children.get(n);if(null!==r){var i=r.findRootMostMatchingPathAndValue(t.popFront(),e);return null!=i?{path:new W(n).child(i.path),value:i.value}:null}return null},t.prototype.findRootMostValueAndPath=function(t){return this.findRootMostMatchingPathAndValue(t,function(){return!0})},t.prototype.subtree=function(e){if(e.isEmpty())return this;var n=e.getFront(),r=this.children.get(n);return null!==r?r.subtree(e.popFront()):t.Empty},t.prototype.set=function(e,n){if(e.isEmpty())return new t(n,this.children);var r=e.getFront(),i=(this.children.get(r)||t.Empty).set(e.popFront(),n),o=this.children.insert(r,i);return new t(this.value,o)},t.prototype.remove=function(e){if(e.isEmpty())return this.children.isEmpty()?t.Empty:new t(null,this.children);var n=e.getFront(),r=this.children.get(n);if(r){var i=r.remove(e.popFront()),o=void 0;return o=i.isEmpty()?this.children.remove(n):this.children.insert(n,i),null===this.value&&o.isEmpty()?t.Empty:new t(this.value,o)}return this},t.prototype.get=function(t){if(t.isEmpty())return this.value;var e=t.getFront(),n=this.children.get(e);return n?n.get(t.popFront()):null},t.prototype.setTree=function(e,n){if(e.isEmpty())return n;var r=e.getFront(),i=(this.children.get(r)||t.Empty).setTree(e.popFront(),n),o=void 0;return o=i.isEmpty()?this.children.remove(r):this.children.insert(r,i),new t(this.value,o)},t.prototype.fold=function(t){return this.fold_(W.Empty,t)},t.prototype.fold_=function(t,e){var n={};return this.children.inorderTraversal(function(r,i){n[r]=i.fold_(t.child(r),e)}),e(t,this.value,n)},t.prototype.findOnPath=function(t,e){return this.findOnPath_(t,W.Empty,e)},t.prototype.findOnPath_=function(t,e,n){var r=!!this.value&&n(e,this.value);if(r)return r;if(t.isEmpty())return null;var i=t.getFront(),o=this.children.get(i);return o?o.findOnPath_(t.popFront(),e.child(i),n):null},t.prototype.foreachOnPath=function(t,e){return this.foreachOnPath_(t,W.Empty,e)},t.prototype.foreachOnPath_=function(e,n,r){if(e.isEmpty())return this;this.value&&r(n,this.value);var i=e.getFront(),o=this.children.get(i);return o?o.foreachOnPath_(e.popFront(),n.child(i),r):t.Empty},t.prototype.foreach=function(t){this.foreach_(W.Empty,t)},t.prototype.foreach_=function(t,e){this.children.inorderTraversal(function(n,r){r.foreach_(t.child(n),e)}),this.value&&e(t,this.value)},t.prototype.foreachChild=function(t){this.children.inorderTraversal(function(e,n){n.value&&t(e,n.value)})},t.Empty=new t(null),t}(),oe=function(){function t(t,e){this.source=t,this.path=e,this.type=Wt.LISTEN_COMPLETE}return t.prototype.operationForChild=function(e){return this.path.isEmpty()?new t(this.source,W.Empty):new t(this.source,this.path.popFront())},t}(),ae=function(){function t(t,e,n){this.source=t,this.path=e,this.snap=n,this.type=Wt.OVERWRITE}return t.prototype.operationForChild=function(e){return this.path.isEmpty()?new t(this.source,W.Empty,this.snap.getImmediateChild(e)):new t(this.source,this.path.popFront(),this.snap)},t}(),se=function(){function t(t,e,n){this.source=t,this.path=e,this.children=n,this.type=Wt.MERGE}return t.prototype.operationForChild=function(e){if(this.path.isEmpty()){var n=this.children.subtree(new W(e));return n.isEmpty()?null:n.value?new ae(this.source,W.Empty,n.value):new t(this.source,W.Empty,n)}return i.assert(this.path.getFront()===e,"Can't get a merge for a child not on the path of the operation"),new t(this.source,this.path.popFront(),this.children)},t.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" merge: "+this.children.toString()+")"},t}(),ue=function(){function t(t,e,n){this.node_=t,this.fullyInitialized_=e,this.filtered_=n}return t.prototype.isFullyInitialized=function(){return this.fullyInitialized_},t.prototype.isFiltered=function(){return this.filtered_},t.prototype.isCompleteForPath=function(t){if(t.isEmpty())return this.isFullyInitialized()&&!this.filtered_;var e=t.getFront();return this.isCompleteForChild(e)},t.prototype.isCompleteForChild=function(t){return this.isFullyInitialized()&&!this.filtered_||this.node_.hasChild(t)},t.prototype.getNode=function(){return this.node_},t}(),ce=function(){function t(t,e){this.eventCache_=t,this.serverCache_=e}return t.prototype.updateEventSnap=function(e,n,r){return new t(new ue(e,n,r),this.serverCache_)},t.prototype.updateServerSnap=function(e,n,r){return new t(this.eventCache_,new ue(e,n,r))},t.prototype.getEventCache=function(){return this.eventCache_},t.prototype.getCompleteEventSnap=function(){return this.eventCache_.isFullyInitialized()?this.eventCache_.getNode():null},t.prototype.getServerCache=function(){return this.serverCache_},t.prototype.getCompleteServerSnap=function(){return this.serverCache_.isFullyInitialized()?this.serverCache_.getNode():null},t.Empty=new t(new ue(Lt.EMPTY_NODE,!1,!1),new ue(Lt.EMPTY_NODE,!1,!1)),t}(),he=function(){function t(t,e,n,r,i){this.type=t,this.snapshotNode=e,this.childName=n,this.oldSnap=r,this.prevName=i}return t.valueChange=function(e){return new t(t.VALUE,e)},t.childAddedChange=function(e,n){return new t(t.CHILD_ADDED,n,e)},t.childRemovedChange=function(e,n){return new t(t.CHILD_REMOVED,n,e)},t.childChangedChange=function(e,n,r){return new t(t.CHILD_CHANGED,n,e,r)},t.childMovedChange=function(e,n){return new t(t.CHILD_MOVED,n,e)},t.CHILD_ADDED="child_added",t.CHILD_REMOVED="child_removed",t.CHILD_CHANGED="child_changed",t.CHILD_MOVED="child_moved",t.VALUE="value",t}(),le=function(){function t(t){this.index_=t}return t.prototype.updateChild=function(t,e,n,r,o,a){i.assert(t.isIndexed(this.index_),"A node must be indexed if only a child is updated");var s=t.getImmediateChild(e);return s.getChild(r).equals(n.getChild(r))&&s.isEmpty()==n.isEmpty()?t:(null!=a&&(n.isEmpty()?t.hasChild(e)?a.trackChildChange(he.childRemovedChange(e,s)):i.assert(t.isLeafNode(),"A child remove without an old child only makes sense on a leaf node"):s.isEmpty()?a.trackChildChange(he.childAddedChange(e,n)):a.trackChildChange(he.childChangedChange(e,n,s))),t.isLeafNode()&&n.isEmpty()?t:t.updateImmediateChild(e,n).withIndex(this.index_))},t.prototype.updateFullNode=function(t,e,n){return null!=n&&(t.isLeafNode()||t.forEachChild(Ct,function(t,r){e.hasChild(t)||n.trackChildChange(he.childRemovedChange(t,r))}),e.isLeafNode()||e.forEachChild(Ct,function(e,r){if(t.hasChild(e)){var i=t.getImmediateChild(e);i.equals(r)||n.trackChildChange(he.childChangedChange(e,r,i))}else n.trackChildChange(he.childAddedChange(e,r))})),e.withIndex(this.index_)},t.prototype.updatePriority=function(t,e){return t.isEmpty()?Lt.EMPTY_NODE:t.updatePriority(e)},t.prototype.filtersNodes=function(){return!1},t.prototype.getIndexedFilter=function(){return this},t.prototype.getIndex=function(){return this.index_},t}(),fe=function(){function t(){this.changeMap_={}}return t.prototype.trackChildChange=function(t){var e=t.type,n=t.childName;i.assert(e==he.CHILD_ADDED||e==he.CHILD_CHANGED||e==he.CHILD_REMOVED,"Only child changes supported for tracking"),i.assert(".priority"!==n,"Only non-priority child changes can be tracked.");var r=i.safeGet(this.changeMap_,n);if(r){var o=r.type;if(e==he.CHILD_ADDED&&o==he.CHILD_REMOVED)this.changeMap_[n]=he.childChangedChange(n,t.snapshotNode,r.snapshotNode);else if(e==he.CHILD_REMOVED&&o==he.CHILD_ADDED)delete this.changeMap_[n];else if(e==he.CHILD_REMOVED&&o==he.CHILD_CHANGED)this.changeMap_[n]=he.childRemovedChange(n,r.oldSnap);else if(e==he.CHILD_CHANGED&&o==he.CHILD_ADDED)this.changeMap_[n]=he.childAddedChange(n,t.snapshotNode);else{if(e!=he.CHILD_CHANGED||o!=he.CHILD_CHANGED)throw i.assertionError("Illegal combination of changes: "+t+" occurred after "+r);this.changeMap_[n]=he.childChangedChange(n,t.snapshotNode,r.oldSnap)}}else this.changeMap_[n]=t},t.prototype.getChanges=function(){return i.getValues(this.changeMap_)},t}(),pe=new(function(){function t(){}return t.prototype.getCompleteChild=function(t){return null},t.prototype.getChildAfterChild=function(t,e,n){return null},t}()),de=function(){function t(t,e,n){void 0===n&&(n=null),this.writes_=t,this.viewCache_=e,this.optCompleteServerCache_=n}return t.prototype.getCompleteChild=function(t){var e=this.viewCache_.getEventCache();if(e.isCompleteForChild(t))return e.getNode().getImmediateChild(t);var n=null!=this.optCompleteServerCache_?new ue(this.optCompleteServerCache_,!0,!1):this.viewCache_.getServerCache();return this.writes_.calcCompleteChild(t,n)},t.prototype.getChildAfterChild=function(t,e,n){var r=null!=this.optCompleteServerCache_?this.optCompleteServerCache_:this.viewCache_.getCompleteServerSnap(),i=this.writes_.calcIndexedSlice(r,e,1,n,t);return 0===i.length?null:i[0]},t}(),ve=function(){return function(t,e){this.viewCache=t,this.changes=e}}(),ye=function(){function t(t){this.filter_=t}return t.prototype.assertIndexed=function(t){i.assert(t.getEventCache().getNode().isIndexed(this.filter_.getIndex()),"Event snap not indexed"),i.assert(t.getServerCache().getNode().isIndexed(this.filter_.getIndex()),"Server snap not indexed")},t.prototype.applyOperation=function(e,n,r,o){var a,s,u=new fe;if(n.type===Wt.OVERWRITE){var c=n;c.source.fromUser?a=this.applyUserOverwrite_(e,c.path,c.snap,r,o,u):(i.assert(c.source.fromServer,"Unknown source."),s=c.source.tagged||e.getServerCache().isFiltered()&&!c.path.isEmpty(),a=this.applyServerOverwrite_(e,c.path,c.snap,r,o,s,u))}else if(n.type===Wt.MERGE){var h=n;h.source.fromUser?a=this.applyUserMerge_(e,h.path,h.children,r,o,u):(i.assert(h.source.fromServer,"Unknown source."),s=h.source.tagged||e.getServerCache().isFiltered(),a=this.applyServerMerge_(e,h.path,h.children,r,o,s,u))}else if(n.type===Wt.ACK_USER_WRITE){var l=n;a=l.revert?this.revertUserWrite_(e,l.path,r,o,u):this.ackUserWrite_(e,l.path,l.affectedTree,r,o,u)}else{if(n.type!==Wt.LISTEN_COMPLETE)throw i.assertionError("Unknown operation type: "+n.type);a=this.listenComplete_(e,n.path,r,u)}var f=u.getChanges();return t.maybeAddValueEvent_(e,a,f),new ve(a,f)},t.maybeAddValueEvent_=function(t,e,n){var r=e.getEventCache();if(r.isFullyInitialized()){var i=r.getNode().isLeafNode()||r.getNode().isEmpty(),o=t.getCompleteEventSnap();(n.length>0||!t.getEventCache().isFullyInitialized()||i&&!r.getNode().equals(o)||!r.getNode().getPriority().equals(o.getPriority()))&&n.push(he.valueChange(e.getCompleteEventSnap()))}},t.prototype.generateEventCacheAfterServerEvent_=function(t,e,n,r,o){var a=t.getEventCache();if(null!=n.shadowingWrite(e))return t;var s=void 0,u=void 0;if(e.isEmpty())if(i.assert(t.getServerCache().isFullyInitialized(),"If change path is empty, we must have complete server data"),t.getServerCache().isFiltered()){var c=t.getCompleteServerSnap(),h=c instanceof Lt?c:Lt.EMPTY_NODE,l=n.calcCompleteEventChildren(h);s=this.filter_.updateFullNode(t.getEventCache().getNode(),l,o)}else{var f=n.calcCompleteEventCache(t.getCompleteServerSnap());s=this.filter_.updateFullNode(t.getEventCache().getNode(),f,o)}else{var p=e.getFront();if(".priority"==p){i.assert(1==e.getLength(),"Can't have a priority with additional path components");var d=a.getNode();u=t.getServerCache().getNode();var v=n.calcEventCacheAfterServerOverwrite(e,d,u);s=null!=v?this.filter_.updatePriority(d,v):a.getNode()}else{var y=e.popFront(),g=void 0;if(a.isCompleteForChild(p)){u=t.getServerCache().getNode();var m=n.calcEventCacheAfterServerOverwrite(e,a.getNode(),u);g=null!=m?a.getNode().getImmediateChild(p).updateChild(y,m):a.getNode().getImmediateChild(p)}else g=n.calcCompleteChild(p,t.getServerCache());s=null!=g?this.filter_.updateChild(a.getNode(),p,g,y,r,o):a.getNode()}}return t.updateEventSnap(s,a.isFullyInitialized()||e.isEmpty(),this.filter_.filtersNodes())},t.prototype.applyServerOverwrite_=function(t,e,n,r,i,o,a){var s,u=t.getServerCache(),c=o?this.filter_:this.filter_.getIndexedFilter();if(e.isEmpty())s=c.updateFullNode(u.getNode(),n,null);else if(c.filtersNodes()&&!u.isFiltered()){var h=u.getNode().updateChild(e,n);s=c.updateFullNode(u.getNode(),h,null)}else{var l=e.getFront();if(!u.isCompleteForPath(e)&&e.getLength()>1)return t;var f=e.popFront(),p=u.getNode().getImmediateChild(l).updateChild(f,n);s=".priority"==l?c.updatePriority(u.getNode(),p):c.updateChild(u.getNode(),l,p,f,pe,null)}var d=t.updateServerSnap(s,u.isFullyInitialized()||e.isEmpty(),c.filtersNodes()),v=new de(r,d,i);return this.generateEventCacheAfterServerEvent_(d,e,r,v,a)},t.prototype.applyUserOverwrite_=function(t,e,n,r,i,o){var a,s,u=t.getEventCache(),c=new de(r,t,i);if(e.isEmpty())s=this.filter_.updateFullNode(t.getEventCache().getNode(),n,o),a=t.updateEventSnap(s,!0,this.filter_.filtersNodes());else{var h=e.getFront();if(".priority"===h)s=this.filter_.updatePriority(t.getEventCache().getNode(),n),a=t.updateEventSnap(s,u.isFullyInitialized(),u.isFiltered());else{var l=e.popFront(),f=u.getNode().getImmediateChild(h),p=void 0;if(l.isEmpty())p=n;else{var d=c.getCompleteChild(h);p=null!=d?".priority"===l.getBack()&&d.getChild(l.parent()).isEmpty()?d:d.updateChild(l,n):Lt.EMPTY_NODE}if(f.equals(p))a=t;else{var v=this.filter_.updateChild(u.getNode(),h,p,l,c,o);a=t.updateEventSnap(v,u.isFullyInitialized(),this.filter_.filtersNodes())}}}return a},t.cacheHasChild_=function(t,e){return t.getEventCache().isCompleteForChild(e)},t.prototype.applyUserMerge_=function(e,n,r,i,o,a){var s=this,u=e;return r.foreach(function(r,c){var h=n.child(r);t.cacheHasChild_(e,h.getFront())&&(u=s.applyUserOverwrite_(u,h,c,i,o,a))}),r.foreach(function(r,c){var h=n.child(r);t.cacheHasChild_(e,h.getFront())||(u=s.applyUserOverwrite_(u,h,c,i,o,a))}),u},t.prototype.applyMerge_=function(t,e){return e.foreach(function(e,n){t=t.updateChild(e,n)}),t},t.prototype.applyServerMerge_=function(t,e,n,r,i,o,a){var s=this;if(t.getServerCache().getNode().isEmpty()&&!t.getServerCache().isFullyInitialized())return t;var u,c=t;u=e.isEmpty()?n:ie.Empty.setTree(e,n);var h=t.getServerCache().getNode();return u.children.inorderTraversal(function(e,n){if(h.hasChild(e)){var u=t.getServerCache().getNode().getImmediateChild(e),l=s.applyMerge_(u,n);c=s.applyServerOverwrite_(c,new W(e),l,r,i,o,a)}}),u.children.inorderTraversal(function(e,n){var u=!t.getServerCache().isCompleteForChild(e)&&null==n.value;if(!h.hasChild(e)&&!u){var l=t.getServerCache().getNode().getImmediateChild(e),f=s.applyMerge_(l,n);c=s.applyServerOverwrite_(c,new W(e),f,r,i,o,a)}}),c},t.prototype.ackUserWrite_=function(t,e,n,r,i,o){if(null!=r.shadowingWrite(e))return t;var a=t.getServerCache().isFiltered(),s=t.getServerCache();if(null!=n.value){if(e.isEmpty()&&s.isFullyInitialized()||s.isCompleteForPath(e))return this.applyServerOverwrite_(t,e,s.getNode().getChild(e),r,i,a,o);if(e.isEmpty()){var u=ie.Empty;return s.getNode().forEachChild(dt,function(t,e){u=u.set(new W(t),e)}),this.applyServerMerge_(t,e,u,r,i,a,o)}return t}var c=ie.Empty;return n.foreach(function(t,n){var r=e.child(t);s.isCompleteForPath(r)&&(c=c.set(t,s.getNode().getChild(r)))}),this.applyServerMerge_(t,e,c,r,i,a,o)},t.prototype.listenComplete_=function(t,e,n,r){var i=t.getServerCache(),o=t.updateServerSnap(i.getNode(),i.isFullyInitialized()||e.isEmpty(),i.isFiltered());return this.generateEventCacheAfterServerEvent_(o,e,n,pe,r)},t.prototype.revertUserWrite_=function(t,e,n,r,o){var a;if(null!=n.shadowingWrite(e))return t;var s=new de(n,t,r),u=t.getEventCache().getNode(),c=void 0;if(e.isEmpty()||".priority"===e.getFront()){var h=void 0;if(t.getServerCache().isFullyInitialized())h=n.calcCompleteEventCache(t.getCompleteServerSnap());else{var l=t.getServerCache().getNode();i.assert(l instanceof Lt,"serverChildren would be complete if leaf node"),h=n.calcCompleteEventChildren(l)}h=h,c=this.filter_.updateFullNode(u,h,o)}else{var f=e.getFront(),p=n.calcCompleteChild(f,t.getServerCache());null==p&&t.getServerCache().isCompleteForChild(f)&&(p=u.getImmediateChild(f)),(c=null!=p?this.filter_.updateChild(u,f,p,e.popFront(),s,o):t.getEventCache().getNode().hasChild(f)?this.filter_.updateChild(u,f,Lt.EMPTY_NODE,e.popFront(),s,o):u).isEmpty()&&t.getServerCache().isFullyInitialized()&&(a=n.calcCompleteEventCache(t.getCompleteServerSnap())).isLeafNode()&&(c=this.filter_.updateFullNode(c,a,o))}return a=t.getServerCache().isFullyInitialized()||null!=n.shadowingWrite(W.Empty),t.updateEventSnap(c,a,this.filter_.filtersNodes())},t}(),ge=function(){function t(t){this.query_=t,this.index_=this.query_.getQueryParams().getIndex()}return t.prototype.generateEventsForChanges=function(t,e,n){var r=this,i=[],o=[];return t.forEach(function(t){t.type===he.CHILD_CHANGED&&r.index_.indexedValueChanged(t.oldSnap,t.snapshotNode)&&o.push(he.childMovedChange(t.childName,t.snapshotNode))}),this.generateEventsForType_(i,he.CHILD_REMOVED,t,n,e),this.generateEventsForType_(i,he.CHILD_ADDED,t,n,e),this.generateEventsForType_(i,he.CHILD_MOVED,o,n,e),this.generateEventsForType_(i,he.CHILD_CHANGED,t,n,e),this.generateEventsForType_(i,he.VALUE,t,n,e),i},t.prototype.generateEventsForType_=function(t,e,n,r,i){var o=this,a=n.filter(function(t){return t.type===e});a.sort(this.compareChanges_.bind(this)),a.forEach(function(e){var n=o.materializeSingleChange_(e,i);r.forEach(function(r){r.respondsTo(e.type)&&t.push(r.createEvent(n,o.query_))})})},t.prototype.materializeSingleChange_=function(t,e){return"value"===t.type||"child_removed"===t.type?t:(t.prevName=e.getPredecessorChildName(t.childName,t.snapshotNode,this.index_),t)},t.prototype.compareChanges_=function(t,e){if(null==t.childName||null==e.childName)throw i.assertionError("Should only compare child_ events.");var n=new lt(t.childName,t.snapshotNode),r=new lt(e.childName,e.snapshotNode);return this.index_.compare(n,r)},t}(),me=function(){function t(t,e){this.query_=t,this.eventRegistrations_=[];var n=this.query_.getQueryParams(),r=new le(n.getIndex()),i=n.getNodeFilter();this.processor_=new ye(i);var o=e.getServerCache(),a=e.getEventCache(),s=r.updateFullNode(Lt.EMPTY_NODE,o.getNode(),null),u=i.updateFullNode(Lt.EMPTY_NODE,a.getNode(),null),c=new ue(s,o.isFullyInitialized(),r.filtersNodes()),h=new ue(u,a.isFullyInitialized(),i.filtersNodes());this.viewCache_=new ce(h,c),this.eventGenerator_=new ge(this.query_)}return t.prototype.getQuery=function(){return this.query_},t.prototype.getServerCache=function(){return this.viewCache_.getServerCache().getNode()},t.prototype.getCompleteServerCache=function(t){var e=this.viewCache_.getCompleteServerSnap();return e&&(this.query_.getQueryParams().loadsAllData()||!t.isEmpty()&&!e.getImmediateChild(t.getFront()).isEmpty())?e.getChild(t):null},t.prototype.isEmpty=function(){return 0===this.eventRegistrations_.length},t.prototype.addEventRegistration=function(t){this.eventRegistrations_.push(t)},t.prototype.removeEventRegistration=function(t,e){var n=[];if(e){i.assert(null==t,"A cancel should cancel all event registrations.");var r=this.query_.path;this.eventRegistrations_.forEach(function(t){e=e;var i=t.createCancelEvent(e,r);i&&n.push(i)})}if(t){for(var o=[],a=0;a<this.eventRegistrations_.length;++a){var s=this.eventRegistrations_[a];if(s.matches(t)){if(t.hasAnyCallback()){o=o.concat(this.eventRegistrations_.slice(a+1));break}}else o.push(s)}this.eventRegistrations_=o}else this.eventRegistrations_=[];return n},t.prototype.applyOperation=function(t,e,n){t.type===Wt.MERGE&&null!==t.source.queryId&&(i.assert(this.viewCache_.getCompleteServerSnap(),"We should always have a full cache before handling merges"),i.assert(this.viewCache_.getCompleteEventSnap(),"Missing event cache, even though we have a server cache"));var r=this.viewCache_,o=this.processor_.applyOperation(r,t,e,n);return this.processor_.assertIndexed(o.viewCache),i.assert(o.viewCache.getServerCache().isFullyInitialized()||!r.getServerCache().isFullyInitialized(),"Once a server snap is complete, it should never go back"),this.viewCache_=o.viewCache,this.generateEventsForChanges_(o.changes,o.viewCache.getEventCache().getNode(),null)},t.prototype.getInitialEvents=function(t){var e=this.viewCache_.getEventCache(),n=[];e.getNode().isLeafNode()||e.getNode().forEachChild(Ct,function(t,e){n.push(he.childAddedChange(t,e))});return e.isFullyInitialized()&&n.push(he.valueChange(e.getNode())),this.generateEventsForChanges_(n,e.getNode(),t)},t.prototype.generateEventsForChanges_=function(t,e,n){var r=n?[n]:this.eventRegistrations_;return this.eventGenerator_.generateEventsForChanges(t,e,r)},t}(),_e=function(){function t(){this.views_={}}return Object.defineProperty(t,"__referenceConstructor",{get:function(){return i.assert(te,"Reference.ts has not been loaded"),te},set:function(t){i.assert(!te,"__referenceConstructor has already been defined"),te=t},enumerable:!0,configurable:!0}),t.prototype.isEmpty=function(){return i.isEmpty(this.views_)},t.prototype.applyOperation=function(t,e,n){var r=t.source.queryId;if(null!==r){var o=i.safeGet(this.views_,r);return i.assert(null!=o,"SyncTree gave us an op for an invalid query."),o.applyOperation(t,e,n)}var a=[];return i.forEach(this.views_,function(r,i){a=a.concat(i.applyOperation(t,e,n))}),a},t.prototype.addEventRegistration=function(t,e,n,r,o){var a=t.queryIdentifier(),s=i.safeGet(this.views_,a);if(!s){var u=n.calcCompleteEventCache(o?r:null),c=!1;u?c=!0:r instanceof Lt?(u=n.calcCompleteEventChildren(r),c=!1):(u=Lt.EMPTY_NODE,c=!1);var h=new ce(new ue(u,c,!1),new ue(r,o,!1));s=new me(t,h),this.views_[a]=s}return s.addEventRegistration(e),s.getInitialEvents(e)},t.prototype.removeEventRegistration=function(e,n,r){var o=e.queryIdentifier(),a=[],s=[],u=this.hasCompleteView();if("default"===o){var c=this;i.forEach(this.views_,function(t,e){s=s.concat(e.removeEventRegistration(n,r)),e.isEmpty()&&(delete c.views_[t],e.getQuery().getQueryParams().loadsAllData()||a.push(e.getQuery()))})}else{var h=i.safeGet(this.views_,o);h&&(s=s.concat(h.removeEventRegistration(n,r)),h.isEmpty()&&(delete this.views_[o],h.getQuery().getQueryParams().loadsAllData()||a.push(h.getQuery())))}return u&&!this.hasCompleteView()&&a.push(new t.__referenceConstructor(e.repo,e.path)),{removed:a,events:s}},t.prototype.getQueryViews=function(){var t=this;return Object.keys(this.views_).map(function(e){return t.views_[e]}).filter(function(t){return!t.getQuery().getQueryParams().loadsAllData()})},t.prototype.getCompleteServerCache=function(t){var e=null;return i.forEach(this.views_,function(n,r){e=e||r.getCompleteServerCache(t)}),e},t.prototype.viewForQuery=function(t){if(t.getQueryParams().loadsAllData())return this.getCompleteView();var e=t.queryIdentifier();return i.safeGet(this.views_,e)},t.prototype.viewExistsForQuery=function(t){return null!=this.viewForQuery(t)},t.prototype.hasCompleteView=function(){return null!=this.getCompleteView()},t.prototype.getCompleteView=function(){return i.findValue(this.views_,function(t){return t.getQuery().getQueryParams().loadsAllData()})||null},t}(),be=function(){function t(t){this.writeTree_=t}return t.prototype.addWrite=function(e,n){if(e.isEmpty())return new t(new ie(n));var r=this.writeTree_.findRootMostValueAndPath(e);if(null!=r){var i=r.path,o=r.value,a=W.relativePath(i,e);return o=o.updateChild(a,n),new t(this.writeTree_.set(i,o))}var s=new ie(n);return new t(this.writeTree_.setTree(e,s))},t.prototype.addWrites=function(t,e){var n=this;return i.forEach(e,function(e,r){n=n.addWrite(t.child(e),r)}),n},t.prototype.removeWrite=function(e){return e.isEmpty()?t.Empty:new t(this.writeTree_.setTree(e,ie.Empty))},t.prototype.hasCompleteWrite=function(t){return null!=this.getCompleteNode(t)},t.prototype.getCompleteNode=function(t){var e=this.writeTree_.findRootMostValueAndPath(t);return null!=e?this.writeTree_.get(e.path).getChild(W.relativePath(e.path,t)):null},t.prototype.getCompleteChildren=function(){var t=[],e=this.writeTree_.value;return null!=e?e.isLeafNode()||e.forEachChild(Ct,function(e,n){t.push(new lt(e,n))}):this.writeTree_.children.inorderTraversal(function(e,n){null!=n.value&&t.push(new lt(e,n.value))}),t},t.prototype.childCompoundWrite=function(e){if(e.isEmpty())return this;var n=this.getCompleteNode(e);return new t(null!=n?new ie(n):this.writeTree_.subtree(e))},t.prototype.isEmpty=function(){return this.writeTree_.isEmpty()},t.prototype.apply=function(e){return t.applySubtreeWrite_(W.Empty,this.writeTree_,e)},t.Empty=new t(new ie(null)),t.applySubtreeWrite_=function(e,n,r){if(null!=n.value)return r.updateChild(e,n.value);var o=null;return n.children.inorderTraversal(function(n,a){".priority"===n?(i.assert(null!==a.value,"Priority writes must always be leaf nodes"),o=a.value):r=t.applySubtreeWrite_(e.child(n),a,r)}),r.getChild(e).isEmpty()||null===o||(r=r.updateChild(e.child(".priority"),o)),r},t}(),we=function(){function t(){this.visibleWrites_=be.Empty,this.allWrites_=[],this.lastWriteId_=-1}return t.prototype.childWrites=function(t){return new Ee(t,this)},t.prototype.addOverwrite=function(t,e,n,r){i.assert(n>this.lastWriteId_,"Stacking an older write on top of newer ones"),void 0===r&&(r=!0),this.allWrites_.push({path:t,snap:e,writeId:n,visible:r}),r&&(this.visibleWrites_=this.visibleWrites_.addWrite(t,e)),this.lastWriteId_=n},t.prototype.addMerge=function(t,e,n){i.assert(n>this.lastWriteId_,"Stacking an older merge on top of newer ones"),this.allWrites_.push({path:t,children:e,writeId:n,visible:!0}),this.visibleWrites_=this.visibleWrites_.addWrites(t,e),this.lastWriteId_=n},t.prototype.getWrite=function(t){for(var e=0;e<this.allWrites_.length;e++){var n=this.allWrites_[e];if(n.writeId===t)return n}return null},t.prototype.removeWrite=function(t){var e=this,n=this.allWrites_.findIndex(function(e){return e.writeId===t});i.assert(n>=0,"removeWrite called with nonexistent writeId.");var r=this.allWrites_[n];this.allWrites_.splice(n,1);for(var o=r.visible,a=!1,s=this.allWrites_.length-1;o&&s>=0;){var u=this.allWrites_[s];u.visible&&(s>=n&&this.recordContainsPath_(u,r.path)?o=!1:r.path.contains(u.path)&&(a=!0)),s--}if(o){if(a)return this.resetTree_(),!0;if(r.snap)this.visibleWrites_=this.visibleWrites_.removeWrite(r.path);else{var c=r.children;i.forEach(c,function(t){e.visibleWrites_=e.visibleWrites_.removeWrite(r.path.child(t))})}return!0}return!1},t.prototype.getCompleteWriteData=function(t){return this.visibleWrites_.getCompleteNode(t)},t.prototype.calcCompleteEventCache=function(e,n,r,i){if(r||i){var o=this.visibleWrites_.childCompoundWrite(e);if(!i&&o.isEmpty())return n;if(i||null!=n||o.hasCompleteWrite(W.Empty)){var a=t.layerTree_(this.allWrites_,function(t){return(t.visible||i)&&(!r||!~r.indexOf(t.writeId))&&(t.path.contains(e)||e.contains(t.path))},e);c=n||Lt.EMPTY_NODE;return a.apply(c)}return null}var s=this.visibleWrites_.getCompleteNode(e);if(null!=s)return s;var u=this.visibleWrites_.childCompoundWrite(e);if(u.isEmpty())return n;if(null!=n||u.hasCompleteWrite(W.Empty)){var c=n||Lt.EMPTY_NODE;return u.apply(c)}return null},t.prototype.calcCompleteEventChildren=function(t,e){var n=Lt.EMPTY_NODE,r=this.visibleWrites_.getCompleteNode(t);if(r)return r.isLeafNode()||r.forEachChild(Ct,function(t,e){n=n.updateImmediateChild(t,e)}),n;if(e){var i=this.visibleWrites_.childCompoundWrite(t);return e.forEachChild(Ct,function(t,e){var r=i.childCompoundWrite(new W(t)).apply(e);n=n.updateImmediateChild(t,r)}),i.getCompleteChildren().forEach(function(t){n=n.updateImmediateChild(t.name,t.node)}),n}return this.visibleWrites_.childCompoundWrite(t).getCompleteChildren().forEach(function(t){n=n.updateImmediateChild(t.name,t.node)}),n},t.prototype.calcEventCacheAfterServerOverwrite=function(t,e,n,r){i.assert(n||r,"Either existingEventSnap or existingServerSnap must exist");var o=t.child(e);if(this.visibleWrites_.hasCompleteWrite(o))return null;var a=this.visibleWrites_.childCompoundWrite(o);return a.isEmpty()?r.getChild(e):a.apply(r.getChild(e))},t.prototype.calcCompleteChild=function(t,e,n){var r=t.child(e),i=this.visibleWrites_.getCompleteNode(r);return null!=i?i:n.isCompleteForChild(e)?this.visibleWrites_.childCompoundWrite(r).apply(n.getNode().getImmediateChild(e)):null},t.prototype.shadowingWrite=function(t){return this.visibleWrites_.getCompleteNode(t)},t.prototype.calcIndexedSlice=function(t,e,n,r,i,o){var a,s=this.visibleWrites_.childCompoundWrite(t),u=s.getCompleteNode(W.Empty);if(null!=u)a=u;else{if(null==e)return[];a=s.apply(e)}if((a=a.withIndex(o)).isEmpty()||a.isLeafNode())return[];for(var c=[],h=o.getCompare(),l=i?a.getReverseIteratorFrom(n,o):a.getIteratorFrom(n,o),f=l.getNext();f&&c.length<r;)0!==h(f,n)&&c.push(f),f=l.getNext();return c},t.prototype.recordContainsPath_=function(t,e){return t.snap?t.path.contains(e):!!i.findKey(t.children,function(n,r){return t.path.child(r).contains(e)})},t.prototype.resetTree_=function(){this.visibleWrites_=t.layerTree_(this.allWrites_,t.DefaultFilter_,W.Empty),this.allWrites_.length>0?this.lastWriteId_=this.allWrites_[this.allWrites_.length-1].writeId:this.lastWriteId_=-1},t.DefaultFilter_=function(t){return t.visible},t.layerTree_=function(t,e,n){for(var r=be.Empty,o=0;o<t.length;++o){var a=t[o];if(e(a)){var s=a.path,u=void 0;if(a.snap)n.contains(s)?(u=W.relativePath(n,s),r=r.addWrite(u,a.snap)):s.contains(n)&&(u=W.relativePath(s,n),r=r.addWrite(W.Empty,a.snap.getChild(u)));else{if(!a.children)throw i.assertionError("WriteRecord should have .snap or .children");if(n.contains(s))u=W.relativePath(n,s),r=r.addWrites(u,a.children);else if(s.contains(n))if((u=W.relativePath(s,n)).isEmpty())r=r.addWrites(W.Empty,a.children);else{var c=i.safeGet(a.children,u.getFront());if(c){var h=c.getChild(u.popFront());r=r.addWrite(W.Empty,h)}}}}}return r},t}(),Ee=function(){function t(t,e){this.treePath_=t,this.writeTree_=e}return t.prototype.calcCompleteEventCache=function(t,e,n){return this.writeTree_.calcCompleteEventCache(this.treePath_,t,e,n)},t.prototype.calcCompleteEventChildren=function(t){return this.writeTree_.calcCompleteEventChildren(this.treePath_,t)},t.prototype.calcEventCacheAfterServerOverwrite=function(t,e,n){return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_,t,e,n)},t.prototype.shadowingWrite=function(t){return this.writeTree_.shadowingWrite(this.treePath_.child(t))},t.prototype.calcIndexedSlice=function(t,e,n,r,i){return this.writeTree_.calcIndexedSlice(this.treePath_,t,e,n,r,i)},t.prototype.calcCompleteChild=function(t,e){return this.writeTree_.calcCompleteChild(this.treePath_,t,e)},t.prototype.child=function(e){return new t(this.treePath_.child(e),this.writeTree_)},t}(),Ce=function(){function t(t){this.listenProvider_=t,this.syncPointTree_=ie.Empty,this.pendingWriteTree_=new we,this.tagToQueryMap_={},this.queryToTagMap_={}}return t.prototype.applyUserOverwrite=function(t,e,n,r){return this.pendingWriteTree_.addOverwrite(t,e,n,r),r?this.applyOperationToSyncPoints_(new ae(ee.User,t,e)):[]},t.prototype.applyUserMerge=function(t,e,n){this.pendingWriteTree_.addMerge(t,e,n);var r=ie.fromObject(e);return this.applyOperationToSyncPoints_(new se(ee.User,t,r))},t.prototype.ackUserWrite=function(t,e){void 0===e&&(e=!1);var n=this.pendingWriteTree_.getWrite(t);if(this.pendingWriteTree_.removeWrite(t)){var r=ie.Empty;return null!=n.snap?r=r.set(W.Empty,!0):i.forEach(n.children,function(t,e){r=r.set(new W(t),e)}),this.applyOperationToSyncPoints_(new ne(n.path,r,e))}return[]},t.prototype.applyServerOverwrite=function(t,e){return this.applyOperationToSyncPoints_(new ae(ee.Server,t,e))},t.prototype.applyServerMerge=function(t,e){var n=ie.fromObject(e);return this.applyOperationToSyncPoints_(new se(ee.Server,t,n))},t.prototype.applyListenComplete=function(t){return this.applyOperationToSyncPoints_(new oe(ee.Server,t))},t.prototype.applyTaggedQueryOverwrite=function(e,n,r){var i=this.queryKeyForTag_(r);if(null!=i){var o=t.parseQueryKey_(i),a=o.path,s=o.queryId,u=W.relativePath(a,e),c=new ae(ee.forServerTaggedQuery(s),u,n);return this.applyTaggedOperation_(a,c)}return[]},t.prototype.applyTaggedQueryMerge=function(e,n,r){var i=this.queryKeyForTag_(r);if(i){var o=t.parseQueryKey_(i),a=o.path,s=o.queryId,u=W.relativePath(a,e),c=ie.fromObject(n),h=new se(ee.forServerTaggedQuery(s),u,c);return this.applyTaggedOperation_(a,h)}return[]},t.prototype.applyTaggedListenComplete=function(e,n){var r=this.queryKeyForTag_(n);if(r){var i=t.parseQueryKey_(r),o=i.path,a=i.queryId,s=W.relativePath(o,e),u=new oe(ee.forServerTaggedQuery(a),s);return this.applyTaggedOperation_(o,u)}return[]},t.prototype.addEventRegistration=function(e,n){var r=e.path,o=null,a=!1;this.syncPointTree_.foreachOnPath(r,function(t,e){var n=W.relativePath(t,r);o=o||e.getCompleteServerCache(n),a=a||e.hasCompleteView()});var s,u=this.syncPointTree_.get(r);(u?(a=a||u.hasCompleteView(),o=o||u.getCompleteServerCache(W.Empty)):(u=new _e,this.syncPointTree_=this.syncPointTree_.set(r,u)),null!=o)?s=!0:(s=!1,o=Lt.EMPTY_NODE,this.syncPointTree_.subtree(r).foreachChild(function(t,e){var n=e.getCompleteServerCache(W.Empty);n&&(o=o.updateImmediateChild(t,n))}));var c=u.viewExistsForQuery(e);if(!c&&!e.getQueryParams().loadsAllData()){var h=t.makeQueryKey_(e);i.assert(!(h in this.queryToTagMap_),"View does not exist, but we have a tag");var l=t.getNextQueryTag_();this.queryToTagMap_[h]=l,this.tagToQueryMap_["_"+l]=h}var f=this.pendingWriteTree_.childWrites(r),p=u.addEventRegistration(e,n,f,o,s);if(!c&&!a){var d=u.viewForQuery(e);p=p.concat(this.setupListener_(e,d))}return p},t.prototype.removeEventRegistration=function(e,n,r){var i=this,o=e.path,a=this.syncPointTree_.get(o),s=[];if(a&&("default"===e.queryIdentifier()||a.viewExistsForQuery(e))){var u=a.removeEventRegistration(e,n,r);a.isEmpty()&&(this.syncPointTree_=this.syncPointTree_.remove(o));var c=u.removed;s=u.events;var h=-1!==c.findIndex(function(t){return t.getQueryParams().loadsAllData()}),l=this.syncPointTree_.findOnPath(o,function(t,e){return e.hasCompleteView()});if(h&&!l){var f=this.syncPointTree_.subtree(o);if(!f.isEmpty())for(var p=this.collectDistinctViewsForSubTree_(f),d=0;d<p.length;++d){var v=p[d],y=v.getQuery(),g=this.createListenerForView_(v);this.listenProvider_.startListening(t.queryForListening_(y),this.tagForQuery_(y),g.hashFn,g.onComplete)}}if(!l&&c.length>0&&!r)if(h){this.listenProvider_.stopListening(t.queryForListening_(e),null)}else c.forEach(function(e){var n=i.queryToTagMap_[t.makeQueryKey_(e)];i.listenProvider_.stopListening(t.queryForListening_(e),n)});this.removeTags_(c)}return s},t.prototype.calcCompleteEventCache=function(t,e){var n=this.pendingWriteTree_,r=this.syncPointTree_.findOnPath(t,function(e,n){var r=W.relativePath(e,t),i=n.getCompleteServerCache(r);if(i)return i});return n.calcCompleteEventCache(t,r,e,!0)},t.prototype.collectDistinctViewsForSubTree_=function(t){return t.fold(function(t,e,n){if(e&&e.hasCompleteView())return[e.getCompleteView()];var r=[];return e&&(r=e.getQueryViews()),i.forEach(n,function(t,e){r=r.concat(e)}),r})},t.prototype.removeTags_=function(e){for(var n=0;n<e.length;++n){var r=e[n];if(!r.getQueryParams().loadsAllData()){var i=t.makeQueryKey_(r),o=this.queryToTagMap_[i];delete this.queryToTagMap_[i],delete this.tagToQueryMap_["_"+o]}}},t.queryForListening_=function(t){return t.getQueryParams().loadsAllData()&&!t.getQueryParams().isDefault()?t.getRef():t},t.prototype.setupListener_=function(e,n){var r=e.path,o=this.tagForQuery_(e),a=this.createListenerForView_(n),s=this.listenProvider_.startListening(t.queryForListening_(e),o,a.hashFn,a.onComplete),u=this.syncPointTree_.subtree(r);if(o)i.assert(!u.value.hasCompleteView(),"If we're adding a query, it shouldn't be shadowed");else for(var c=u.fold(function(t,e,n){if(!t.isEmpty()&&e&&e.hasCompleteView())return[e.getCompleteView().getQuery()];var r=[];return e&&(r=r.concat(e.getQueryViews().map(function(t){return t.getQuery()}))),i.forEach(n,function(t,e){r=r.concat(e)}),r}),h=0;h<c.length;++h){var l=c[h];this.listenProvider_.stopListening(t.queryForListening_(l),this.tagForQuery_(l))}return s},t.prototype.createListenerForView_=function(t){var e=this,n=t.getQuery(),r=this.tagForQuery_(n);return{hashFn:function(){return(t.getServerCache()||Lt.EMPTY_NODE).hash()},onComplete:function(t){if("ok"===t)return r?e.applyTaggedListenComplete(n.path,r):e.applyListenComplete(n.path);var i=function(t,e){var n="Unknown Error";"too_big"===t?n="The data requested exceeds the maximum size that can be accessed with a single request.":"permission_denied"==t?n="Client doesn't have permission to access the desired data.":"unavailable"==t&&(n="The service is unavailable");var r=new Error(t+" at "+e.path.toString()+": "+n);return r.code=t.toUpperCase(),r}(t,n);return e.removeEventRegistration(n,null,i)}}},t.makeQueryKey_=function(t){return t.path.toString()+"$"+t.queryIdentifier()},t.parseQueryKey_=function(t){var e=t.indexOf("$");return i.assert(-1!==e&&e<t.length-1,"Bad queryKey."),{queryId:t.substr(e+1),path:new W(t.substr(0,e))}},t.prototype.queryKeyForTag_=function(t){return this.tagToQueryMap_["_"+t]},t.prototype.tagForQuery_=function(e){var n=t.makeQueryKey_(e);return i.safeGet(this.queryToTagMap_,n)},t.getNextQueryTag_=function(){return t.nextQueryTag_++},t.prototype.applyTaggedOperation_=function(t,e){var n=this.syncPointTree_.get(t);i.assert(n,"Missing sync point for query tag that we're tracking");var r=this.pendingWriteTree_.childWrites(t);return n.applyOperation(e,r,null)},t.prototype.applyOperationToSyncPoints_=function(t){return this.applyOperationHelper_(t,this.syncPointTree_,null,this.pendingWriteTree_.childWrites(W.Empty))},t.prototype.applyOperationHelper_=function(t,e,n,r){if(t.path.isEmpty())return this.applyOperationDescendantsHelper_(t,e,n,r);var i=e.get(W.Empty);null==n&&null!=i&&(n=i.getCompleteServerCache(W.Empty));var o=[],a=t.path.getFront(),s=t.operationForChild(a),u=e.children.get(a);if(u&&s){var c=n?n.getImmediateChild(a):null,h=r.child(a);o=o.concat(this.applyOperationHelper_(s,u,c,h))}return i&&(o=o.concat(i.applyOperation(t,r,n))),o},t.prototype.applyOperationDescendantsHelper_=function(t,e,n,r){var i=this,o=e.get(W.Empty);null==n&&null!=o&&(n=o.getCompleteServerCache(W.Empty));var a=[];return e.children.inorderTraversal(function(e,o){var s=n?n.getImmediateChild(e):null,u=r.child(e),c=t.operationForChild(e);c&&(a=a.concat(i.applyOperationDescendantsHelper_(c,o,s,u)))}),o&&(a=a.concat(o.applyOperation(t,r,n))),a},t.nextQueryTag_=1,t}(),Te=function(){function t(){this.rootNode_=Lt.EMPTY_NODE}return t.prototype.getNode=function(t){return this.rootNode_.getChild(t)},t.prototype.updateSnapshot=function(t,e){this.rootNode_=this.rootNode_.updateChild(t,e)},t}(),Se=function(){function t(t){this.app_=t}return t.prototype.getToken=function(t){return this.app_.INTERNAL.getToken(t).then(null,function(t){return t&&"auth/token-not-initialized"===t.code?(b("Got auth/token-not-initialized error.  Treating as null token."),null):Promise.reject(t)})},t.prototype.addTokenChangeListener=function(t){this.app_.INTERNAL.addAuthTokenListener(t)},t.prototype.removeTokenChangeListener=function(t){this.app_.INTERNAL.removeAuthTokenListener(t)},t.prototype.notifyForInvalidToken=function(){var t='Provided authentication credentials for the app named "'+this.app_.name+'" are invalid. This usually indicates your app was not initialized correctly. ';"credential"in this.app_.options?t+='Make sure the "credential" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':"serviceAccount"in this.app_.options?t+='Make sure the "serviceAccount" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':t+='Make sure the "apiKey" and "databaseURL" properties provided to initializeApp() match the values provided for your app at https://console.firebase.google.com/.',T(t)},t}(),Ie=function(){function t(){this.counters_={}}return t.prototype.incrementCounter=function(t,e){void 0===e&&(e=1),i.contains(this.counters_,t)||(this.counters_[t]=0),this.counters_[t]+=e},t.prototype.get=function(){return i.deepCopy(this.counters_)},t}(),Ne=function(){function t(){}return t.getCollection=function(t){var e=t.toString();return this.collections_[e]||(this.collections_[e]=new Ie),this.collections_[e]},t.getOrCreateReporter=function(t,e){var n=t.toString();return this.reporters_[n]||(this.reporters_[n]=e()),this.reporters_[n]},t.collections_={},t.reporters_={},t}(),Ae=function(){function t(t){this.collection_=t,this.last_=null}return t.prototype.get=function(){var t=this.collection_.get(),e=i.clone(t);return this.last_&&i.forEach(this.last_,function(t,n){e[t]=e[t]-n}),this.last_=t,e},t}(),Re=1e4,Oe=3e4,Pe=function(){function t(t,e){this.server_=e,this.statsToReport_={},this.statsListener_=new Ae(t);var n=Re+(Oe-Re)*Math.random();j(this.reportStats_.bind(this),Math.floor(n))}return t.prototype.includeStat=function(t){this.statsToReport_[t]=!0},t.prototype.reportStats_=function(){var t=this,e=this.statsListener_.get(),n={},r=!1;i.forEach(e,function(e,o){o>0&&i.contains(t.statsToReport_,e)&&(n[e]=o,r=!0)}),r&&this.server_.reportStats(n),j(this.reportStats_.bind(this),Math.floor(2*Math.random()*3e5))},t}(),ke=function(){function t(){this.eventLists_=[],this.recursionDepth_=0}return t.prototype.queueEvents=function(t){for(var e=null,n=0;n<t.length;n++){var r=t[n],i=r.getPath();null===e||i.equals(e.getPath())||(this.eventLists_.push(e),e=null),null===e&&(e=new De(i)),e.add(r)}e&&this.eventLists_.push(e)},t.prototype.raiseEventsAtPath=function(t,e){this.queueEvents(e),this.raiseQueuedEventsMatchingPredicate_(function(e){return e.equals(t)})},t.prototype.raiseEventsForChangedPath=function(t,e){this.queueEvents(e),this.raiseQueuedEventsMatchingPredicate_(function(e){return e.contains(t)||t.contains(e)})},t.prototype.raiseQueuedEventsMatchingPredicate_=function(t){this.recursionDepth_++;for(var e=!0,n=0;n<this.eventLists_.length;n++){var r=this.eventLists_[n];if(r)t(r.getPath())?(this.eventLists_[n].raise(),this.eventLists_[n]=null):e=!1}e&&(this.eventLists_=[]),this.recursionDepth_--},t}(),De=function(){function t(t){this.path_=t,this.events_=[]}return t.prototype.add=function(t){this.events_.push(t)},t.prototype.raise=function(){for(var t=0;t<this.events_.length;t++){var e=this.events_[t];if(null!==e){this.events_[t]=null;var n=e.getEventRunner();g&&b("event: "+e.toString()),F(n)}}},t.prototype.getPath=function(){return this.path_},t}(),xe=function(){function t(t){this.allowedEvents_=t,this.listeners_={},i.assert(Array.isArray(t)&&t.length>0,"Requires a non-empty array")}return t.prototype.trigger=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];if(Array.isArray(this.listeners_[t]))for(var r=this.listeners_[t].slice(),i=0;i<r.length;i++)r[i].callback.apply(r[i].context,e)},t.prototype.on=function(t,e,n){this.validateEventType_(t),this.listeners_[t]=this.listeners_[t]||[],this.listeners_[t].push({callback:e,context:n});var r=this.getInitialEvent(t);r&&e.apply(n,r)},t.prototype.off=function(t,e,n){this.validateEventType_(t);for(var r=this.listeners_[t]||[],i=0;i<r.length;i++)if(r[i].callback===e&&(!n||n===r[i].context))return void r.splice(i,1)},t.prototype.validateEventType_=function(t){i.assert(this.allowedEvents_.find(function(e){return e===t}),"Unknown event: "+t)},t}(),Le=function(t){function e(){var e,n,r=t.call(this,["visible"])||this;return"undefined"!=typeof document&&void 0!==document.addEventListener&&(void 0!==document.hidden?(n="visibilitychange",e="hidden"):void 0!==document.mozHidden?(n="mozvisibilitychange",e="mozHidden"):void 0!==document.msHidden?(n="msvisibilitychange",e="msHidden"):void 0!==document.webkitHidden&&(n="webkitvisibilitychange",e="webkitHidden")),r.visible_=!0,n&&document.addEventListener(n,function(){var t=!document[e];t!==r.visible_&&(r.visible_=t,r.trigger("visible",t))},!1),r}return a.__extends(e,t),e.getInstance=function(){return new e},e.prototype.getInitialEvent=function(t){return i.assert("visible"===t,"Unknown event type: "+t),[this.visible_]},e}(xe),Me=function(t){function e(){var e=t.call(this,["online"])||this;return e.online_=!0,"undefined"==typeof window||void 0===window.addEventListener||i.isMobileCordova()||(window.addEventListener("online",function(){e.online_||(e.online_=!0,e.trigger("online",!0))},!1),window.addEventListener("offline",function(){e.online_&&(e.online_=!1,e.trigger("online",!1))},!1)),e}return a.__extends(e,t),e.getInstance=function(){return new e},e.prototype.getInitialEvent=function(t){return i.assert("online"===t,"Unknown event type: "+t),[this.online_]},e.prototype.currentlyOnline=function(){return this.online_},e}(xe),Fe=function(){function t(t){this.onMessage_=t,this.pendingResponses=[],this.currentResponseNum=0,this.closeAfterResponse=-1,this.onClose=null}return t.prototype.closeAfter=function(t,e){this.closeAfterResponse=t,this.onClose=e,this.closeAfterResponse<this.currentResponseNum&&(this.onClose(),this.onClose=null)},t.prototype.handleResponse=function(t,e){var n=this;this.pendingResponses[t]=e;for(var r=function(){var t=i.pendingResponses[i.currentResponseNum];delete i.pendingResponses[i.currentResponseNum];for(var e=function(e){t[e]&&F(function(){n.onMessage_(t[e])})},r=0;r<t.length;++r)e(r);if(i.currentResponseNum===i.closeAfterResponse)return i.onClose&&(i.onClose(),i.onClose=null),"break";i.currentResponseNum++},i=this;this.pendingResponses[this.currentResponseNum];){if("break"===r())break}},t}(),Ue="pLPCommand",je="pRTLPCB",We=function(){function t(t,e,n,r){this.connId=t,this.repoInfo=e,this.transportSessionId=n,this.lastSessionId=r,this.bytesSent=0,this.bytesReceived=0,this.everConnected_=!1,this.log_=w(t),this.stats_=Ne.getCollection(e),this.urlFn=function(t){return e.connectionURL(V,t)}}return t.prototype.open=function(t,e){var n=this;this.curSegmentNum=0,this.onDisconnect_=e,this.myPacketOrderer=new Fe(t),this.isClosed_=!1,this.connectTimeoutTimer_=setTimeout(function(){n.log_("Timed out trying to connect."),n.onClosed_(),n.connectTimeoutTimer_=null},Math.floor(3e4)),function(t){if(i.isNodeSdk()||"complete"===document.readyState)t();else{var e=!1,n=function(){document.body?e||(e=!0,t()):setTimeout(n,Math.floor(10))};document.addEventListener?(document.addEventListener("DOMContentLoaded",n,!1),window.addEventListener("load",n,!1)):document.attachEvent&&(document.attachEvent("onreadystatechange",function(){"complete"===document.readyState&&n()}),window.attachEvent("onload",n))}}(function(){if(!n.isClosed_){n.scriptTagHolder=new qe(function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t[0],i=t[1],o=t[2];if(n.incrementIncomingBytes_(t),n.scriptTagHolder)if(n.connectTimeoutTimer_&&(clearTimeout(n.connectTimeoutTimer_),n.connectTimeoutTimer_=null),n.everConnected_=!0,"start"==r)n.id=i,n.password=o;else{if("close"!==r)throw new Error("Unrecognized command received: "+r);i?(n.scriptTagHolder.sendNewPolls=!1,n.myPacketOrderer.closeAfter(i,function(){n.onClosed_()})):n.onClosed_()}},function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t[0],i=t[1];n.incrementIncomingBytes_(t),n.myPacketOrderer.handleResponse(r,i)},function(){n.onClosed_()},n.urlFn);var t={start:"t"};t.ser=Math.floor(1e8*Math.random()),n.scriptTagHolder.uniqueCallbackIdentifier&&(t.cb=n.scriptTagHolder.uniqueCallbackIdentifier),t.v="5",n.transportSessionId&&(t.s=n.transportSessionId),n.lastSessionId&&(t.ls=n.lastSessionId),!i.isNodeSdk()&&"undefined"!=typeof location&&location.href&&-1!==location.href.indexOf("firebaseio.com")&&(t.r="f");var e=n.urlFn(t);n.log_("Connecting via long-poll to "+e),n.scriptTagHolder.addTag(e,function(){})}})},t.prototype.start=function(){this.scriptTagHolder.startLongPoll(this.id,this.password),this.addDisconnectPingFrame(this.id,this.password)},t.forceAllow=function(){t.forceAllow_=!0},t.forceDisallow=function(){t.forceDisallow_=!0},t.isAvailable=function(){return t.forceAllow_||!t.forceDisallow_&&"undefined"!=typeof document&&null!=document.createElement&&!("object"==typeof window&&window.chrome&&window.chrome.extension&&!/^chrome/.test(window.location.href))&&!("object"==typeof Windows&&"object"==typeof Windows.UI)&&!i.isNodeSdk()},t.prototype.markConnectionHealthy=function(){},t.prototype.shutdown_=function(){this.isClosed_=!0,this.scriptTagHolder&&(this.scriptTagHolder.close(),this.scriptTagHolder=null),this.myDisconnFrame&&(document.body.removeChild(this.myDisconnFrame),this.myDisconnFrame=null),this.connectTimeoutTimer_&&(clearTimeout(this.connectTimeoutTimer_),this.connectTimeoutTimer_=null)},t.prototype.onClosed_=function(){this.isClosed_||(this.log_("Longpoll is closing itself"),this.shutdown_(),this.onDisconnect_&&(this.onDisconnect_(this.everConnected_),this.onDisconnect_=null))},t.prototype.close=function(){this.isClosed_||(this.log_("Longpoll is being closed."),this.shutdown_())},t.prototype.send=function(t){var e=i.stringify(t);this.bytesSent+=e.length,this.stats_.incrementCounter("bytes_sent",e.length);for(var n=i.base64Encode(e),r=k(n,1840),o=0;o<r.length;o++)this.scriptTagHolder.enqueueSegment(this.curSegmentNum,r.length,r[o]),this.curSegmentNum++},t.prototype.addDisconnectPingFrame=function(t,e){if(!i.isNodeSdk()){this.myDisconnFrame=document.createElement("iframe");var n={dframe:"t"};n.id=t,n.pw=e,this.myDisconnFrame.src=this.urlFn(n),this.myDisconnFrame.style.display="none",document.body.appendChild(this.myDisconnFrame)}},t.prototype.incrementIncomingBytes_=function(t){var e=i.stringify(t).length;this.bytesReceived+=e,this.stats_.incrementCounter("bytes_received",e)},t}(),qe=function(){function t(e,n,r,o){if(this.onDisconnect=r,this.urlFn=o,this.outstandingRequests=new Xt,this.pendingSegs=[],this.currentSerial=Math.floor(1e8*Math.random()),this.sendNewPolls=!0,i.isNodeSdk())this.commandCB=e,this.onMessageCB=n;else{this.uniqueCallbackIdentifier=d(),window[Ue+this.uniqueCallbackIdentifier]=e,window[je+this.uniqueCallbackIdentifier]=n,this.myIFrame=t.createIFrame_();var a="";if(this.myIFrame.src&&"javascript:"===this.myIFrame.src.substr(0,"javascript:".length))a='<script>document.domain="'+document.domain+'";<\/script>';var s="<html><body>"+a+"</body></html>";try{this.myIFrame.doc.open(),this.myIFrame.doc.write(s),this.myIFrame.doc.close()}catch(t){b("frame writing exception"),t.stack&&b(t.stack),b(t)}}}return t.createIFrame_=function(){var t=document.createElement("iframe");if(t.style.display="none",!document.body)throw"Document body has not initialized. Wait to initialize Firebase until after the document is ready.";document.body.appendChild(t);try{t.contentWindow.document||b("No IE domain setting required")}catch(n){var e=document.domain;t.src="javascript:void((function(){document.open();document.domain='"+e+"';document.close();})())"}return t.contentDocument?t.doc=t.contentDocument:t.contentWindow?t.doc=t.contentWindow.document:t.document&&(t.doc=t.document),t},t.prototype.close=function(){var e=this;if(this.alive=!1,this.myIFrame&&(this.myIFrame.doc.body.innerHTML="",setTimeout(function(){null!==e.myIFrame&&(document.body.removeChild(e.myIFrame),e.myIFrame=null)},Math.floor(0))),i.isNodeSdk()&&this.myID){var n={disconn:"t"};n.id=this.myID,n.pw=this.myPW;var r=this.urlFn(n);t.nodeRestRequest(r)}var o=this.onDisconnect;o&&(this.onDisconnect=null,o())},t.prototype.startLongPoll=function(t,e){for(this.myID=t,this.myPW=e,this.alive=!0;this.newRequest_(););},t.prototype.newRequest_=function(){if(this.alive&&this.sendNewPolls&&this.outstandingRequests.count()<(this.pendingSegs.length>0?2:1)){this.currentSerial++;var t={};t.id=this.myID,t.pw=this.myPW,t.ser=this.currentSerial;for(var e=this.urlFn(t),n="",r=0;this.pendingSegs.length>0;){if(!(this.pendingSegs[0].d.length+30+n.length<=1870))break;var i=this.pendingSegs.shift();n=n+"&seg"+r+"="+i.seg+"&ts"+r+"="+i.ts+"&d"+r+"="+i.d,r++}return e+=n,this.addLongPollTag_(e,this.currentSerial),!0}return!1},t.prototype.enqueueSegment=function(t,e,n){this.pendingSegs.push({seg:t,ts:e,d:n}),this.alive&&this.newRequest_()},t.prototype.addLongPollTag_=function(t,e){var n=this;this.outstandingRequests.add(e,1);var r=function(){n.outstandingRequests.remove(e),n.newRequest_()},i=setTimeout(r,Math.floor(25e3));this.addTag(t,function(){clearTimeout(i),r()})},t.prototype.addTag=function(t,e){var n=this;i.isNodeSdk()?this.doNodeLongPoll(t,e):setTimeout(function(){try{if(!n.sendNewPolls)return;var r=n.myIFrame.doc.createElement("script");r.type="text/javascript",r.async=!0,r.src=t,r.onload=r.onreadystatechange=function(){var t=r.readyState;t&&"loaded"!==t&&"complete"!==t||(r.onload=r.onreadystatechange=null,r.parentNode&&r.parentNode.removeChild(r),e())},r.onerror=function(){b("Long-poll script failed to load: "+t),n.sendNewPolls=!1,n.close()},n.myIFrame.doc.body.appendChild(r)}catch(t){}},Math.floor(1))},t}(),Ve=null;"undefined"!=typeof MozWebSocket?Ve=MozWebSocket:"undefined"!=typeof WebSocket&&(Ve=WebSocket);var Be=function(){function t(e,n,r,i){this.connId=e,this.keepaliveTimer=null,this.frames=null,this.totalFrames=0,this.bytesSent=0,this.bytesReceived=0,this.log_=w(this.connId),this.stats_=Ne.getCollection(n),this.connURL=t.connectionURL_(n,r,i)}return t.connectionURL_=function(t,e,n){var r={v:"5"};return!i.isNodeSdk()&&"undefined"!=typeof location&&location.href&&-1!==location.href.indexOf("firebaseio.com")&&(r.r="f"),e&&(r.s=e),n&&(r.ls=n),t.connectionURL("websocket",r)},t.prototype.open=function(t,e){var n=this;this.onDisconnect=e,this.onMessage=t,this.log_("Websocket connecting to "+this.connURL),this.everConnected_=!1,l.set("previous_websocket_failure",!0);try{if(i.isNodeSdk()){var o=i.CONSTANTS.NODE_ADMIN?"AdminNode":"Node",a={headers:{"User-Agent":"Firebase/5/"+s.SDK_VERSION+"/"+r.platform+"/"+o}},u=r.env,c=0==this.connURL.indexOf("wss://")?u.HTTPS_PROXY||u.https_proxy:u.HTTP_PROXY||u.http_proxy;c&&(a.proxy={origin:c}),this.mySock=new Ve(this.connURL,[],a)}else this.mySock=new Ve(this.connURL)}catch(t){this.log_("Error instantiating WebSocket.");var h=t.message||t.data;return h&&this.log_(h),void this.onClosed_()}this.mySock.onopen=function(){n.log_("Websocket connected."),n.everConnected_=!0},this.mySock.onclose=function(){n.log_("Websocket connection was disconnected."),n.mySock=null,n.onClosed_()},this.mySock.onmessage=function(t){n.handleIncomingFrame(t)},this.mySock.onerror=function(t){n.log_("WebSocket error.  Closing connection.");var e=t.message||t.data;e&&n.log_(e),n.onClosed_()}},t.prototype.start=function(){},t.forceDisallow=function(){t.forceDisallow_=!0},t.isAvailable=function(){var e=!1;if("undefined"!=typeof navigator&&navigator.userAgent){var n=navigator.userAgent.match(/Android ([0-9]{0,}\.[0-9]{0,})/);n&&n.length>1&&parseFloat(n[1])<4.4&&(e=!0)}return!e&&null!==Ve&&!t.forceDisallow_},t.previouslyFailed=function(){return l.isInMemoryStorage||!0===l.get("previous_websocket_failure")},t.prototype.markConnectionHealthy=function(){l.remove("previous_websocket_failure")},t.prototype.appendFrame_=function(t){if(this.frames.push(t),this.frames.length==this.totalFrames){var e=this.frames.join("");this.frames=null;var n=i.jsonEval(e);this.onMessage(n)}},t.prototype.handleNewFrameCount_=function(t){this.totalFrames=t,this.frames=[]},t.prototype.extractFrameCount_=function(t){if(i.assert(null===this.frames,"We already have a frame buffer"),t.length<=6){var e=Number(t);if(!isNaN(e))return this.handleNewFrameCount_(e),null}return this.handleNewFrameCount_(1),t},t.prototype.handleIncomingFrame=function(t){if(null!==this.mySock){var e=t.data;if(this.bytesReceived+=e.length,this.stats_.incrementCounter("bytes_received",e.length),this.resetKeepAlive(),null!==this.frames)this.appendFrame_(e);else{var n=this.extractFrameCount_(e);null!==n&&this.appendFrame_(n)}}},t.prototype.send=function(t){this.resetKeepAlive();var e=i.stringify(t);this.bytesSent+=e.length,this.stats_.incrementCounter("bytes_sent",e.length);var n=k(e,16384);n.length>1&&this.sendString_(String(n.length));for(var r=0;r<n.length;r++)this.sendString_(n[r])},t.prototype.shutdown_=function(){this.isClosed_=!0,this.keepaliveTimer&&(clearInterval(this.keepaliveTimer),this.keepaliveTimer=null),this.mySock&&(this.mySock.close(),this.mySock=null)},t.prototype.onClosed_=function(){this.isClosed_||(this.log_("WebSocket is closing itself"),this.shutdown_(),this.onDisconnect&&(this.onDisconnect(this.everConnected_),this.onDisconnect=null))},t.prototype.close=function(){this.isClosed_||(this.log_("WebSocket is being closed"),this.shutdown_())},t.prototype.resetKeepAlive=function(){var t=this;clearInterval(this.keepaliveTimer),this.keepaliveTimer=setInterval(function(){t.mySock&&t.sendString_("0"),t.resetKeepAlive()},Math.floor(45e3))},t.prototype.sendString_=function(t){try{this.mySock.send(t)}catch(t){this.log_("Exception thrown from WebSocket.send():",t.message||t.data,"Closing connection."),setTimeout(this.onClosed_.bind(this),0)}},t.responsesRequiredToBeHealthy=2,t.healthyTimeout=3e4,t}(),He=function(){function t(t){this.initTransports_(t)}return Object.defineProperty(t,"ALL_TRANSPORTS",{get:function(){return[We,Be]},enumerable:!0,configurable:!0}),t.prototype.initTransports_=function(e){var n=Be&&Be.isAvailable(),r=n&&!Be.previouslyFailed();if(e.webSocketOnly&&(n||T("wss:// URL used, but browser isn't known to support websockets.  Trying anyway."),r=!0),r)this.transports_=[Be];else{var i=this.transports_=[];D(t.ALL_TRANSPORTS,function(t,e){e&&e.isAvailable()&&i.push(e)})}},t.prototype.initialTransport=function(){if(this.transports_.length>0)return this.transports_[0];throw new Error("No transports available")},t.prototype.upgradeTransport=function(){return this.transports_.length>1?this.transports_[1]:null},t}(),Ge=function(){function t(t,e,n,r,i,o,a){this.id=t,this.repoInfo_=e,this.onMessage_=n,this.onReady_=r,this.onDisconnect_=i,this.onKill_=o,this.lastSessionId=a,this.connectionCount=0,this.pendingDataMessages=[],this.state_=0,this.log_=w("c:"+this.id+":"),this.transportManager_=new He(e),this.log_("Connection created"),this.start_()}return t.prototype.start_=function(){var t=this,e=this.transportManager_.initialTransport();this.conn_=new e(this.nextTransportId_(),this.repoInfo_,void 0,this.lastSessionId),this.primaryResponsesRequired_=e.responsesRequiredToBeHealthy||0;var n=this.connReceiver_(this.conn_),r=this.disconnReceiver_(this.conn_);this.tx_=this.conn_,this.rx_=this.conn_,this.secondaryConn_=null,this.isHealthy_=!1,setTimeout(function(){t.conn_&&t.conn_.open(n,r)},Math.floor(0));var i=e.healthyTimeout||0;i>0&&(this.healthyTimeout_=j(function(){t.healthyTimeout_=null,t.isHealthy_||(t.conn_&&t.conn_.bytesReceived>102400?(t.log_("Connection exceeded healthy timeout but has received "+t.conn_.bytesReceived+" bytes.  Marking connection healthy."),t.isHealthy_=!0,t.conn_.markConnectionHealthy()):t.conn_&&t.conn_.bytesSent>10240?t.log_("Connection exceeded healthy timeout but has sent "+t.conn_.bytesSent+" bytes.  Leaving connection alive."):(t.log_("Closing unhealthy connection after timeout."),t.close()))},Math.floor(i)))},t.prototype.nextTransportId_=function(){return"c:"+this.id+":"+this.connectionCount++},t.prototype.disconnReceiver_=function(t){var e=this;return function(n){t===e.conn_?e.onConnectionLost_(n):t===e.secondaryConn_?(e.log_("Secondary connection lost."),e.onSecondaryConnectionLost_()):e.log_("closing an old connection")}},t.prototype.connReceiver_=function(t){var e=this;return function(n){2!=e.state_&&(t===e.rx_?e.onPrimaryMessageReceived_(n):t===e.secondaryConn_?e.onSecondaryMessageReceived_(n):e.log_("message on old connection"))}},t.prototype.sendRequest=function(t){var e={t:"d",d:t};this.sendData_(e)},t.prototype.tryCleanupConnection=function(){this.tx_===this.secondaryConn_&&this.rx_===this.secondaryConn_&&(this.log_("cleaning up and promoting a connection: "+this.secondaryConn_.connId),this.conn_=this.secondaryConn_,this.secondaryConn_=null)},t.prototype.onSecondaryControl_=function(t){if("t"in t){var e=t.t;"a"===e?this.upgradeIfSecondaryHealthy_():"r"===e?(this.log_("Got a reset on secondary, closing it"),this.secondaryConn_.close(),this.tx_!==this.secondaryConn_&&this.rx_!==this.secondaryConn_||this.close()):"o"===e&&(this.log_("got pong on secondary."),this.secondaryResponsesRequired_--,this.upgradeIfSecondaryHealthy_())}},t.prototype.onSecondaryMessageReceived_=function(t){var e=O("t",t),n=O("d",t);if("c"==e)this.onSecondaryControl_(n);else{if("d"!=e)throw new Error("Unknown protocol layer: "+e);this.pendingDataMessages.push(n)}},t.prototype.upgradeIfSecondaryHealthy_=function(){this.secondaryResponsesRequired_<=0?(this.log_("Secondary connection is healthy."),this.isHealthy_=!0,this.secondaryConn_.markConnectionHealthy(),this.proceedWithUpgrade_()):(this.log_("sending ping on secondary."),this.secondaryConn_.send({t:"c",d:{t:"p",d:{}}}))},t.prototype.proceedWithUpgrade_=function(){this.secondaryConn_.start(),this.log_("sending client ack on secondary"),this.secondaryConn_.send({t:"c",d:{t:"a",d:{}}}),this.log_("Ending transmission on primary"),this.conn_.send({t:"c",d:{t:"n",d:{}}}),this.tx_=this.secondaryConn_,this.tryCleanupConnection()},t.prototype.onPrimaryMessageReceived_=function(t){var e=O("t",t),n=O("d",t);"c"==e?this.onControl_(n):"d"==e&&this.onDataMessage_(n)},t.prototype.onDataMessage_=function(t){this.onPrimaryResponse_(),this.onMessage_(t)},t.prototype.onPrimaryResponse_=function(){this.isHealthy_||(this.primaryResponsesRequired_--,this.primaryResponsesRequired_<=0&&(this.log_("Primary connection is healthy."),this.isHealthy_=!0,this.conn_.markConnectionHealthy()))},t.prototype.onControl_=function(t){var e=O("t",t);if("d"in t){var n=t.d;if("h"===e)this.onHandshake_(n);else if("n"===e){this.log_("recvd end transmission on primary"),this.rx_=this.secondaryConn_;for(var r=0;r<this.pendingDataMessages.length;++r)this.onDataMessage_(this.pendingDataMessages[r]);this.pendingDataMessages=[],this.tryCleanupConnection()}else"s"===e?this.onConnectionShutdown_(n):"r"===e?this.onReset_(n):"e"===e?E("Server Error: "+n):"o"===e?(this.log_("got pong on primary."),this.onPrimaryResponse_(),this.sendPingOnPrimaryIfNecessary_()):E("Unknown control packet command: "+e)}},t.prototype.onHandshake_=function(t){var e=t.ts,n=t.v,r=t.h;this.sessionId=t.s,this.repoInfo_.updateHost(r),0==this.state_&&(this.conn_.start(),this.onConnectionEstablished_(this.conn_,e),"5"!==n&&T("Protocol version mismatch detected"),this.tryStartUpgrade_())},t.prototype.tryStartUpgrade_=function(){var t=this.transportManager_.upgradeTransport();t&&this.startUpgrade_(t)},t.prototype.startUpgrade_=function(t){var e=this;this.secondaryConn_=new t(this.nextTransportId_(),this.repoInfo_,this.sessionId),this.secondaryResponsesRequired_=t.responsesRequiredToBeHealthy||0;var n=this.connReceiver_(this.secondaryConn_),r=this.disconnReceiver_(this.secondaryConn_);this.secondaryConn_.open(n,r),j(function(){e.secondaryConn_&&(e.log_("Timed out trying to upgrade."),e.secondaryConn_.close())},Math.floor(6e4))},t.prototype.onReset_=function(t){this.log_("Reset packet received.  New host: "+t),this.repoInfo_.updateHost(t),1===this.state_?this.close():(this.closeConnections_(),this.start_())},t.prototype.onConnectionEstablished_=function(t,e){var n=this;this.log_("Realtime connection established."),this.conn_=t,this.state_=1,this.onReady_&&(this.onReady_(e,this.sessionId),this.onReady_=null),0===this.primaryResponsesRequired_?(this.log_("Primary connection is healthy."),this.isHealthy_=!0):j(function(){n.sendPingOnPrimaryIfNecessary_()},Math.floor(5e3))},t.prototype.sendPingOnPrimaryIfNecessary_=function(){this.isHealthy_||1!==this.state_||(this.log_("sending ping on primary."),this.sendData_({t:"c",d:{t:"p",d:{}}}))},t.prototype.onSecondaryConnectionLost_=function(){var t=this.secondaryConn_;this.secondaryConn_=null,this.tx_!==t&&this.rx_!==t||this.close()},t.prototype.onConnectionLost_=function(t){this.conn_=null,t||0!==this.state_?1===this.state_&&this.log_("Realtime connection lost."):(this.log_("Realtime connection failed."),this.repoInfo_.isCacheableHost()&&(l.remove("host:"+this.repoInfo_.host),this.repoInfo_.internalHost=this.repoInfo_.host)),this.close()},t.prototype.onConnectionShutdown_=function(t){this.log_("Connection shutdown command received. Shutting down..."),this.onKill_&&(this.onKill_(t),this.onKill_=null),this.onDisconnect_=null,this.close()},t.prototype.sendData_=function(t){if(1!==this.state_)throw"Connection is not connected";this.tx_.send(t)},t.prototype.close=function(){2!==this.state_&&(this.log_("Closing realtime connection."),this.state_=2,this.closeConnections_(),this.onDisconnect_&&(this.onDisconnect_(),this.onDisconnect_=null))},t.prototype.closeConnections_=function(){this.log_("Shutting down all connections"),this.conn_&&(this.conn_.close(),this.conn_=null),this.secondaryConn_&&(this.secondaryConn_.close(),this.secondaryConn_=null),this.healthyTimeout_&&(clearTimeout(this.healthyTimeout_),this.healthyTimeout_=null)},t}(),Ke=function(){function t(){}return t.prototype.put=function(t,e,n,r){},t.prototype.merge=function(t,e,n,r){},t.prototype.refreshAuthToken=function(t){},t.prototype.onDisconnectPut=function(t,e,n){},t.prototype.onDisconnectMerge=function(t,e,n){},t.prototype.onDisconnectCancel=function(t,e){},t.prototype.reportStats=function(t){},t}(),Qe=1e3,ze=3e5,Xe=function(t){function e(n,r,o,a,s,u){var c=t.call(this)||this;if(c.repoInfo_=n,c.onDataUpdate_=r,c.onConnectStatus_=o,c.onServerInfoUpdate_=a,c.authTokenProvider_=s,c.authOverride_=u,c.id=e.nextPersistentConnectionId_++,c.log_=w("p:"+c.id+":"),c.interruptReasons_={},c.listens_={},c.outstandingPuts_=[],c.outstandingPutCount_=0,c.onDisconnectRequestQueue_=[],c.connected_=!1,c.reconnectDelay_=Qe,c.maxReconnectDelay_=ze,c.securityDebugCallback_=null,c.lastSessionId=null,c.establishConnectionTimer_=null,c.visible_=!1,c.requestCBHash_={},c.requestNumber_=0,c.realtime_=null,c.authToken_=null,c.forceTokenRefresh_=!1,c.invalidAuthTokenCount_=0,c.firstConnection_=!0,c.lastConnectionAttemptTime_=null,c.lastConnectionEstablishedTime_=null,u&&!i.isNodeSdk())throw new Error("Auth override specified in options, but not supported on non Node.js platforms");return c.scheduleConnect_(0),Le.getInstance().on("visible",c.onVisible_,c),-1===n.host.indexOf("fblocal")&&Me.getInstance().on("online",c.onOnline_,c),c}return a.__extends(e,t),e.prototype.sendRequest=function(t,e,n){var r=++this.requestNumber_,o={r:r,a:t,b:e};this.log_(i.stringify(o)),i.assert(this.connected_,"sendRequest call when we're not connected not allowed."),this.realtime_.sendRequest(o),n&&(this.requestCBHash_[r]=n)},e.prototype.listen=function(t,e,n,r){var o=t.queryIdentifier(),a=t.path.toString();this.log_("Listen called for "+a+" "+o),this.listens_[a]=this.listens_[a]||{},i.assert(t.getQueryParams().isDefault()||!t.getQueryParams().loadsAllData(),"listen() called for non-default but complete query"),i.assert(!this.listens_[a][o],"listen() called twice for same path/queryId.");var s={onComplete:r,hashFn:e,query:t,tag:n};this.listens_[a][o]=s,this.connected_&&this.sendListen_(s)},e.prototype.sendListen_=function(t){var n=this,r=t.query,i=r.path.toString(),o=r.queryIdentifier();this.log_("Listen on "+i+" for "+o);var a={p:i};t.tag&&(a.q=r.queryObject(),a.t=t.tag),a.h=t.hashFn(),this.sendRequest("q",a,function(a){var s=a.d,u=a.s;e.warnOnListenWarnings_(s,r),(n.listens_[i]&&n.listens_[i][o])===t&&(n.log_("listen response",a),"ok"!==u&&n.removeListen_(i,o),t.onComplete&&t.onComplete(u,s))})},e.warnOnListenWarnings_=function(t,e){if(t&&"object"==typeof t&&i.contains(t,"w")){var n=i.safeGet(t,"w");if(Array.isArray(n)&&~n.indexOf("no_index")){var r='".indexOn": "'+e.getQueryParams().getIndex().toString()+'"',o=e.path.toString();T("Using an unspecified index. Your data will be downloaded and filtered on the client. Consider adding "+r+" at "+o+" to your security rules for better performance.")}}},e.prototype.refreshAuthToken=function(t){this.authToken_=t,this.log_("Auth token refreshed"),this.authToken_?this.tryAuth():this.connected_&&this.sendRequest("unauth",{},function(){}),this.reduceReconnectDelayIfAdminCredential_(t)},e.prototype.reduceReconnectDelayIfAdminCredential_=function(t){(t&&40===t.length||i.isAdmin(t))&&(this.log_("Admin auth credential detected.  Reducing max reconnect time."),this.maxReconnectDelay_=3e4)},e.prototype.tryAuth=function(){var t=this;if(this.connected_&&this.authToken_){var e=this.authToken_,n=i.isValidFormat(e)?"auth":"gauth",r={cred:e};null===this.authOverride_?r.noauth=!0:"object"==typeof this.authOverride_&&(r.authvar=this.authOverride_),this.sendRequest(n,r,function(n){var r=n.s,i=n.d||"error";t.authToken_===e&&("ok"===r?t.invalidAuthTokenCount_=0:t.onAuthRevoked_(r,i))})}},e.prototype.unlisten=function(t,e){var n=t.path.toString(),r=t.queryIdentifier();this.log_("Unlisten called for "+n+" "+r),i.assert(t.getQueryParams().isDefault()||!t.getQueryParams().loadsAllData(),"unlisten() called for non-default but complete query"),this.removeListen_(n,r)&&this.connected_&&this.sendUnlisten_(n,r,t.queryObject(),e)},e.prototype.sendUnlisten_=function(t,e,n,r){this.log_("Unlisten on "+t+" for "+e);var i={p:t};r&&(i.q=n,i.t=r),this.sendRequest("n",i)},e.prototype.onDisconnectPut=function(t,e,n){this.connected_?this.sendOnDisconnect_("o",t,e,n):this.onDisconnectRequestQueue_.push({pathString:t,action:"o",data:e,onComplete:n})},e.prototype.onDisconnectMerge=function(t,e,n){this.connected_?this.sendOnDisconnect_("om",t,e,n):this.onDisconnectRequestQueue_.push({pathString:t,action:"om",data:e,onComplete:n})},e.prototype.onDisconnectCancel=function(t,e){this.connected_?this.sendOnDisconnect_("oc",t,null,e):this.onDisconnectRequestQueue_.push({pathString:t,action:"oc",data:null,onComplete:e})},e.prototype.sendOnDisconnect_=function(t,e,n,r){var i={p:e,d:n};this.log_("onDisconnect "+t,i),this.sendRequest(t,i,function(t){r&&setTimeout(function(){r(t.s,t.d)},Math.floor(0))})},e.prototype.put=function(t,e,n,r){this.putInternal("p",t,e,n,r)},e.prototype.merge=function(t,e,n,r){this.putInternal("m",t,e,n,r)},e.prototype.putInternal=function(t,e,n,r,i){var o={p:e,d:n};void 0!==i&&(o.h=i),this.outstandingPuts_.push({action:t,request:o,onComplete:r}),this.outstandingPutCount_++;var a=this.outstandingPuts_.length-1;this.connected_?this.sendPut_(a):this.log_("Buffering put: "+e)},e.prototype.sendPut_=function(t){var e=this,n=this.outstandingPuts_[t].action,r=this.outstandingPuts_[t].request,i=this.outstandingPuts_[t].onComplete;this.outstandingPuts_[t].queued=this.connected_,this.sendRequest(n,r,function(r){e.log_(n+" response",r),delete e.outstandingPuts_[t],e.outstandingPutCount_--,0===e.outstandingPutCount_&&(e.outstandingPuts_=[]),i&&i(r.s,r.d)})},e.prototype.reportStats=function(t){var e=this;if(this.connected_){var n={c:t};this.log_("reportStats",n),this.sendRequest("s",n,function(t){if("ok"!==t.s){var n=t.d;e.log_("reportStats","Error sending stats: "+n)}})}},e.prototype.onDataMessage_=function(t){if("r"in t){this.log_("from server: "+i.stringify(t));var e=t.r,n=this.requestCBHash_[e];n&&(delete this.requestCBHash_[e],n(t.b))}else{if("error"in t)throw"A server-side error has occurred: "+t.error;"a"in t&&this.onDataPush_(t.a,t.b)}},e.prototype.onDataPush_=function(t,e){this.log_("handleServerMessage",t,e),"d"===t?this.onDataUpdate_(e.p,e.d,!1,e.t):"m"===t?this.onDataUpdate_(e.p,e.d,!0,e.t):"c"===t?this.onListenRevoked_(e.p,e.q):"ac"===t?this.onAuthRevoked_(e.s,e.d):"sd"===t?this.onSecurityDebugPacket_(e):E("Unrecognized action received from server: "+i.stringify(t)+"\nAre you using the latest client?")},e.prototype.onReady_=function(t,e){this.log_("connection ready"),this.connected_=!0,this.lastConnectionEstablishedTime_=(new Date).getTime(),this.handleTimestamp_(t),this.lastSessionId=e,this.firstConnection_&&this.sendConnectStats_(),this.restoreState_(),this.firstConnection_=!1,this.onConnectStatus_(!0)},e.prototype.scheduleConnect_=function(t){var e=this;i.assert(!this.realtime_,"Scheduling a connect when we're already connected/ing?"),this.establishConnectionTimer_&&clearTimeout(this.establishConnectionTimer_),this.establishConnectionTimer_=setTimeout(function(){e.establishConnectionTimer_=null,e.establishConnection_()},Math.floor(t))},e.prototype.onVisible_=function(t){t&&!this.visible_&&this.reconnectDelay_===this.maxReconnectDelay_&&(this.log_("Window became visible.  Reducing delay."),this.reconnectDelay_=Qe,this.realtime_||this.scheduleConnect_(0)),this.visible_=t},e.prototype.onOnline_=function(t){t?(this.log_("Browser went online."),this.reconnectDelay_=Qe,this.realtime_||this.scheduleConnect_(0)):(this.log_("Browser went offline.  Killing connection."),this.realtime_&&this.realtime_.close())},e.prototype.onRealtimeDisconnect_=function(){if(this.log_("data client disconnected"),this.connected_=!1,this.realtime_=null,this.cancelSentTransactions_(),this.requestCBHash_={},this.shouldReconnect_()){if(this.visible_){if(this.lastConnectionEstablishedTime_){(new Date).getTime()-this.lastConnectionEstablishedTime_>3e4&&(this.reconnectDelay_=Qe),this.lastConnectionEstablishedTime_=null}}else this.log_("Window isn't visible.  Delaying reconnect."),this.reconnectDelay_=this.maxReconnectDelay_,this.lastConnectionAttemptTime_=(new Date).getTime();var t=(new Date).getTime()-this.lastConnectionAttemptTime_,e=Math.max(0,this.reconnectDelay_-t);e=Math.random()*e,this.log_("Trying to reconnect in "+e+"ms"),this.scheduleConnect_(e),this.reconnectDelay_=Math.min(this.maxReconnectDelay_,1.3*this.reconnectDelay_)}this.onConnectStatus_(!1)},e.prototype.establishConnection_=function(){if(this.shouldReconnect_()){this.log_("Making a connection attempt"),this.lastConnectionAttemptTime_=(new Date).getTime(),this.lastConnectionEstablishedTime_=null;var t=this.onDataMessage_.bind(this),n=this.onReady_.bind(this),r=this.onRealtimeDisconnect_.bind(this),o=this.id+":"+e.nextConnectionId_++,a=this,s=this.lastSessionId,u=!1,c=null,h=function(){c?c.close():(u=!0,r())};this.realtime_={close:h,sendRequest:function(t){i.assert(c,"sendRequest call when we're not connected not allowed."),c.sendRequest(t)}};var l=this.forceTokenRefresh_;this.forceTokenRefresh_=!1,this.authTokenProvider_.getToken(l).then(function(e){u?b("getToken() completed but was canceled"):(b("getToken() completed. Creating connection."),a.authToken_=e&&e.accessToken,c=new Ge(o,a.repoInfo_,t,n,r,function(t){T(t+" ("+a.repoInfo_.toString()+")"),a.interrupt("server_kill")},s))}).then(null,function(t){a.log_("Failed to get token: "+t),u||(i.CONSTANTS.NODE_ADMIN&&T(t),h())})}},e.prototype.interrupt=function(t){b("Interrupting connection for reason: "+t),this.interruptReasons_[t]=!0,this.realtime_?this.realtime_.close():(this.establishConnectionTimer_&&(clearTimeout(this.establishConnectionTimer_),this.establishConnectionTimer_=null),this.connected_&&this.onRealtimeDisconnect_())},e.prototype.resume=function(t){b("Resuming connection for reason: "+t),delete this.interruptReasons_[t],i.isEmpty(this.interruptReasons_)&&(this.reconnectDelay_=Qe,this.realtime_||this.scheduleConnect_(0))},e.prototype.handleTimestamp_=function(t){var e=t-(new Date).getTime();this.onServerInfoUpdate_({serverTimeOffset:e})},e.prototype.cancelSentTransactions_=function(){for(var t=0;t<this.outstandingPuts_.length;t++){var e=this.outstandingPuts_[t];e&&"h"in e.request&&e.queued&&(e.onComplete&&e.onComplete("disconnect"),delete this.outstandingPuts_[t],this.outstandingPutCount_--)}0===this.outstandingPutCount_&&(this.outstandingPuts_=[])},e.prototype.onListenRevoked_=function(t,e){var n;n=e?e.map(function(t){return P(t)}).join("$"):"default";var r=this.removeListen_(t,n);r&&r.onComplete&&r.onComplete("permission_denied")},e.prototype.removeListen_=function(t,e){var n,r=new W(t).toString();return void 0!==this.listens_[r]?(n=this.listens_[r][e],delete this.listens_[r][e],0===i.getCount(this.listens_[r])&&delete this.listens_[r]):n=void 0,n},e.prototype.onAuthRevoked_=function(t,e){b("Auth token revoked: "+t+"/"+e),this.authToken_=null,this.forceTokenRefresh_=!0,this.realtime_.close(),"invalid_token"!==t&&"permission_denied"!==t||(this.invalidAuthTokenCount_++,this.invalidAuthTokenCount_>=3&&(this.reconnectDelay_=3e4,this.authTokenProvider_.notifyForInvalidToken()))},e.prototype.onSecurityDebugPacket_=function(t){this.securityDebugCallback_?this.securityDebugCallback_(t):"msg"in t&&console.log("FIREBASE: "+t.msg.replace("\n","\nFIREBASE: "))},e.prototype.restoreState_=function(){var t=this;this.tryAuth(),i.forEach(this.listens_,function(e,n){i.forEach(n,function(e,n){t.sendListen_(n)})});for(var e=0;e<this.outstandingPuts_.length;e++)this.outstandingPuts_[e]&&this.sendPut_(e);for(;this.onDisconnectRequestQueue_.length;){var n=this.onDisconnectRequestQueue_.shift();this.sendOnDisconnect_(n.action,n.pathString,n.data,n.onComplete)}},e.prototype.sendConnectStats_=function(){var t={},e="js";i.CONSTANTS.NODE_ADMIN?e="admin_node":i.CONSTANTS.NODE_CLIENT&&(e="node"),t["sdk."+e+"."+s.SDK_VERSION.replace(/\./g,"-")]=1,i.isMobileCordova()?t["framework.cordova"]=1:i.isReactNative()&&(t["framework.reactnative"]=1),this.reportStats(t)},e.prototype.shouldReconnect_=function(){var t=Me.getInstance().currentlyOnline();return i.isEmpty(this.interruptReasons_)&&t},e.nextPersistentConnectionId_=0,e.nextConnectionId_=0,e}(Ke),Ye=function(t){function e(e,n,r){var i=t.call(this)||this;return i.repoInfo_=e,i.onDataUpdate_=n,i.authTokenProvider_=r,i.log_=w("p:rest:"),i.listens_={},i}return a.__extends(e,t),e.prototype.reportStats=function(t){throw new Error("Method not implemented.")},e.getListenId_=function(t,e){return void 0!==e?"tag$"+e:(i.assert(t.getQueryParams().isDefault(),"should have a tag if it's not a default query."),t.path.toString())},e.prototype.listen=function(t,n,r,o){var a=this,s=t.path.toString();this.log_("Listen called for "+s+" "+t.queryIdentifier());var u=e.getListenId_(t,r),c={};this.listens_[u]=c;var h=t.getQueryParams().toRestQueryStringParameters();this.restRequest_(s+".json",h,function(t,e){var n=e;(404===t&&(n=null,t=null),null===t&&a.onDataUpdate_(s,n,!1,r),i.safeGet(a.listens_,u)===c)&&o(t?401==t?"permission_denied":"rest_error:"+t:"ok",null)})},e.prototype.unlisten=function(t,n){var r=e.getListenId_(t,n);delete this.listens_[r]},e.prototype.refreshAuthToken=function(t){},e.prototype.restRequest_=function(t,e,n){var r=this;void 0===e&&(e={}),e.format="export",this.authTokenProvider_.getToken(!1).then(function(o){var a=o&&o.accessToken;a&&(e.auth=a);var s=(r.repoInfo_.secure?"https://":"http://")+r.repoInfo_.host+t+"?"+i.querystring(e);r.log_("Sending REST request for "+s);var u=new XMLHttpRequest;u.onreadystatechange=function(){if(n&&4===u.readyState){r.log_("REST Response for "+s+" received. status:",u.status,"response:",u.responseText);var t=null;if(u.status>=200&&u.status<300){try{t=i.jsonEval(u.responseText)}catch(t){T("Failed to parse JSON response for "+s+": "+u.responseText)}n(null,t)}else 401!==u.status&&404!==u.status&&T("Got unsuccessful REST response for "+s+" Status: "+u.status),n(u.status);n=null}},u.open("GET",s,!0),u.send()})},e}(Ke),Je=function(){function t(t,e,n){var r=this;this.repoInfo_=t,this.app=n,this.dataUpdateCount=0,this.statsListener_=null,this.eventQueue_=new ke,this.nextWriteId_=1,this.interceptServerDataCallback_=null,this.onDisconnect_=new Yt,this.persistentConnection_=null;var o=new Se(n);if(this.stats_=Ne.getCollection(t),e||U())this.server_=new Ye(this.repoInfo_,this.onDataUpdate_.bind(this),o),setTimeout(this.onConnectStatus_.bind(this,!0),0);else{var a=n.options.databaseAuthVariableOverride;if(void 0!==a&&null!==a){if("object"!=typeof a)throw new Error("Only objects are supported for option databaseAuthVariableOverride");try{i.stringify(a)}catch(t){throw new Error("Invalid authOverride provided: "+t)}}this.persistentConnection_=new Xe(this.repoInfo_,this.onDataUpdate_.bind(this),this.onConnectStatus_.bind(this),this.onServerInfoUpdate_.bind(this),o,a),this.server_=this.persistentConnection_}o.addTokenChangeListener(function(t){r.server_.refreshAuthToken(t)}),this.statsReporter_=Ne.getOrCreateReporter(t,function(){return new Pe(r.stats_,r.server_)}),this.transactions_init_(),this.infoData_=new Te,this.infoSyncTree_=new Ce({startListening:function(t,e,n,i){var o=[],a=r.infoData_.getNode(t.path);return a.isEmpty()||(o=r.infoSyncTree_.applyServerOverwrite(t.path,a),setTimeout(function(){i("ok")},0)),o},stopListening:function(){}}),this.updateInfo_("connected",!1),this.serverSyncTree_=new Ce({startListening:function(t,e,n,i){return r.server_.listen(t,n,e,function(e,n){var o=i(e,n);r.eventQueue_.raiseEventsForChangedPath(t.path,o)}),[]},stopListening:function(t,e){r.server_.unlisten(t,e)}})}return t.prototype.toString=function(){return(this.repoInfo_.secure?"https://":"http://")+this.repoInfo_.host},t.prototype.name=function(){return this.repoInfo_.namespace},t.prototype.serverTime=function(){var t=this.infoData_.getNode(new W(".info/serverTimeOffset")).val()||0;return(new Date).getTime()+t},t.prototype.generateServerValues=function(){return function(t){return(t=t||{}).timestamp=t.timestamp||(new Date).getTime(),t}({timestamp:this.serverTime()})},t.prototype.onDataUpdate_=function(t,e,n,r){this.dataUpdateCount++;var o=new W(t);e=this.interceptServerDataCallback_?this.interceptServerDataCallback_(t,e):e;var a=[];if(r)if(n){var s=i.map(e,function(t){return Ut(t)});a=this.serverSyncTree_.applyTaggedQueryMerge(o,s,r)}else{var u=Ut(e);a=this.serverSyncTree_.applyTaggedQueryOverwrite(o,u,r)}else if(n){var c=i.map(e,function(t){return Ut(t)});a=this.serverSyncTree_.applyServerMerge(o,c)}else{var h=Ut(e);a=this.serverSyncTree_.applyServerOverwrite(o,h)}var l=o;a.length>0&&(l=this.rerunTransactions_(o)),this.eventQueue_.raiseEventsForChangedPath(l,a)},t.prototype.interceptServerData_=function(t){this.interceptServerDataCallback_=t},t.prototype.onConnectStatus_=function(t){this.updateInfo_("connected",t),!1===t&&this.runOnDisconnectEvents_()},t.prototype.onServerInfoUpdate_=function(t){var e=this;D(t,function(t,n){e.updateInfo_(n,t)})},t.prototype.updateInfo_=function(t,e){var n=new W("/.info/"+t),r=Ut(e);this.infoData_.updateSnapshot(n,r);var i=this.infoSyncTree_.applyServerOverwrite(n,r);this.eventQueue_.raiseEventsForChangedPath(n,i)},t.prototype.getNextWriteId_=function(){return this.nextWriteId_++},t.prototype.setWithPriority=function(t,e,n,r){var i=this;this.log_("set",{path:t.toString(),value:e,priority:n});var o=this.generateServerValues(),a=Ut(e,n),s=$t(a,o),u=this.getNextWriteId_(),c=this.serverSyncTree_.applyUserOverwrite(t,s,u,!0);this.eventQueue_.queueEvents(c),this.server_.put(t.toString(),a.val(!0),function(e,n){var o="ok"===e;o||T("set at "+t+" failed: "+e);var a=i.serverSyncTree_.ackUserWrite(u,!o);i.eventQueue_.raiseEventsForChangedPath(t,a),i.callOnCompleteCallback(r,e,n)});var h=this.abortTransactions_(t);this.rerunTransactions_(h),this.eventQueue_.raiseEventsForChangedPath(h,[])},t.prototype.update=function(t,e,n){var r=this;this.log_("update",{path:t.toString(),value:e});var o=!0,a=this.generateServerValues(),s={};if(i.forEach(e,function(t,e){o=!1;var n=Ut(e);s[t]=$t(n,a)}),o)b("update() called with empty data.  Don't do anything."),this.callOnCompleteCallback(n,"ok");else{var u=this.getNextWriteId_(),c=this.serverSyncTree_.applyUserMerge(t,s,u);this.eventQueue_.queueEvents(c),this.server_.merge(t.toString(),e,function(e,i){var o="ok"===e;o||T("update at "+t+" failed: "+e);var a=r.serverSyncTree_.ackUserWrite(u,!o),s=a.length>0?r.rerunTransactions_(t):t;r.eventQueue_.raiseEventsForChangedPath(s,a),r.callOnCompleteCallback(n,e,i)}),i.forEach(e,function(e){var n=r.abortTransactions_(t.child(e));r.rerunTransactions_(n)}),this.eventQueue_.raiseEventsForChangedPath(t,[])}},t.prototype.runOnDisconnectEvents_=function(){var t=this;this.log_("onDisconnectEvents");var e=this.generateServerValues(),n=[];(function(t,e){var n=new Yt;return t.forEachTree(new W(""),function(t,r){n.remember(t,$t(r,e))}),n})(this.onDisconnect_,e).forEachTree(W.Empty,function(e,r){n=n.concat(t.serverSyncTree_.applyServerOverwrite(e,r));var i=t.abortTransactions_(e);t.rerunTransactions_(i)}),this.onDisconnect_=new Yt,this.eventQueue_.raiseEventsForChangedPath(W.Empty,n)},t.prototype.onDisconnectCancel=function(t,e){var n=this;this.server_.onDisconnectCancel(t.toString(),function(r,i){"ok"===r&&n.onDisconnect_.forget(t),n.callOnCompleteCallback(e,r,i)})},t.prototype.onDisconnectSet=function(t,e,n){var r=this,i=Ut(e);this.server_.onDisconnectPut(t.toString(),i.val(!0),function(e,o){"ok"===e&&r.onDisconnect_.remember(t,i),r.callOnCompleteCallback(n,e,o)})},t.prototype.onDisconnectSetWithPriority=function(t,e,n,r){var i=this,o=Ut(e,n);this.server_.onDisconnectPut(t.toString(),o.val(!0),function(e,n){"ok"===e&&i.onDisconnect_.remember(t,o),i.callOnCompleteCallback(r,e,n)})},t.prototype.onDisconnectUpdate=function(t,e,n){var r=this;if(i.isEmpty(e))return b("onDisconnect().update() called with empty data.  Don't do anything."),void this.callOnCompleteCallback(n,"ok");this.server_.onDisconnectMerge(t.toString(),e,function(o,a){"ok"===o&&i.forEach(e,function(e,n){var i=Ut(n);r.onDisconnect_.remember(t.child(e),i)}),r.callOnCompleteCallback(n,o,a)})},t.prototype.addEventCallbackForQuery=function(t,e){var n;n=".info"===t.path.getFront()?this.infoSyncTree_.addEventRegistration(t,e):this.serverSyncTree_.addEventRegistration(t,e),this.eventQueue_.raiseEventsAtPath(t.path,n)},t.prototype.removeEventCallbackForQuery=function(t,e){var n;n=".info"===t.path.getFront()?this.infoSyncTree_.removeEventRegistration(t,e):this.serverSyncTree_.removeEventRegistration(t,e),this.eventQueue_.raiseEventsAtPath(t.path,n)},t.prototype.interrupt=function(){this.persistentConnection_&&this.persistentConnection_.interrupt("repo_interrupt")},t.prototype.resume=function(){this.persistentConnection_&&this.persistentConnection_.resume("repo_interrupt")},t.prototype.stats=function(t){if(void 0===t&&(t=!1),"undefined"!=typeof console){var e;t?(this.statsListener_||(this.statsListener_=new Ae(this.stats_)),e=this.statsListener_.get()):e=this.stats_.get();var n=Object.keys(e).reduce(function(t,e){return Math.max(e.length,t)},0);i.forEach(e,function(t,e){for(var r=t.length;r<n+2;r++)t+=" ";console.log(t+e)})}},t.prototype.statsIncrementCounter=function(t){this.stats_.incrementCounter(t),this.statsReporter_.includeStat(t)},t.prototype.log_=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n="";this.persistentConnection_&&(n=this.persistentConnection_.id+":"),b.apply(void 0,[n].concat(t))},t.prototype.callOnCompleteCallback=function(t,e,n){t&&F(function(){if("ok"==e)t(null);else{var r=(e||"error").toUpperCase(),i=r;n&&(i+=": "+n);var o=new Error(i);o.code=r,t(o)}})},Object.defineProperty(t.prototype,"database",{get:function(){return this.__database||(this.__database=new un(this))},enumerable:!0,configurable:!0}),t}(),$e=function(){function t(e){this.indexedFilter_=new le(e.getIndex()),this.index_=e.getIndex(),this.startPost_=t.getStartPost_(e),this.endPost_=t.getEndPost_(e)}return t.prototype.getStartPost=function(){return this.startPost_},t.prototype.getEndPost=function(){return this.endPost_},t.prototype.matches=function(t){return this.index_.compare(this.getStartPost(),t)<=0&&this.index_.compare(t,this.getEndPost())<=0},t.prototype.updateChild=function(t,e,n,r,i,o){return this.matches(new lt(e,n))||(n=Lt.EMPTY_NODE),this.indexedFilter_.updateChild(t,e,n,r,i,o)},t.prototype.updateFullNode=function(t,e,n){e.isLeafNode()&&(e=Lt.EMPTY_NODE);var r=e.withIndex(this.index_);r=r.updatePriority(Lt.EMPTY_NODE);var i=this;return e.forEachChild(Ct,function(t,e){i.matches(new lt(t,e))||(r=r.updateImmediateChild(t,Lt.EMPTY_NODE))}),this.indexedFilter_.updateFullNode(t,r,n)},t.prototype.updatePriority=function(t,e){return t},t.prototype.filtersNodes=function(){return!0},t.prototype.getIndexedFilter=function(){return this.indexedFilter_},t.prototype.getIndex=function(){return this.index_},t.getStartPost_=function(t){if(t.hasStart()){var e=t.getIndexStartName();return t.getIndex().makePost(t.getIndexStartValue(),e)}return t.getIndex().minPost()},t.getEndPost_=function(t){if(t.hasEnd()){var e=t.getIndexEndName();return t.getIndex().makePost(t.getIndexEndValue(),e)}return t.getIndex().maxPost()},t}(),Ze=function(){function t(t){this.rangedFilter_=new $e(t),this.index_=t.getIndex(),this.limit_=t.getLimit(),this.reverse_=!t.isViewFromLeft()}return t.prototype.updateChild=function(t,e,n,r,i,o){return this.rangedFilter_.matches(new lt(e,n))||(n=Lt.EMPTY_NODE),t.getImmediateChild(e).equals(n)?t:t.numChildren()<this.limit_?this.rangedFilter_.getIndexedFilter().updateChild(t,e,n,r,i,o):this.fullLimitUpdateChild_(t,e,n,i,o)},t.prototype.updateFullNode=function(t,e,n){var r;if(e.isLeafNode()||e.isEmpty())r=Lt.EMPTY_NODE.withIndex(this.index_);else if(2*this.limit_<e.numChildren()&&e.isIndexed(this.index_)){r=Lt.EMPTY_NODE.withIndex(this.index_);var i=void 0;i=this.reverse_?e.getReverseIteratorFrom(this.rangedFilter_.getEndPost(),this.index_):e.getIteratorFrom(this.rangedFilter_.getStartPost(),this.index_);for(var o=0;i.hasNext()&&o<this.limit_;){var a=i.getNext();if(!(this.reverse_?this.index_.compare(this.rangedFilter_.getStartPost(),a)<=0:this.index_.compare(a,this.rangedFilter_.getEndPost())<=0))break;r=r.updateImmediateChild(a.name,a.node),o++}}else{r=(r=e.withIndex(this.index_)).updatePriority(Lt.EMPTY_NODE);var s=void 0,u=void 0,c=void 0;i=void 0;if(this.reverse_){i=r.getReverseIterator(this.index_),s=this.rangedFilter_.getEndPost(),u=this.rangedFilter_.getStartPost();var h=this.index_.getCompare();c=function(t,e){return h(e,t)}}else i=r.getIterator(this.index_),s=this.rangedFilter_.getStartPost(),u=this.rangedFilter_.getEndPost(),c=this.index_.getCompare();o=0;for(var l=!1;i.hasNext();){a=i.getNext();!l&&c(s,a)<=0&&(l=!0),l&&o<this.limit_&&c(a,u)<=0?o++:r=r.updateImmediateChild(a.name,Lt.EMPTY_NODE)}}return this.rangedFilter_.getIndexedFilter().updateFullNode(t,r,n)},t.prototype.updatePriority=function(t,e){return t},t.prototype.filtersNodes=function(){return!0},t.prototype.getIndexedFilter=function(){return this.rangedFilter_.getIndexedFilter()},t.prototype.getIndex=function(){return this.index_},t.prototype.fullLimitUpdateChild_=function(t,e,n,r,o){var a;if(this.reverse_){var s=this.index_.getCompare();a=function(t,e){return s(e,t)}}else a=this.index_.getCompare();var u=t;i.assert(u.numChildren()==this.limit_,"");var c=new lt(e,n),h=this.reverse_?u.getFirstChild(this.index_):u.getLastChild(this.index_),l=this.rangedFilter_.matches(c);if(u.hasChild(e)){for(var f=u.getImmediateChild(e),p=r.getChildAfterChild(this.index_,h,this.reverse_);null!=p&&(p.name==e||u.hasChild(p.name));)p=r.getChildAfterChild(this.index_,p,this.reverse_);var d=null==p?1:a(p,c);if(l&&!n.isEmpty()&&d>=0)return null!=o&&o.trackChildChange(he.childChangedChange(e,n,f)),u.updateImmediateChild(e,n);null!=o&&o.trackChildChange(he.childRemovedChange(e,f));var v=u.updateImmediateChild(e,Lt.EMPTY_NODE);return null!=p&&this.rangedFilter_.matches(p)?(null!=o&&o.trackChildChange(he.childAddedChange(p.name,p.node)),v.updateImmediateChild(p.name,p.node)):v}return n.isEmpty()?t:l&&a(h,c)>=0?(null!=o&&(o.trackChildChange(he.childRemovedChange(h.name,h.node)),o.trackChildChange(he.childAddedChange(e,n))),u.updateImmediateChild(e,n).updateImmediateChild(h.name,Lt.EMPTY_NODE)):t},t}(),tn=function(){function t(){this.limitSet_=!1,this.startSet_=!1,this.startNameSet_=!1,this.endSet_=!1,this.endNameSet_=!1,this.limit_=0,this.viewFrom_="",this.indexStartValue_=null,this.indexStartName_="",this.indexEndValue_=null,this.indexEndName_="",this.index_=Ct}return t.prototype.hasStart=function(){return this.startSet_},t.prototype.isViewFromLeft=function(){return""===this.viewFrom_?this.startSet_:this.viewFrom_===t.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT},t.prototype.getIndexStartValue=function(){return i.assert(this.startSet_,"Only valid if start has been set"),this.indexStartValue_},t.prototype.getIndexStartName=function(){return i.assert(this.startSet_,"Only valid if start has been set"),this.startNameSet_?this.indexStartName_:I},t.prototype.hasEnd=function(){return this.endSet_},t.prototype.getIndexEndValue=function(){return i.assert(this.endSet_,"Only valid if end has been set"),this.indexEndValue_},t.prototype.getIndexEndName=function(){return i.assert(this.endSet_,"Only valid if end has been set"),this.endNameSet_?this.indexEndName_:N},t.prototype.hasLimit=function(){return this.limitSet_},t.prototype.hasAnchoredLimit=function(){return this.limitSet_&&""!==this.viewFrom_},t.prototype.getLimit=function(){return i.assert(this.limitSet_,"Only valid if limit has been set"),this.limit_},t.prototype.getIndex=function(){return this.index_},t.prototype.copy_=function(){var e=new t;return e.limitSet_=this.limitSet_,e.limit_=this.limit_,e.startSet_=this.startSet_,e.indexStartValue_=this.indexStartValue_,e.startNameSet_=this.startNameSet_,e.indexStartName_=this.indexStartName_,e.endSet_=this.endSet_,e.indexEndValue_=this.indexEndValue_,e.endNameSet_=this.endNameSet_,e.indexEndName_=this.indexEndName_,e.index_=this.index_,e.viewFrom_=this.viewFrom_,e},t.prototype.limit=function(t){var e=this.copy_();return e.limitSet_=!0,e.limit_=t,e.viewFrom_="",e},t.prototype.limitToFirst=function(e){var n=this.copy_();return n.limitSet_=!0,n.limit_=e,n.viewFrom_=t.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT,n},t.prototype.limitToLast=function(e){var n=this.copy_();return n.limitSet_=!0,n.limit_=e,n.viewFrom_=t.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT,n},t.prototype.startAt=function(t,e){var n=this.copy_();return n.startSet_=!0,void 0===t&&(t=null),n.indexStartValue_=t,null!=e?(n.startNameSet_=!0,n.indexStartName_=e):(n.startNameSet_=!1,n.indexStartName_=""),n},t.prototype.endAt=function(t,e){var n=this.copy_();return n.endSet_=!0,void 0===t&&(t=null),n.indexEndValue_=t,void 0!==e?(n.endNameSet_=!0,n.indexEndName_=e):(n.endNameSet_=!1,n.indexEndName_=""),n},t.prototype.orderBy=function(t){var e=this.copy_();return e.index_=t,e},t.prototype.getQueryObject=function(){var e=t.WIRE_PROTOCOL_CONSTANTS_,n={};if(this.startSet_&&(n[e.INDEX_START_VALUE]=this.indexStartValue_,this.startNameSet_&&(n[e.INDEX_START_NAME]=this.indexStartName_)),this.endSet_&&(n[e.INDEX_END_VALUE]=this.indexEndValue_,this.endNameSet_&&(n[e.INDEX_END_NAME]=this.indexEndName_)),this.limitSet_){n[e.LIMIT]=this.limit_;var r=this.viewFrom_;""===r&&(r=this.isViewFromLeft()?e.VIEW_FROM_LEFT:e.VIEW_FROM_RIGHT),n[e.VIEW_FROM]=r}return this.index_!==Ct&&(n[e.INDEX]=this.index_.toString()),n},t.prototype.loadsAllData=function(){return!(this.startSet_||this.endSet_||this.limitSet_)},t.prototype.isDefault=function(){return this.loadsAllData()&&this.index_==Ct},t.prototype.getNodeFilter=function(){return this.loadsAllData()?new le(this.getIndex()):this.hasLimit()?new Ze(this):new $e(this)},t.prototype.toRestQueryStringParameters=function(){var e,n=t.REST_QUERY_CONSTANTS_,r={};return this.isDefault()?r:(this.index_===Ct?e=n.PRIORITY_INDEX:this.index_===qt?e=n.VALUE_INDEX:this.index_===dt?e=n.KEY_INDEX:(i.assert(this.index_ instanceof Vt,"Unrecognized index type!"),e=this.index_.toString()),r[n.ORDER_BY]=i.stringify(e),this.startSet_&&(r[n.START_AT]=i.stringify(this.indexStartValue_),this.startNameSet_&&(r[n.START_AT]+=","+i.stringify(this.indexStartName_))),this.endSet_&&(r[n.END_AT]=i.stringify(this.indexEndValue_),this.endNameSet_&&(r[n.END_AT]+=","+i.stringify(this.indexEndName_))),this.limitSet_&&(this.isViewFromLeft()?r[n.LIMIT_TO_FIRST]=this.limit_:r[n.LIMIT_TO_LAST]=this.limit_),r)},t.WIRE_PROTOCOL_CONSTANTS_={INDEX_START_VALUE:"sp",INDEX_START_NAME:"sn",INDEX_END_VALUE:"ep",INDEX_END_NAME:"en",LIMIT:"l",VIEW_FROM:"vf",VIEW_FROM_LEFT:"l",VIEW_FROM_RIGHT:"r",INDEX:"i"},t.REST_QUERY_CONSTANTS_={ORDER_BY:"orderBy",PRIORITY_INDEX:"$priority",VALUE_INDEX:"$value",KEY_INDEX:"$key",START_AT:"startAt",END_AT:"endAt",LIMIT_TO_FIRST:"limitToFirst",LIMIT_TO_LAST:"limitToLast"},t.DEFAULT=new t,t}(),en=function(t){function e(e,n){if(!(e instanceof Je))throw new Error("new Reference() no longer supported - use app.database().");return t.call(this,e,n,tn.DEFAULT,!1)||this}return a.__extends(e,t),e.prototype.getKey=function(){return i.validateArgCount("Reference.key",0,0,arguments.length),this.path.isEmpty()?null:this.path.getBack()},e.prototype.child=function(t){return i.validateArgCount("Reference.child",1,1,arguments.length),"number"==typeof t?t=String(t):t instanceof W||(null===this.path.getFront()?function(t,e,n,r){n&&(n=n.replace(/^\/*\.info(\/|$)/,"/")),ot(t,e,n,r)}("Reference.child",1,t,!1):ot("Reference.child",1,t,!1)),new e(this.repo,this.path.child(t))},e.prototype.getParent=function(){i.validateArgCount("Reference.parent",0,0,arguments.length);var t=this.path.parent();return null===t?null:new e(this.repo,t)},e.prototype.getRoot=function(){i.validateArgCount("Reference.root",0,0,arguments.length);for(var t=this;null!==t.getParent();)t=t.getParent();return t},e.prototype.databaseProp=function(){return this.repo.database},e.prototype.set=function(t,e){i.validateArgCount("Reference.set",1,2,arguments.length),at("Reference.set",this.path),Z("Reference.set",1,t,this.path,!1),i.validateCallback("Reference.set",2,e,!0);var n=new i.Deferred;return this.repo.setWithPriority(this.path,t,null,n.wrapCallback(e)),n.promise},e.prototype.update=function(t,e){if(i.validateArgCount("Reference.update",1,2,arguments.length),at("Reference.update",this.path),Array.isArray(t)){for(var n={},r=0;r<t.length;++r)n[""+r]=t[r];t=n,T("Passing an Array to Firebase.update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}et("Reference.update",1,t,this.path,!1),i.validateCallback("Reference.update",2,e,!0);var o=new i.Deferred;return this.repo.update(this.path,t,o.wrapCallback(e)),o.promise},e.prototype.setWithPriority=function(t,e,n){if(i.validateArgCount("Reference.setWithPriority",2,3,arguments.length),at("Reference.setWithPriority",this.path),Z("Reference.setWithPriority",1,t,this.path,!1),nt("Reference.setWithPriority",2,e,!1),i.validateCallback("Reference.setWithPriority",3,n,!0),".length"===this.getKey()||".keys"===this.getKey())throw"Reference.setWithPriority failed: "+this.getKey()+" is a read-only object.";var r=new i.Deferred;return this.repo.setWithPriority(this.path,t,e,r.wrapCallback(n)),r.promise},e.prototype.remove=function(t){return i.validateArgCount("Reference.remove",0,1,arguments.length),at("Reference.remove",this.path),i.validateCallback("Reference.remove",1,t,!0),this.set(null,t)},e.prototype.transaction=function(t,e,n){if(i.validateArgCount("Reference.transaction",1,3,arguments.length),at("Reference.transaction",this.path),i.validateCallback("Reference.transaction",1,t,!1),i.validateCallback("Reference.transaction",2,e,!0),function(t,e,n,r){if((!r||void 0!==n)&&"boolean"!=typeof n)throw new Error(i.errorPrefix(t,e,r)+"must be a boolean.")}("Reference.transaction",3,n,!0),".length"===this.getKey()||".keys"===this.getKey())throw"Reference.transaction failed: "+this.getKey()+" is a read-only object.";void 0===n&&(n=!0);var r=new i.Deferred;"function"==typeof e&&r.promise.catch(function(){});return this.repo.startTransaction(this.path,t,function(t,n,i){t?r.reject(t):r.resolve(new ct(n,i)),"function"==typeof e&&e(t,n,i)},n),r.promise},e.prototype.setPriority=function(t,e){i.validateArgCount("Reference.setPriority",1,2,arguments.length),at("Reference.setPriority",this.path),nt("Reference.setPriority",1,t,!1),i.validateCallback("Reference.setPriority",2,e,!0);var n=new i.Deferred;return this.repo.setWithPriority(this.path.child(".priority"),t,null,n.wrapCallback(e)),n.promise},e.prototype.push=function(t,e){i.validateArgCount("Reference.push",0,2,arguments.length),at("Reference.push",this.path),Z("Reference.push",1,t,this.path,!0),i.validateCallback("Reference.push",2,e,!0);var n,r=this.repo.serverTime(),o=ht(r),a=this.child(o),s=this.child(o);return n=null!=t?a.set(t,e).then(function(){return s}):Promise.resolve(s),a.then=n.then.bind(n),a.catch=n.then.bind(n,void 0),"function"==typeof e&&n.catch(function(){}),a},e.prototype.onDisconnect=function(){return at("Reference.onDisconnect",this.path),new ut(this.repo,this.path)},Object.defineProperty(e.prototype,"database",{get:function(){return this.databaseProp()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"key",{get:function(){return this.getKey()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"parent",{get:function(){return this.getParent()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"root",{get:function(){return this.getRoot()},enumerable:!0,configurable:!0}),e}(zt);zt.__referenceConstructor=en,_e.__referenceConstructor=en;var nn,rn=function(){return function(){this.children={},this.childCount=0,this.value=null}}(),on=function(){function t(t,e,n){void 0===t&&(t=""),void 0===e&&(e=null),void 0===n&&(n=new rn),this.name_=t,this.parent_=e,this.node_=n}return t.prototype.subTree=function(e){for(var n,r=e instanceof W?e:new W(e),o=this;null!==(n=r.getFront());){o=new t(n,o,i.safeGet(o.node_.children,n)||new rn),r=r.popFront()}return o},t.prototype.getValue=function(){return this.node_.value},t.prototype.setValue=function(t){i.assert(void 0!==t,"Cannot set value to undefined"),this.node_.value=t,this.updateParents_()},t.prototype.clear=function(){this.node_.value=null,this.node_.children={},this.node_.childCount=0,this.updateParents_()},t.prototype.hasChildren=function(){return this.node_.childCount>0},t.prototype.isEmpty=function(){return null===this.getValue()&&!this.hasChildren()},t.prototype.forEachChild=function(e){var n=this;i.forEach(this.node_.children,function(r,i){e(new t(r,n,i))})},t.prototype.forEachDescendant=function(t,e,n){e&&!n&&t(this),this.forEachChild(function(e){e.forEachDescendant(t,!0,n)}),e&&n&&t(this)},t.prototype.forEachAncestor=function(t,e){for(var n=e?this:this.parent();null!==n;){if(t(n))return!0;n=n.parent()}return!1},t.prototype.forEachImmediateDescendantWithValue=function(t){this.forEachChild(function(e){null!==e.getValue()?t(e):e.forEachImmediateDescendantWithValue(t)})},t.prototype.path=function(){return new W(null===this.parent_?this.name_:this.parent_.path()+"/"+this.name_)},t.prototype.name=function(){return this.name_},t.prototype.parent=function(){return this.parent_},t.prototype.updateParents_=function(){null!==this.parent_&&this.parent_.updateChild_(this.name_,this)},t.prototype.updateChild_=function(t,e){var n=e.isEmpty(),r=i.contains(this.node_.children,t);n&&r?(delete this.node_.children[t],this.node_.childCount--,this.updateParents_()):n||r||(this.node_.children[t]=e.node_,this.node_.childCount++,this.updateParents_())},t}();!function(t){t[t.RUN=0]="RUN",t[t.SENT=1]="SENT",t[t.COMPLETED=2]="COMPLETED",t[t.SENT_NEEDS_ABORT=3]="SENT_NEEDS_ABORT",t[t.NEEDS_ABORT=4]="NEEDS_ABORT"}(nn||(nn={})),Je.MAX_TRANSACTION_RETRIES_=25,Je.prototype.transactions_init_=function(){this.transactionQueueTree_=new on},Je.prototype.startTransaction=function(t,e,n,r){this.log_("transaction on "+t);var o=function(){},a=new en(this,t);a.on("value",o);var s={path:t,update:e,onComplete:n,status:null,order:d(),applyLocally:r,retryCount:0,unwatcher:function(){a.off("value",o)},abortReason:null,currentWriteId:null,currentInputSnapshot:null,currentOutputSnapshotRaw:null,currentOutputSnapshotResolved:null},u=this.getLatestState_(t);s.currentInputSnapshot=u;var c=s.update(u.val());if(void 0===c){if(s.unwatcher(),s.currentOutputSnapshotRaw=null,s.currentOutputSnapshotResolved=null,s.onComplete){var h=new Bt(s.currentInputSnapshot,new en(this,s.path),Ct);s.onComplete(null,!1,h)}}else{tt("transaction failed: Data returned ",c,s.path),s.status=nn.RUN;var l=this.transactionQueueTree_.subTree(t),f=l.getValue()||[];f.push(s),l.setValue(f);var p=void 0;if("object"==typeof c&&null!==c&&i.contains(c,".priority"))p=i.safeGet(c,".priority"),i.assert($(p),"Invalid priority returned by transaction. Priority must be a valid string, finite number, server value, or null.");else p=(this.serverSyncTree_.calcCompleteEventCache(t)||Lt.EMPTY_NODE).getPriority().val();p=p;var v=this.generateServerValues(),y=Ut(c,p),g=$t(y,v);s.currentOutputSnapshotRaw=y,s.currentOutputSnapshotResolved=g,s.currentWriteId=this.getNextWriteId_();var m=this.serverSyncTree_.applyUserOverwrite(t,g,s.currentWriteId,s.applyLocally);this.eventQueue_.raiseEventsForChangedPath(t,m),this.sendReadyTransactions_()}},Je.prototype.getLatestState_=function(t,e){return this.serverSyncTree_.calcCompleteEventCache(t,e)||Lt.EMPTY_NODE},Je.prototype.sendReadyTransactions_=function(t){var e=this;if(void 0===t&&(t=this.transactionQueueTree_),t||this.pruneCompletedTransactionsBelowNode_(t),null!==t.getValue()){var n=this.buildTransactionQueue_(t);i.assert(n.length>0,"Sending zero length transaction queue"),n.every(function(t){return t.status===nn.RUN})&&this.sendTransactionQueue_(t.path(),n)}else t.hasChildren()&&t.forEachChild(function(t){e.sendReadyTransactions_(t)})},Je.prototype.sendTransactionQueue_=function(t,e){for(var n=this,r=e.map(function(t){return t.currentWriteId}),o=this.getLatestState_(t,r),a=o,s=o.hash(),u=0;u<e.length;u++){var c=e[u];i.assert(c.status===nn.RUN,"tryToSendTransactionQueue_: items in queue should all be run."),c.status=nn.SENT,c.retryCount++;var h=W.relativePath(t,c.path);a=a.updateChild(h,c.currentOutputSnapshotRaw)}var l=a.val(!0),f=t;this.server_.put(f.toString(),l,function(r){n.log_("transaction put response",{path:f.toString(),status:r});var i=[];if("ok"===r){for(var o=[],a=0;a<e.length;a++){if(e[a].status=nn.COMPLETED,i=i.concat(n.serverSyncTree_.ackUserWrite(e[a].currentWriteId)),e[a].onComplete){var s=e[a].currentOutputSnapshotResolved,u=new en(n,e[a].path),c=new Bt(s,u,Ct);o.push(e[a].onComplete.bind(null,null,!0,c))}e[a].unwatcher()}n.pruneCompletedTransactionsBelowNode_(n.transactionQueueTree_.subTree(t)),n.sendReadyTransactions_(),n.eventQueue_.raiseEventsForChangedPath(t,i);for(a=0;a<o.length;a++)F(o[a])}else{if("datastale"===r)for(a=0;a<e.length;a++)e[a].status===nn.SENT_NEEDS_ABORT?e[a].status=nn.NEEDS_ABORT:e[a].status=nn.RUN;else{T("transaction at "+f.toString()+" failed: "+r);for(a=0;a<e.length;a++)e[a].status=nn.NEEDS_ABORT,e[a].abortReason=r}n.rerunTransactions_(t)}},s)},Je.prototype.rerunTransactions_=function(t){var e=this.getAncestorTransactionNode_(t),n=e.path(),r=this.buildTransactionQueue_(e);return this.rerunTransactionQueue_(r,n),n},Je.prototype.rerunTransactionQueue_=function(t,e){if(0!==t.length){for(var n=[],r=[],o=t.filter(function(t){return t.status===nn.RUN}).map(function(t){return t.currentWriteId}),a=0;a<t.length;a++){var s=t[a],u=W.relativePath(e,s.path),c=!1,h=void 0;if(i.assert(null!==u,"rerunTransactionsUnderNode_: relativePath should not be null."),s.status===nn.NEEDS_ABORT)c=!0,h=s.abortReason,r=r.concat(this.serverSyncTree_.ackUserWrite(s.currentWriteId,!0));else if(s.status===nn.RUN)if(s.retryCount>=Je.MAX_TRANSACTION_RETRIES_)c=!0,h="maxretry",r=r.concat(this.serverSyncTree_.ackUserWrite(s.currentWriteId,!0));else{var l=this.getLatestState_(s.path,o);s.currentInputSnapshot=l;var f=t[a].update(l.val());if(void 0!==f){tt("transaction failed: Data returned ",f,s.path);var p=Ut(f);"object"==typeof f&&null!=f&&i.contains(f,".priority")||(p=p.updatePriority(l.getPriority()));var d=s.currentWriteId,v=this.generateServerValues(),y=$t(p,v);s.currentOutputSnapshotRaw=p,s.currentOutputSnapshotResolved=y,s.currentWriteId=this.getNextWriteId_(),o.splice(o.indexOf(d),1),r=(r=r.concat(this.serverSyncTree_.applyUserOverwrite(s.path,y,s.currentWriteId,s.applyLocally))).concat(this.serverSyncTree_.ackUserWrite(d,!0))}else c=!0,h="nodata",r=r.concat(this.serverSyncTree_.ackUserWrite(s.currentWriteId,!0))}if(this.eventQueue_.raiseEventsForChangedPath(e,r),r=[],c&&(t[a].status=nn.COMPLETED,function(t){setTimeout(t,Math.floor(0))}(t[a].unwatcher),t[a].onComplete))if("nodata"===h){var g=new en(this,t[a].path),m=t[a].currentInputSnapshot,_=new Bt(m,g,Ct);n.push(t[a].onComplete.bind(null,null,!1,_))}else n.push(t[a].onComplete.bind(null,new Error(h),!1,null))}this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);for(a=0;a<n.length;a++)F(n[a]);this.sendReadyTransactions_()}},Je.prototype.getAncestorTransactionNode_=function(t){for(var e,n=this.transactionQueueTree_;null!==(e=t.getFront())&&null===n.getValue();)n=n.subTree(e),t=t.popFront();return n},Je.prototype.buildTransactionQueue_=function(t){var e=[];return this.aggregateTransactionQueuesForNode_(t,e),e.sort(function(t,e){return t.order-e.order}),e},Je.prototype.aggregateTransactionQueuesForNode_=function(t,e){var n=this,r=t.getValue();if(null!==r)for(var i=0;i<r.length;i++)e.push(r[i]);t.forEachChild(function(t){n.aggregateTransactionQueuesForNode_(t,e)})},Je.prototype.pruneCompletedTransactionsBelowNode_=function(t){var e=this,n=t.getValue();if(n){for(var r=0,i=0;i<n.length;i++)n[i].status!==nn.COMPLETED&&(n[r]=n[i],r++);n.length=r,t.setValue(n.length>0?n:null)}t.forEachChild(function(t){e.pruneCompletedTransactionsBelowNode_(t)})},Je.prototype.abortTransactions_=function(t){var e=this,n=this.getAncestorTransactionNode_(t).path(),r=this.transactionQueueTree_.subTree(t);return r.forEachAncestor(function(t){e.abortTransactionsOnNode_(t)}),this.abortTransactionsOnNode_(r),r.forEachDescendant(function(t){e.abortTransactionsOnNode_(t)}),n},Je.prototype.abortTransactionsOnNode_=function(t){var e=t.getValue();if(null!==e){for(var n=[],r=[],o=-1,a=0;a<e.length;a++)if(e[a].status===nn.SENT_NEEDS_ABORT);else if(e[a].status===nn.SENT)i.assert(o===a-1,"All SENT items should be at beginning of queue."),o=a,e[a].status=nn.SENT_NEEDS_ABORT,e[a].abortReason="set";else if(i.assert(e[a].status===nn.RUN,"Unexpected transaction status in abort"),e[a].unwatcher(),r=r.concat(this.serverSyncTree_.ackUserWrite(e[a].currentWriteId,!0)),e[a].onComplete){n.push(e[a].onComplete.bind(null,new Error("set"),!1,null))}-1===o?t.setValue(null):e.length=o+1,this.eventQueue_.raiseEventsForChangedPath(t.path(),r);for(a=0;a<n.length;a++)F(n[a])}};var an,sn=function(){function t(){this.repos_={},this.useRestClient_=!1}return t.getInstance=function(){return an||(an=new t),an},t.prototype.interrupt=function(){for(var t in this.repos_)for(var e in this.repos_[t])this.repos_[t][e].interrupt()},t.prototype.resume=function(){for(var t in this.repos_)for(var e in this.repos_[t])this.repos_[t][e].resume()},t.prototype.databaseFromApp=function(t,e){var n=e||t.options.databaseURL;void 0===n&&C("Can't determine Firebase Database URL.  Be sure to include databaseURL option when calling firebase.initializeApp().");var r=K(n),i=r.repoInfo;return st("Invalid Firebase Database URL",1,r),r.path.isEmpty()||C("Database URL must point to the root of a Firebase Database (not including a child path)."),this.createRepo(i,t).database},t.prototype.deleteRepo=function(t){var e=i.safeGet(this.repos_,t.app.name);e&&i.safeGet(e,t.repoInfo_.toURLString())===t||C("Database "+t.app.name+"("+t.repoInfo_+") has already been deleted."),t.interrupt(),delete e[t.repoInfo_.toURLString()]},t.prototype.createRepo=function(t,e){var n=i.safeGet(this.repos_,e.name);n||(n={},this.repos_[e.name]=n);var r=i.safeGet(n,t.toURLString());return r&&C("Database initialized multiple times. Please make sure the format of the database URL matches with each database() call."),r=new Je(t,this.useRestClient_,e),n[t.toURLString()]=r,r},t.prototype.forceRestClient=function(t){this.useRestClient_=t},t}(),un=function(){function t(t){this.repo_=t,t instanceof Je||C("Don't call new Database() directly - please use firebase.database()."),this.root_=new en(t,W.Empty),this.INTERNAL=new cn(this)}return Object.defineProperty(t.prototype,"app",{get:function(){return this.repo_.app},enumerable:!0,configurable:!0}),t.prototype.ref=function(t){return this.checkDeleted_("ref"),i.validateArgCount("database.ref",0,1,arguments.length),t instanceof en?this.refFromURL(t.toString()):void 0!==t?this.root_.child(t):this.root_},t.prototype.refFromURL=function(t){var e="database.refFromURL";this.checkDeleted_(e),i.validateArgCount(e,1,1,arguments.length);var n=K(t);st(e,1,n);var r=n.repoInfo;return r.host!==this.repo_.repoInfo_.host&&C(e+": Host name does not match the current database: (found "+r.host+" but expected "+this.repo_.repoInfo_.host+")"),this.ref(n.path.toString())},t.prototype.checkDeleted_=function(t){null===this.repo_&&C("Cannot call "+t+" on a deleted database.")},t.prototype.goOffline=function(){i.validateArgCount("database.goOffline",0,0,arguments.length),this.checkDeleted_("goOffline"),this.repo_.interrupt()},t.prototype.goOnline=function(){i.validateArgCount("database.goOnline",0,0,arguments.length),this.checkDeleted_("goOnline"),this.repo_.resume()},t.ServerValue={TIMESTAMP:{".sv":"timestamp"}},t}(),cn=function(){function t(t){this.database=t}return t.prototype.delete=function(){return a.__awaiter(this,void 0,void 0,function(){return a.__generator(this,function(t){return this.database.checkDeleted_("delete"),sn.getInstance().deleteRepo(this.database.repo_),this.database.repo_=null,this.database.root_=null,this.database.INTERNAL=null,this.database=null,[2]})})},t}(),hn=Object.freeze({forceLongPolling:function(){Be.forceDisallow(),We.forceAllow()},forceWebSockets:function(){We.forceDisallow()},isWebSocketsAvailable:function(){return Be.isAvailable()},setSecurityDebugCallback:function(t,e){t.repo.persistentConnection_.securityDebugCallback_=e},stats:function(t,e){t.repo.stats(e)},statsIncrementCounter:function(t,e){t.repo.statsIncrementCounter(e)},dataUpdateCount:function(t){return t.repo.dataUpdateCount},interceptServerData:function(t,e){return t.repo.interceptServerData_(e)}}),ln=Xe;Xe.prototype.simpleListen=function(t,e){this.sendRequest("q",{p:t},e)},Xe.prototype.echo=function(t,e){this.sendRequest("echo",{d:t},e)};var fn=Ge,pn=B,dn=Object.freeze({DataConnection:ln,RealTimeConnection:fn,hijackHash:function(t){var e=Xe.prototype.put;return Xe.prototype.put=function(n,r,i,o){void 0!==o&&(o=t()),e.call(this,n,r,i,o)},function(){Xe.prototype.put=e}},ConnectionTarget:pn,queryIdentifier:function(t){return t.queryIdentifier()},listens:function(t){return t.repo.persistentConnection_.listens_},forceRestClient:function(t){sn.getInstance().forceRestClient(t)}}),vn=un.ServerValue;function yn(e){var n=e.INTERNAL.registerService("database",function(t,e,n){return sn.getInstance().databaseFromApp(t,n)},{Reference:en,Query:zt,Database:un,enableLogging:_,INTERNAL:hn,ServerValue:vn,TEST_ACCESS:dn},null,!0);i.isNodeSdk()&&(t.exports=n)}yn(s),e.registerDatabase=yn,e.Database=un,e.Query=zt,e.Reference=en,e.enableLogging=_,e.ServerValue=vn,e.DataSnapshot=Bt,e.OnDisconnect=ut}).call(this,n(7))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GalleryService=void 0;var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();n(1),n(4);var i=function(t){return t&&t.__esModule?t:{default:t}}(n(3)),o=n(5);var a=document.body.querySelector(".progress-bar__bar");e.GalleryService=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return r(t,null,[{key:"imagenUp",value:function(t){var e=this,n=i.default.storage().ref("/Images/"+t.name);n.put(t).on("state_changed",function(t){a.style.transform="translateX("+Math.floor(t.bytesTransferred/t.totalBytes*100)+"%)"},function(t){console.error(t)},function(){n.getDownloadURL().then(function(t){e.addDBImg(t)})})}},{key:"addDBImg",value:function(t){var e=new o.Gallery;i.default.database().ref("Images").push().set({url:t}),i.default.database().ref("Images").once("child_added").then(function(t){e.addImage()})}}]),t}()},function(t,e,n){"use strict";var r=n(20),i=n(13),o=n(5),a=n(12),s=function(t){return t&&t.__esModule?t:{default:t}}(n(3)),u=n(10);n(6),n(26),s.default.initializeApp({apiKey:u.APIKEY,authDomain:u.AUTHDOMAIN,databaseURL:u.DBURL,projectId:u.PROJECTID,storageBucket:u.STRBUCKET,messagingSenderId:u.MESSAGSENDERID});var c=new a.AuthService,h=new o.Gallery,l=function(t){t.addEventListener("click",function(e){var n=[].concat(function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(t.querySelectorAll("img"))).indexOf(e.target);"IMG"===e.target.tagName&&i.ModalService.inyectModal(n)})},f=function(){document.getElementById("Login").addEventListener("click",function(){c.isAuth()?c.logOut().then(function(){var t=document.getElementById("app");document.body.removeChild(t)}):c.login().then(function(){c.renderLogin(),document.getElementById("fileUp").addEventListener("change",function(t){var e=t.target.files[0];r.GalleryService.imagenUp(e)}),l(document.getElementById("gallery"))})})};console.log(c.isAuth()),c.isAuth()?h.addImage():f()},,,,,function(t,e){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,